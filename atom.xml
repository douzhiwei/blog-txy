<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>豆豆豆</title>
  
  <subtitle>学无止境</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://douzhiwei.top/"/>
  <updated>2018-07-17T11:33:29.000Z</updated>
  <id>http://douzhiwei.top/</id>
  
  <author>
    <name>豆</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>css3-css3选择器</title>
    <link href="http://douzhiwei.top/2018/07/17/css3-css3%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    <id>http://douzhiwei.top/2018/07/17/css3-css3选择器/</id>
    <published>2018-07-17T08:18:00.000Z</published>
    <updated>2018-07-17T11:33:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>系统的学习一遍css3,也当是阅读笔记&amp;备忘,感谢大漠的图解css3这本书</p><p>##css3选择器分为5大类如下图<br><img src="/2018/07/17/css3-css3选择器/css-select.png" alt=""></p><h3 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h3><p>基本选择器就不具体展开了,就是<code>E,#id,.class,selector1,selectorN</code></p><h3 id="层次选择器"><a href="#层次选择器" class="headerlink" title="层次选择器"></a>层次选择器</h3><p>层次包括 后代, 父子, 相邻兄弟, 通用兄弟 , 见下表</p><table><thead><tr><th>选择器</th><th style="text-align:center">类型</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td>E   F</td><td style="text-align:center">后代选择器</td><td style="text-align:center">选择匹配的F元素,且匹配F元素被包含在匹配的E元素内</td></tr><tr><td>E &gt; F</td><td style="text-align:center">子代选择器</td><td style="text-align:center">选择匹配的F元素,且匹配的F元素是E的子元素</td></tr><tr><td>E + F</td><td style="text-align:center">相邻兄弟选择器</td><td style="text-align:center">选择匹配的F元素,且F紧临E元素</td></tr><tr><td>E ~ F</td><td style="text-align:center">通用选择器</td><td style="text-align:center">选择匹配的F元素,且匹配位于E元素后所有的F元素</td></tr></tbody></table><p>例子,复制代码在浏览器中打开,自己分析,哈哈哈,为了节省篇幅,浏览器前缀省虑</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE HTML&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en-US"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>使用CSS3层次选择器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">*&#123;margin: 0;padding:0;&#125;</span></span><br><span class="line"><span class="undefined">body &#123;width: 300px;margin: 0 auto;&#125;</span></span><br><span class="line"><span class="undefined">div&#123;margin:5px;padding:5px;border: 1px solid #ccc;&#125;</span></span><br><span class="line"><span class="undefined">div div &#123;background: orange;&#125;</span></span><br><span class="line"><span class="undefined">body &gt; div &#123;background: green;&#125;</span></span><br><span class="line"><span class="undefined">.active + div &#123;background: lime;&#125;</span></span><br><span class="line"><span class="undefined">.active ~ div &#123;background: red;&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>  <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- 为了说明相邻兄弟选择器，在此处添加一个类名active --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>4</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>7</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>8</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>9</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>10<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="动态伪类选择器"><a href="#动态伪类选择器" class="headerlink" title="动态伪类选择器"></a>动态伪类选择器</h3><p>伪类选择器包含一下几种</p><ul><li>E:link</li><li>E:visited</li><li>E:actived</li><li>E:hover</li><li>E:focus</li></ul><p>这比较简单,大家都会的,不展开了</p><h3 id="目标伪类选择器"><a href="#目标伪类选择器" class="headerlink" title="目标伪类选择器"></a>目标伪类选择器</h3><p>语法: E:target 选择匹配的E的所有元素,且匹配的元素被相关的url指向<br>例子 css实现手风琴效果</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE HTML&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en-US"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>垂直手风琴<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">.accordionMenu &#123;</span></span><br><span class="line"><span class="undefined">background: #fff;</span></span><br><span class="line"><span class="undefined">color:#424242;</span></span><br><span class="line"><span class="undefined">font: 12px Arial, Verdana, sans-serif;</span></span><br><span class="line"><span class="undefined">margin:0 auto;</span></span><br><span class="line"><span class="undefined">padding: 10px;</span></span><br><span class="line"><span class="undefined">width: 500px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">.accordionMenu h2 &#123;</span></span><br><span class="line"><span class="undefined">margin:5px 0;</span></span><br><span class="line"><span class="undefined">padding:0;</span></span><br><span class="line"><span class="undefined">position: relative;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">.accordionMenu h2:before &#123;</span></span><br><span class="line"><span class="undefined">border: 5px solid #fff;</span></span><br><span class="line"><span class="undefined">border-color: #fff transparent transparent;</span></span><br><span class="line"><span class="undefined">content:"";</span></span><br><span class="line"><span class="undefined">height: 0;</span></span><br><span class="line"><span class="undefined">position:absolute;</span></span><br><span class="line"><span class="undefined">right: 10px;</span></span><br><span class="line"><span class="undefined">top: 15px;</span></span><br><span class="line"><span class="undefined">width: 0;</span></span><br><span class="line"><span class="undefined">&#125; </span></span><br><span class="line"><span class="undefined">.accordionMenu h2 a &#123;</span></span><br><span class="line"><span class="undefined">background: #8f8f8f;</span></span><br><span class="line"><span class="undefined">background: linear-gradient( top, #cecece, #8f8f8f); </span></span><br><span class="line"><span class="undefined">border-radius: 5px;</span></span><br><span class="line"><span class="undefined">color:#424242;</span></span><br><span class="line"><span class="undefined">display: block;</span></span><br><span class="line"><span class="undefined">font-size: 13px;</span></span><br><span class="line"><span class="undefined">font-weight: normal;</span></span><br><span class="line"><span class="undefined">margin:0;</span></span><br><span class="line"><span class="undefined">padding:10px 10px;</span></span><br><span class="line"><span class="undefined">text-shadow: 2px 2px 2px #aeaeae;</span></span><br><span class="line"><span class="undefined">text-decoration:none;</span></span><br><span class="line"><span class="undefined">&#125; </span></span><br><span class="line"><span class="undefined">.accordionMenu :target h2 a,</span></span><br><span class="line"><span class="undefined">.accordionMenu h2 a:focus,</span></span><br><span class="line"><span class="undefined">.accordionMenu h2 a:hover,</span></span><br><span class="line"><span class="undefined">.accordionMenu h2 a:active &#123;</span></span><br><span class="line"><span class="undefined">background: #2288dd;</span></span><br><span class="line"><span class="undefined">background: linear-gradient( top, #6bb2ff, #2288dd);</span></span><br><span class="line"><span class="undefined">color:#FFF;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">.accordionMenu p &#123;</span></span><br><span class="line"><span class="undefined">margin:0;</span></span><br><span class="line"><span class="undefined">height: 0;</span></span><br><span class="line"><span class="undefined">overflow: hidden;</span></span><br><span class="line"><span class="undefined">padding:0 10px;</span></span><br><span class="line"><span class="undefined">transition: height 0.5s ease-in;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">.accordionMenu :target p &#123;</span></span><br><span class="line"><span class="undefined">height:100px;</span></span><br><span class="line"><span class="undefined">overflow: auto;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">.accordionMenu :target h2:before &#123;</span></span><br><span class="line"><span class="undefined">border-color: transparent transparent transparent #fff;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">​</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"accordionMenu"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"menuSection"</span> <span class="attr">id</span>=<span class="string">"brand"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#brand"</span>&gt;</span>Brand<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"menuSection"</span> <span class="attr">id</span>=<span class="string">"promotion"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#promotion"</span>&gt;</span>Promotion<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"menuSection"</span> <span class="attr">id</span>=<span class="string">"event"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#event"</span>&gt;</span>Event<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">​<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="语言伪类选择器"><a href="#语言伪类选择器" class="headerlink" title="语言伪类选择器"></a>语言伪类选择器</h3><p>略过, 不常用,知道有这个东西就行</p><h3 id="UI元素状态伪类选择器"><a href="#UI元素状态伪类选择器" class="headerlink" title="UI元素状态伪类选择器"></a>UI元素状态伪类选择器</h3><p>包含一下几种,都是我们平时常用的,不展开说</p><ul><li>E:checked</li><li>E:enabled</li><li>E:disabled</li></ul><h3 id="结构伪类选择器"><a href="#结构伪类选择器" class="headerlink" title="结构伪类选择器"></a>结构伪类选择器</h3><p>自己看表,种类比较多,用处也比较大</p><table><thead><tr><th>选择器</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td>E:first-child</td><td style="text-align:center">选择父元素第一个子元素,相当于E:nth-child(1)</td></tr><tr><td>E:last-child</td><td style="text-align:center">选择父元素最后一个子元素,相当于E:nth-last-child(1)</td></tr><tr><td>E:root</td><td style="text-align:center">选择html元素</td></tr><tr><td>E:nth-child(n)</td><td style="text-align:center">选择父元素第n个子元素,n可以是整数,可以是公式,或者odd,even,n从1开始,</td></tr><tr><td>E:nth-last-child(n)</td><td style="text-align:center">于nth-child相反</td></tr><tr><td>E:nth-of-type(n)</td><td style="text-align:center">选择父元素内具有指定类型的第n个元素</td></tr><tr><td>E:nth-last-of-type(n)</td><td style="text-align:center">选择父元素指定类型的倒数第n个元素</td></tr><tr><td>E:first-of-type</td><td style="text-align:center">选择父元素内指定类型的第一个元素,于nth-of-type(1)相同</td></tr><tr><td>E:last-of-type</td><td style="text-align:center">选择父元素内指定类型的最后一个元素,于nth-last-of-type(1)相同</td></tr><tr><td>E:only-child</td><td style="text-align:center">选择父元素只包含一个子元素</td></tr><tr><td>E:only-of-type</td><td style="text-align:center">选择父元素只包含一个类型的子元素</td></tr><tr><td>E:empty</td><td style="text-align:center">匹配没有子元素的元素</td></tr></tbody></table><h4 id="结构伪类中的n是什么"><a href="#结构伪类中的n是什么" class="headerlink" title="结构伪类中的n是什么"></a>结构伪类中的n是什么</h4><p>n可以还是整数(1,2,3,4),关键字(odd,even),可以是公式(2n+1, -n+5)但是n的起始值是1,如果为0,选择器匹配不到任何的元素</p><h4 id="nth-child-等例子"><a href="#nth-child-等例子" class="headerlink" title="nth-child 等例子"></a>nth-child 等例子</h4><p>浏览器中打开,一个一个试,就都明白了</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE HTML&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en-US"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS3结构伪选择器的使用<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">*&#123;</span></span><br><span class="line"><span class="undefined">margin: 0;</span></span><br><span class="line"><span class="undefined">padding: 0;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">ul &#123;</span></span><br><span class="line"><span class="undefined">margin: 50px auto;</span></span><br><span class="line"><span class="undefined">width: 400px;</span></span><br><span class="line"><span class="undefined">list-style: none outside none;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">li &#123;</span></span><br><span class="line"><span class="undefined">display:inline-block;</span></span><br><span class="line"><span class="undefined">margin: 5px;</span></span><br><span class="line"><span class="undefined">padding: 5px;</span></span><br><span class="line"><span class="undefined">width:50px;</span></span><br><span class="line"><span class="undefined">height: 50px;</span></span><br><span class="line"><span class="undefined">font: bold 30px/50px arial;</span></span><br><span class="line"><span class="undefined">background: #000;</span></span><br><span class="line"><span class="undefined">color: #fff;</span></span><br><span class="line"><span class="undefined">border-radius: 50px;</span></span><br><span class="line"><span class="undefined">text-align: center;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">/*</span></span><br><span class="line"><span class="undefined">ul&gt;li:first-child &#123;</span></span><br><span class="line"><span class="undefined">background-color: green;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">ul&gt;li:last-child &#123;</span></span><br><span class="line"><span class="undefined">background-color: blue;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">ul&gt;li:nth-child(3)&#123;</span></span><br><span class="line"><span class="undefined">background-color: yellow;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">ul&gt;li:nth-child(n)&#123;</span></span><br><span class="line"><span class="undefined">background-color: orange;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">ul&gt;li:nth-child(2n)&#123;</span></span><br><span class="line"><span class="undefined">background-color: blue;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">ul&gt;li:nth-child(2n+1)&#123;</span></span><br><span class="line"><span class="undefined">background-color: blue;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">ul&gt;li:nth-child(-n+5)&#123;</span></span><br><span class="line"><span class="undefined">background-color: blue;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">ul&gt;li:nth-child(4n+1)&#123;</span></span><br><span class="line"><span class="undefined">background-color: blue;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">*/</span></span><br><span class="line"><span class="undefined">ul&gt;li:nth-last-child(even)&#123;</span></span><br><span class="line"><span class="undefined">background-color: green;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>6<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>7<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>8<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>9<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>10<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>11<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>12<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>13<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>14<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>15<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>16<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>17<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>18<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>19<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>20<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="nth-of-type"><a href="#nth-of-type" class="headerlink" title="nth-of-type"></a>nth-of-type</h4><p>nth-of-type 和nth-child类似,不同之处在: nth-of-type 只计算父元素中的子元素,他是不管类型的,当父元素下有多种类型的子元素的时候nth-of-type比nth-child更好用</p><p>例子</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE HTML&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en-US"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">ul &#123;</span></span><br><span class="line"><span class="undefined">list-style: none outside none;</span></span><br><span class="line"><span class="undefined">padding: 10px;</span></span><br><span class="line"><span class="undefined">background: green;</span></span><br><span class="line"><span class="undefined">width: 400px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">li &#123;margin-bottom: 10px;border: 1px solid orange;&#125;</span></span><br><span class="line"><span class="undefined">div &#123;margin-bottom: 10px;border: 1px solid blue;&#125;</span></span><br><span class="line"><span class="undefined">/*</span></span><br><span class="line"><span class="undefined">ul&gt;li:nth-child(5) &#123;background-color: yellow;&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">ul&gt; li:nth-child(2n)&#123;background-color: #fff&#125;</span></span><br><span class="line"><span class="undefined">*/</span></span><br><span class="line"><span class="undefined">ul&gt;li:nth-of-type(3)&#123;background-color:orange;&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>6<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>7<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>8<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>9<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>10<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="only-child的使用"><a href="#only-child的使用" class="headerlink" title="only-child的使用"></a>only-child的使用</h4><p>选择父元素中只有一个子元素的元素</p><p>例子</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE HTML&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en-US"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>:only-child的使用<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">.post &#123;</span></span><br><span class="line"><span class="undefined">width: 300px;</span></span><br><span class="line"><span class="undefined">margin: 20px auto;</span></span><br><span class="line"><span class="undefined">padding: 5px;</span></span><br><span class="line"><span class="undefined">border: 1px solid #ccc;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">p &#123;</span></span><br><span class="line"><span class="undefined">background: green;</span></span><br><span class="line"><span class="undefined">color: #fff;</span></span><br><span class="line"><span class="undefined">border: 1px solid orange;</span></span><br><span class="line"><span class="undefined">padding: 5px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">.post&gt;p:only-child&#123;</span></span><br><span class="line"><span class="undefined">border-width: 2px;</span></span><br><span class="line"><span class="undefined">background-color: #000;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我是第一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我是第二个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我就一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="否定伪类选择器"><a href="#否定伪类选择器" class="headerlink" title="否定伪类选择器"></a>否定伪类选择器</h3><p>语法: E:not(F) 匹配所以除去F的E元素, 比较简单不展开</p><h3 id="伪元素"><a href="#伪元素" class="headerlink" title="伪元素"></a>伪元素</h3><p>有一下几种</p><ul><li>::first-letter 选择第一个字母</li><li>::first-line 选择第一行</li><li>::before &amp; ::after 多用于清楚浮动</li><li>::selection 选择被选中的文本</li></ul><h3 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h3><p>列举两个我觉得常用属性选择器</p><table><thead><tr><th>选择器</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td>E[attr]</td><td style="text-align:center">选择有attr属性的E</td></tr><tr><td>E[attr=val]</td><td style="text-align:center">选择attr=val的E</td></tr></tbody></table><p>还有很多属性选择器,有点类似正则表达式的感觉了,不是特别的常用,如果想了解这,google吧,我这不一个一个列举了</p><p>栗子上一下,有兴趣的一个一个研究下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE HTML&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en-US"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS3属性选择器的使用<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    .demo &#123;</span></span><br><span class="line"><span class="undefined">      width: 300px;</span></span><br><span class="line"><span class="undefined">border: 1px solid #ccc;</span></span><br><span class="line"><span class="undefined">padding: 10px;</span></span><br><span class="line"><span class="undefined">      overflow: hidden;</span></span><br><span class="line"><span class="undefined">      margin: 20px auto;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">.demo a &#123;</span></span><br><span class="line"><span class="undefined">float: left;</span></span><br><span class="line"><span class="undefined">display: block;</span></span><br><span class="line"><span class="undefined">height: 50px;</span></span><br><span class="line"><span class="undefined">width: 50px;</span></span><br><span class="line"><span class="undefined">border-radius: 10px;</span></span><br><span class="line"><span class="undefined">text-align: center;</span></span><br><span class="line"><span class="undefined">background: #aac;</span></span><br><span class="line"><span class="undefined">color: blue;</span></span><br><span class="line"><span class="undefined">      font: bold 20px/50px Arial;</span></span><br><span class="line"><span class="undefined">margin-right: 5px;</span></span><br><span class="line"><span class="undefined">text-decoration: none;</span></span><br><span class="line"><span class="undefined">      margin: 5px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    a[id]&#123;background-color:yellow;&#125;</span></span><br><span class="line"><span class="undefined">    /* </span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"> a[id][title]&#123;background-color: red;&#125;</span></span><br><span class="line"><span class="undefined"> </span></span><br><span class="line"><span class="undefined">    a[id=first]&#123;background-color:red;&#125;</span></span><br><span class="line"><span class="undefined">    a[class="links"]&#123;background-color:yellow;&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">  a[lang|=zh]&#123;background-color: yellow;&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">  a[title~=website]&#123;background-color:yellow;&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">  a[class*=links]&#123;background-color:yellow;&#125;</span></span><br><span class="line"><span class="undefined"> </span></span><br><span class="line"><span class="undefined">  a[href^=http]&#123;background-color:yellow;&#125;</span></span><br><span class="line"><span class="undefined"> */</span></span><br><span class="line"><span class="undefined"> a[href$=png]&#123;background-color:yellow;&#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"demo"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.w3cplus.com"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">class</span>=<span class="string">"links item first"</span> <span class="attr">id</span>=<span class="string">"first"</span> <span class="attr">title</span>=<span class="string">"w3cplus"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"links active item"</span> <span class="attr">title</span>=<span class="string">"test website"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">lang</span>=<span class="string">"zh"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"sites/file/test.html"</span> <span class="attr">class</span>=<span class="string">"links item"</span> <span class="attr">title</span>=<span class="string">"this is a link"</span> <span class="attr">lang</span>=<span class="string">"zh-cn"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"sites/file/test.png"</span> <span class="attr">class</span>=<span class="string">"links item"</span> <span class="attr">target</span>=<span class="string">"_balnk"</span> <span class="attr">lang</span>=<span class="string">"zh-tw"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"sites/file/image.jpg"</span> <span class="attr">class</span>=<span class="string">"links item"</span> <span class="attr">title</span>=<span class="string">"zh-cn"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"mailto:w3cplus@hotmail"</span> <span class="attr">class</span>=<span class="string">"links item"</span> <span class="attr">title</span>=<span class="string">"website link"</span> <span class="attr">lang</span>=<span class="string">"zh"</span>&gt;</span>6<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/a.pdf"</span> <span class="attr">class</span>=<span class="string">"links item"</span> <span class="attr">title</span>=<span class="string">"open the website"</span> <span class="attr">lang</span>=<span class="string">"cn"</span>&gt;</span>7<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/abc.pdf"</span> <span class="attr">class</span>=<span class="string">"links item"</span> <span class="attr">title</span>=<span class="string">"close the website"</span> <span class="attr">lang</span>=<span class="string">"en-zh"</span>&gt;</span>8<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"abcdef.doc"</span> <span class="attr">class</span>=<span class="string">"links item"</span> <span class="attr">title</span>=<span class="string">"http://www.sina.com"</span>&gt;</span>9<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"abd.doc"</span> <span class="attr">class</span>=<span class="string">"linksitem last"</span> <span class="attr">id</span>=<span class="string">"last"</span>&gt;</span>10<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;系统的学习一遍css3,也当是阅读笔记&amp;amp;备忘,感谢大漠的图解css3这本书&lt;/p&gt;
&lt;p&gt;##css3选择器分为5大类如下图&lt;br&gt;&lt;img src=&quot;/2018/07/17/css3-css3选择器/css-select.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;基本选择器&quot;&gt;&lt;a href=&quot;#基本选择器&quot; class=&quot;headerlink&quot; title=&quot;基本选择器&quot;&gt;&lt;/a&gt;基本选择器&lt;/h3&gt;&lt;p&gt;基本选择器就不具体展开了,就是&lt;code&gt;E,#id,.class,selector1,selectorN&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;层次选择器&quot;&gt;&lt;a href=&quot;#层次选择器&quot; class=&quot;headerlink&quot; title=&quot;层次选择器&quot;&gt;&lt;/a&gt;层次选择器&lt;/h3&gt;&lt;p&gt;层次包括 后代, 父子, 相邻兄弟, 通用兄弟 , 见下表&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;选择器&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;类型&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;功能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;E   F&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;后代选择器&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;选择匹配的F元素,且匹配F元素被包含在匹配的E元素内&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E &amp;gt; F&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;子代选择器&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;选择匹配的F元素,且匹配的F元素是E的子元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E + F&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;相邻兄弟选择器&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;选择匹配的F元素,且F紧临E元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E ~ F&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;通用选择器&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;选择匹配的F元素,且匹配位于E元素后所有的F元素&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;例子,复制代码在浏览器中打开,自己分析,哈哈哈,为了节省篇幅,浏览器前缀省虑&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;!DOCTYPE HTML&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;lang&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;en-US&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;charset&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;使用CSS3层次选择器&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;style&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text/css&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;		*&amp;#123;margin: 0;padding:0;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;		body &amp;#123;width: 300px;margin: 0 auto;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;		div&amp;#123;margin:5px;padding:5px;border: 1px solid #ccc;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;		div div &amp;#123;background: orange;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;		body &amp;gt; div &amp;#123;background: green;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;		.active + div &amp;#123;background: lime;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;		.active ~ div &amp;#123;background: red;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;  &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;active&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;1&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 为了说明相邻兄弟选择器，在此处添加一个类名active --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;2&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;3&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;5&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;6&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;10&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="css3" scheme="http://douzhiwei.top/tags/css3/"/>
    
  </entry>
  
  <entry>
    <title>如何抓取页面所有内容</title>
    <link href="http://douzhiwei.top/2018/04/09/%E5%A6%82%E4%BD%95%E6%8A%93%E5%8F%96%E9%A1%B5%E9%9D%A2%E6%89%80%E6%9C%89%E5%86%85%E5%AE%B9/"/>
    <id>http://douzhiwei.top/2018/04/09/如何抓取页面所有内容/</id>
    <published>2018-04-09T02:57:11.000Z</published>
    <updated>2018-05-29T04:17:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何抓取页面所有内容"><a href="#如何抓取页面所有内容" class="headerlink" title="如何抓取页面所有内容"></a>如何抓取页面所有内容</h1><h2 id="基本需求"><a href="#基本需求" class="headerlink" title="基本需求"></a>基本需求</h2><p>抓取页面所有内容主要包括一下内容：</p><ol><li>页面内元素</li></ol><p>页面元素包含服务端直接返回的元素，动态构建的元素</p><ol><li>页面内所有资源</li></ol><p>页面所有资源包含本页面所在域资源以及第三方域资源，同主域的资源也认为第三方域资源，这种资源一般是以绝对路径的方式标识，同域下资源主要有三种表现方式 （以<a href="https://www.baidu.com举例）" target="_blank" rel="noopener">https://www.baidu.com举例）</a></p><p>a). 相对路径<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">"./image/logo.png"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p><p>b). 绝对路径<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">"https://www.baidu.com/image/logo.png"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p><p>c). 绝对路径2<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">"//www.baidu.com/image/logo.png"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p><p>这种表示方式会自动根据浏览器打开该页面的协议请求时加入协议（protocol），本地保存后，基于file协议打开同样会加入file:前缀。</p><h2 id="当前实现方案"><a href="#当前实现方案" class="headerlink" title="当前实现方案"></a>当前实现方案</h2><h3 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h3><ol><li><p>服务端http get 页面</p></li><li><p>根据服务端响应的html，遍历需要加载的其它资源，比如javascript、image、css、font、media等资源</p></li><li><p>处理html、javascript、css 等文件，进行资源路径替换，保证页面本地化后能正常打开</p></li></ol><h3 id="不足之处"><a href="#不足之处" class="headerlink" title="不足之处"></a>不足之处</h3><ol><li><p>http get 只能拿到原始内容，需要依赖后期再浏览器中加载之后的再渲染（比如依赖本地化的js再次请求数据进行页面构建 或者 直接生成dom进行页面构建）</p></li><li><p>请求后得到的资源文件依赖原本相对路径，如果处理有较高的技术难度，比如使用AMD、CMD等模式加载的文件。由于当前方案抓取资源时对当前资源目录层次全部铺平了（纵向目录已经不存在了，相对路径也会变化），所以需要动态修改（拿应用了AMD加载模式的页面举例）require.config.js 文件的内容，否则会导致页面js 无法正常加载，页面无法正常渲染。</p></li><li><p>对非html页面直接获取的资源，获取的难度较大，这种非html页面直接获取的资源包括，css 文件中引入的字体资源文件以及图片资源文件，js资源文件中引入的资源文件，比如上述2 中描述的AMD、CMD模式实现的按需加载。</p></li></ol><h2 id="新的实现方案"><a href="#新的实现方案" class="headerlink" title="新的实现方案"></a>新的实现方案</h2><p>puppeteer是操作chromnium的上层node api，当浏览器打开一个页面是，可以简单理解细分为如下过程：</p><ol><li>通知浏览器发起请求</li><li>浏览器发起请求</li><li>浏览器获取响应内容</li><li>浏览器把响应内容交给上层渲染引擎</li><li>渲染引擎处理</li></ol><p>在整个过程中，puppeteer提供了一种机制让我们有机会拦截到2和3这两个阶段，基于这点，我们可以做更多的事情，比如我们可以拦截页面的所有请求，可以截获所有的响应，而不用关注请求的去向，因为只要请求发出去了，就能受我们的控制，另外，由于是使用浏览器本身，所以跟直接http get 页面最大的区别在于前者是渲染后的，后者是原始的，前者对SPA或者依靠脚本构建的应用比较友好。</p><p>使用puppeteer实现完全能处理原始方案的不足，新的实现思路如下：</p><ol><li><p>拦截所有网络请求，对资源请求以及构建dom相关请求进行处理</p></li><li><p>对同域名下资源进行相对路径处理，在本地创建对应的相对路径</p></li><li><p>对不同域名下资源（第三方资源）以第三方域名为名建立新的目录，用来存储第三方资源</p></li><li><p>资源处理，处理html资源，css资源以及javascript文件中绝对路径为相对路径（这里绝对路径是指直接引入的cdn等模式路径，相对路径是指对cdn域名本地化目录后的路径）</p></li></ol><h2 id="核心代码说明"><a href="#核心代码说明" class="headerlink" title="核心代码说明"></a>核心代码说明</h2><p>基于上述新的方案，实现的核心代码如下，代码中加入了详细的注释，不再做过多解释，有疑问欢迎留言讨论</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> puppeteer = <span class="built_in">require</span>(<span class="string">'puppeteer'</span>);</span><br><span class="line"><span class="keyword">const</span> URL = <span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line"><span class="keyword">const</span> md5 = <span class="built_in">require</span>(<span class="string">'md5'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> shell = <span class="built_in">require</span>(<span class="string">'shelljs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//资源保存目录</span></span><br><span class="line"><span class="keyword">const</span> BASEDIR = <span class="string">'./asserts/'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> start = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化删除清理资源目录，仅测试阶段，因为当前目录为时间戳生成</span></span><br><span class="line">    shell.exec(<span class="string">'rm -rf asserts/'</span>);</span><br><span class="line">    <span class="comment">//因为所有网络请求都会拦截，处理请求和页面资源以及dom构建无关可忽略</span></span><br><span class="line">    <span class="comment">//下面的域名是比较常见的前端采集域名 (有很多没有列出来的)</span></span><br><span class="line">    <span class="keyword">const</span> blackList = [</span><br><span class="line">        <span class="string">'collect.ptengine.cn'</span>, </span><br><span class="line">        <span class="string">'collect.ptengine.jp'</span>,</span><br><span class="line">        <span class="string">'js.ptengine.cn'</span>,</span><br><span class="line">        <span class="string">'js.ptengine.jp'</span>,</span><br><span class="line">        <span class="string">'hm.baidu.com'</span>,</span><br><span class="line">        <span class="string">'api.growingio.com'</span>,</span><br><span class="line">        <span class="string">'www.google-analytics.com'</span>,</span><br><span class="line">        <span class="string">'script.hotjar.com'</span>,</span><br><span class="line">        <span class="string">'vars.hotjar.com'</span></span><br><span class="line">    ];</span><br><span class="line">    <span class="comment">//用来缓存第三方资源（包括css、javascript），在请求没有结束之前，无法获取完整的第三方资源列，无法保证css、javascript中内容替换完整，所以先缓存，请求结束后再统一替换</span></span><br><span class="line">    <span class="keyword">const</span> resourceBufferMap = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">    <span class="comment">//第三方资源服务（域名）列表</span></span><br><span class="line">    <span class="keyword">const</span> thirdPartyList = &#123;&#125;;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> browser = <span class="keyword">await</span> puppeteer.launch();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> page = <span class="keyword">await</span> browser.newPage();</span><br><span class="line">        <span class="comment">//启用请求拦截</span></span><br><span class="line">        <span class="keyword">await</span> page.setRequestInterception(<span class="literal">true</span>);</span><br><span class="line">       <span class="comment">//以博客园为例子进行页面抓取</span></span><br><span class="line">        <span class="keyword">let</span> url = <span class="string">"https://www.cnblogs.com"</span></span><br><span class="line">        <span class="keyword">let</span> docUrl = URL.parse(url);</span><br><span class="line">        <span class="comment">//获取请求地址的域名，用来确定资源是否来自第三方</span></span><br><span class="line">        <span class="keyword">let</span> originUrl = (docUrl.protocol + <span class="string">"//"</span> + docUrl.hostname)</span><br><span class="line">        <span class="comment">//@fixme 每次抓取生成的内容目录名称</span></span><br><span class="line">        <span class="keyword">let</span> md5_prefix = md5(<span class="built_in">Date</span>.now());</span><br><span class="line"></span><br><span class="line">        page.on(<span class="string">'request'</span>, <span class="keyword">async</span> (req) =&gt; &#123;</span><br><span class="line">            <span class="keyword">const</span> whitelist = [<span class="string">'image'</span>, <span class="string">'script'</span>, <span class="string">'stylesheet'</span>, <span class="string">'document'</span>, <span class="string">'font'</span>];</span><br><span class="line">            <span class="comment">//如果请求的是第三方域名，只考虑和页面构建相关的资源</span></span><br><span class="line">            <span class="keyword">if</span> (req.url().indexOf(originUrl) == <span class="number">-1</span> &amp;&amp; !whitelist.includes(req.resourceType())) &#123;</span><br><span class="line">                <span class="keyword">return</span> req.abort();</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//采集黑名单中的内容不处理</span></span><br><span class="line">            <span class="keyword">if</span> (blackList.indexOf(URL.parse(req.url()).host) != <span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> req.abort();</span><br><span class="line">            &#125;</span><br><span class="line">            req.continue();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        page.on(<span class="string">'response'</span>, <span class="keyword">async</span> res =&gt; &#123;</span><br><span class="line">            <span class="keyword">let</span> request = res.request(),</span><br><span class="line">                resourceUrl = request.url(),</span><br><span class="line">                urlObj = URL.parse(resourceUrl),</span><br><span class="line">                filePath = urlObj.pathname, <span class="comment">//文件路径</span></span><br><span class="line">                dirPath = path.dirname(filePath), <span class="comment">//目录路径</span></span><br><span class="line">                requestMethod = request.method().toUpperCase(), <span class="comment">//请求方法</span></span><br><span class="line">                isSameOrigin = resourceUrl.includes(originUrl); <span class="comment">//是否是同域名请求</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//只考虑get请求资源，其它http verb 对文件资源请求较少</span></span><br><span class="line">            <span class="keyword">if</span> (requestMethod === <span class="string">'GET'</span>) &#123;</span><br><span class="line">                <span class="comment">//如果是同一个域名下的资源，则直接构建目录，下载文件</span></span><br><span class="line">                <span class="comment">//创建路径的方式依据请求本身path结构，保证和原资源网站目录结构完整统一，这样即使有CMD、AMD规范的代码再次执行，require相对路径也不会出现问题。</span></span><br><span class="line">                <span class="keyword">let</span> dirPathCreatedIfNotExists,</span><br><span class="line">                    filePathCreatedIfNotExists;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">let</span> hostname = urlObj.hostname;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (isSameOrigin) &#123;</span><br><span class="line">                    <span class="comment">//构建同域名path</span></span><br><span class="line">                    <span class="comment">//同域名的资源 有时会以//www.xxx.com/images/logo.png 这种方式使用，所以，对这种资源需要特殊处理</span></span><br><span class="line">                    thirdPartyList[<span class="string">`//<span class="subst">$&#123;hostname&#125;</span>`</span>] = <span class="string">''</span>;</span><br><span class="line">                    dirPathCreatedIfNotExists = path.join(BASEDIR, md5_prefix, dirPath);</span><br><span class="line">                    filePathCreatedIfNotExists = path.join(BASEDIR, md5_prefix, filePath);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//第三方资源构建正则表达式，替换http、https、// 三种模式路径为本地目录路径</span></span><br><span class="line">                    thirdPartyList[<span class="string">`(https?:)?//<span class="subst">$&#123;hostname&#125;</span>`</span>] = <span class="string">`/<span class="subst">$&#123;hostname&#125;</span>`</span>;</span><br><span class="line">                    dirPathCreatedIfNotExists = path.join(BASEDIR, md5_prefix, hostname, dirPath);</span><br><span class="line">                    filePathCreatedIfNotExists = path.join(BASEDIR, md5_prefix, hostname, filePath);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//获取扩展名 如果获取不到 则认为不是资源文件</span></span><br><span class="line">                <span class="keyword">if</span> (path.extname(filePathCreatedIfNotExists)) &#123;</span><br><span class="line">                    <span class="comment">//路径不存在，直接创建多级目录</span></span><br><span class="line">                    <span class="keyword">if</span> (!fs.existsSync(dirPathCreatedIfNotExists)) &#123;</span><br><span class="line">                        shell.exec(<span class="string">`mkdir -p <span class="subst">$&#123;dirPathCreatedIfNotExists&#125;</span>`</span>);</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">'create dir'</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (res.ok()) &#123;</span><br><span class="line">                        <span class="keyword">if</span> ((isSameOrigin &amp;&amp; dirPath != <span class="string">'/'</span>) || !isSameOrigin) &#123;</span><br><span class="line">                            <span class="keyword">let</span> needReplace = [<span class="string">'stylesheet'</span>, <span class="string">'script'</span>];</span><br><span class="line">                            <span class="comment">//@fixme toString 可能会有编码问题</span></span><br><span class="line">                            <span class="keyword">let</span> fileContent = (<span class="keyword">await</span> res.buffer()).toString();</span><br><span class="line">                            <span class="comment">//第三方域名还获取，先缓存再处理</span></span><br><span class="line">                            <span class="keyword">if</span> (needReplace.includes(request.resourceType())) &#123;</span><br><span class="line">                                <span class="comment">//js css 文件中可能包含需要替换的内容，需要处理</span></span><br><span class="line">                                <span class="comment">//所以暂时缓存不写入文件</span></span><br><span class="line">                                resourceBufferMap.set(filePathCreatedIfNotExists, fileContent);</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">                                fs.writeFileSync(filePathCreatedIfNotExists, <span class="keyword">await</span> res.buffer());</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">await</span> page.goto(url, &#123;</span><br><span class="line">            waitUntil: <span class="string">'networkidle0'</span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> content = <span class="keyword">await</span> page.content();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//对css javascript文件 进行替换处理</span></span><br><span class="line">        resourceBufferMap.forEach(<span class="function">(<span class="params">value, key</span>) =&gt;</span> &#123;</span><br><span class="line">            value = applyReplace(value, thirdPartyList);</span><br><span class="line">            fs.writeFileSync(key, value);</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// html 内容处理</span></span><br><span class="line">        content = applyReplace(content, thirdPartyList);</span><br><span class="line"></span><br><span class="line">        fs.writeFileSync(<span class="string">`./asserts/<span class="subst">$&#123;md5_prefix&#125;</span>/index.html`</span>, content);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">await</span> page.close();</span><br><span class="line">        <span class="keyword">await</span> browser.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(error);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">applyReplace</span>(<span class="params">origin, regList</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> prop <span class="keyword">in</span> regList) &#123;</span><br><span class="line">        <span class="comment">//进行正则全局替换</span></span><br><span class="line">        <span class="keyword">let</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(prop, <span class="string">'g'</span>)</span><br><span class="line">        origin = origin.replace(reg, regList[prop]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> origin;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">start();</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上述方案能解决几乎所有原始方案无法解决的问题，但是也并非十全十美，首选，相比原始方案，增加了渲染的步骤，所以性能有所下降；其次如果用户网站比较特殊，比如<a href="https://www.xxx.com/admin" target="_blank" rel="noopener">https://www.xxx.com/admin</a> 这个路径下资源，比如某css文件中有如下写法：’background:url(‘./xxx.bg.png’)’ ，这时路径会找不到，因为在资源路径替换阶段，会替换为hostname，即查找资源是会去根目录去找，导致路径not found，不过这有其它改进的方案，比如可以把同域名的路径做的更灵活一点，可以让接口消费者修改。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;如何抓取页面所有内容&quot;&gt;&lt;a href=&quot;#如何抓取页面所有内容&quot; class=&quot;headerlink&quot; title=&quot;如何抓取页面所有内容&quot;&gt;&lt;/a&gt;如何抓取页面所有内容&lt;/h1&gt;&lt;h2 id=&quot;基本需求&quot;&gt;&lt;a href=&quot;#基本需求&quot; class=&quot;head
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue全局插件</title>
    <link href="http://douzhiwei.top/2018/04/06/vue%E5%85%A8%E5%B1%80%E6%8F%92%E4%BB%B6/"/>
    <id>http://douzhiwei.top/2018/04/06/vue全局插件/</id>
    <published>2018-04-06T14:02:37.000Z</published>
    <updated>2018-05-18T07:37:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近一直在写小程序,有点思念vue了,写个组件玩一玩<br>有这样的一个需求,一个常用的组件,我们希望像jq一样调用方法就能够执行而不是每个页面都通过注册components,每个页面注册components不仅不方便也不美观,自己上代码了,把分析写到代码注释里</p><h3 id="index-js-插件的入口"><a href="#index-js-插件的入口" class="headerlink" title="index.js 插件的入口"></a>index.js 插件的入口</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vue文件</span></span><br><span class="line"><span class="keyword">import</span> Notification <span class="keyword">from</span> <span class="string">'./notification.vue'</span></span><br><span class="line"><span class="comment">// 需要暴露出去的方法 也就是我们调用组件的方法</span></span><br><span class="line"><span class="keyword">import</span> notify <span class="keyword">from</span> <span class="string">'./function'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (Vue) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 注册组件</span></span><br><span class="line">  Vue.component(Notification.name, Notification)</span><br><span class="line">  <span class="comment">// 把notifi方法挂到vue的实例</span></span><br><span class="line">  Vue.prototype.$notify = notify</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="notification-vue"><a href="#notification-vue" class="headerlink" title="notification.vue"></a>notification.vue</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">"fade"</span> @<span class="attr">after-leave</span>=<span class="string">"afterLeave"</span> @<span class="attr">after-enter</span>=<span class="string">"afterEnter"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"notification"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:style</span>=<span class="string">"style"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-show</span>=<span class="string">"visible"</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">mouseenter</span>=<span class="string">"clearTimer"</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">mouseleave</span>=<span class="string">"createTimer"</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span>&#123;&#123;content&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn"</span> @<span class="attr">click</span>=<span class="string">"handleClose"</span>&gt;</span>&#123;&#123;btn&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="comment">// 注意这个name 后面用extend的时候会用</span></span></span><br><span class="line"><span class="javascript">  name: <span class="string">'Notification'</span>,</span></span><br><span class="line"><span class="javascript">  <span class="comment">// props </span></span></span><br><span class="line"><span class="undefined">  props: &#123;</span></span><br><span class="line"><span class="undefined">    content: &#123;</span></span><br><span class="line"><span class="javascript">      type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">      required: <span class="literal">true</span></span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    btn: &#123;</span></span><br><span class="line"><span class="javascript">      type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="string">'关闭'</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      visible: <span class="literal">true</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  computed: &#123;</span></span><br><span class="line"><span class="undefined">    style () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;&#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 这个模板文件 很干净 什么都没有 业务不在这处理 实现解耦</span></span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="undefined">    handleClose (e) &#123;</span></span><br><span class="line"><span class="undefined">      e.preventDefault()</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.$emit(<span class="string">'close'</span>)</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    afterLeave () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.$emit(<span class="string">'closed'</span>)</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    afterEnter () &#123;&#125;,</span></span><br><span class="line"><span class="undefined">    clearTimer () &#123;&#125;,</span></span><br><span class="line"><span class="undefined">    createTimer () &#123;&#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>  <span class="attr">scoped</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">.notification &#123;</span></span><br><span class="line"><span class="undefined">  display: inline-flex;</span></span><br><span class="line"><span class="undefined">  background-color: #303030;</span></span><br><span class="line"><span class="undefined">  color: rgba(255, 255, 255, 1);</span></span><br><span class="line"><span class="undefined">  align-items: center;</span></span><br><span class="line"><span class="undefined">  padding: 20px;</span></span><br><span class="line"><span class="undefined">  min-width: 280px;</span></span><br><span class="line"><span class="undefined">  box-shadow: 0px 3px 5px -1px rgba(0, 0, 0, 0.2), 0px 6px 10px 0px rgba(0, 0, 0, 0.14), 0px 1px 18px 0px rgba(0, 0, 0, 0.12);</span></span><br><span class="line"><span class="undefined">  flex-wrap: wrap;</span></span><br><span class="line"><span class="undefined">  transition: all .3s;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">.content &#123;</span></span><br><span class="line"><span class="undefined">  padding: 0</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">.btn &#123;</span></span><br><span class="line"><span class="undefined">  color: #ff4081;</span></span><br><span class="line"><span class="undefined">  padding-left: 24px;</span></span><br><span class="line"><span class="undefined">  margin-left: auto;</span></span><br><span class="line"><span class="undefined">  cursor: pointer;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="func-notification-js"><a href="#func-notification-js" class="headerlink" title="func-notification.js"></a>func-notification.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Notification <span class="keyword">from</span> <span class="string">'./notification.vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// 这个使用vue.extends 继承 上面name为Notification的实例</span></span><br><span class="line">  extends: Notification,</span><br><span class="line">  computed: &#123;</span><br><span class="line">  <span class="comment">// 计算style</span></span><br><span class="line">    style () &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        position: <span class="string">'fixed'</span>,</span><br><span class="line">        right: <span class="string">'20px'</span>,</span><br><span class="line">        bottom: <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.verticalOffset&#125;</span>px`</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted () &#123;</span><br><span class="line">    <span class="keyword">this</span>.createTimer()</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">  <span class="comment">// 自动关闭 弹出</span></span><br><span class="line">    createTimer () &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.autoClose)</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.autoClose) &#123;</span><br><span class="line">        <span class="keyword">this</span>.timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">this</span>.visible = <span class="literal">false</span></span><br><span class="line">        &#125;, <span class="keyword">this</span>.autoClose)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 清楚 timer 释放内存</span></span><br><span class="line">    clearTimer () &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.timer) &#123;</span><br><span class="line">        clearTimeout(<span class="keyword">this</span>.timer)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// transition的 处理函数</span></span><br><span class="line">    afterEnter () &#123;</span><br><span class="line">      <span class="keyword">this</span>.height = <span class="keyword">this</span>.$el.offsetHeight</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeDestory () &#123;</span><br><span class="line">    <span class="keyword">this</span>.clearTimer()</span><br><span class="line">  &#125;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      verticalOffset: <span class="number">0</span>,</span><br><span class="line">      autoClose: <span class="number">3000</span>,</span><br><span class="line">      height: <span class="number">0</span>,</span><br><span class="line">      visible: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="func-notification-js-逻辑处理"><a href="#func-notification-js-逻辑处理" class="headerlink" title="func-notification.js 逻辑处理"></a>func-notification.js 逻辑处理</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Component <span class="keyword">from</span> <span class="string">'./func-notification'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> NotificationConstructor = Vue.extend(Component)</span><br><span class="line"><span class="comment">// 保存实例对象 因为有多个 提示的框框</span></span><br><span class="line"><span class="keyword">const</span> instances = []</span><br><span class="line"><span class="keyword">let</span> seed = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除实例 </span></span><br><span class="line"><span class="keyword">const</span> removeInstance = <span class="function">(<span class="params">instance</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!instance) <span class="keyword">return</span></span><br><span class="line">  <span class="keyword">const</span> len = instances.length</span><br><span class="line">  <span class="keyword">const</span> index = instances.findIndex(<span class="function"><span class="params">inst</span> =&gt;</span> instance.id === inst.id)</span><br><span class="line"></span><br><span class="line">  instances.splice(index, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (len &lt;= <span class="number">1</span>) <span class="keyword">return</span></span><br><span class="line">  <span class="keyword">const</span> removeHeight = instance.vm.height</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = index; i &lt; len - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    instances[i].verticalOffset =</span><br><span class="line">      <span class="built_in">parseInt</span>(instances[i].verticalOffset) - removeHeight - <span class="number">16</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> notify = <span class="function">(<span class="params">options</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;</span><br><span class="line">    autoClose,</span><br><span class="line">    ...rest</span><br><span class="line">  &#125; = options</span><br><span class="line">  <span class="keyword">const</span> instance = <span class="keyword">new</span> NotificationConstructor(&#123;</span><br><span class="line">    propsData: &#123;</span><br><span class="line">      ...rest</span><br><span class="line">    &#125;,</span><br><span class="line">    data: &#123;</span><br><span class="line">      autoClose: autoClose === <span class="literal">undefined</span> ? <span class="number">3000</span> : autoClose</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> id = <span class="string">`notification_<span class="subst">$&#123;seed++&#125;</span>`</span></span><br><span class="line">  instance.id = id</span><br><span class="line">  instance.vm = instance.$mount()</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(instance.vm.$el)</span><br><span class="line">  instance.vm.visible = <span class="literal">true</span></span><br><span class="line">   <span class="comment">// 其实都很好理解 可能就是以前你没有这样写过</span></span><br><span class="line">  <span class="keyword">let</span> verticalOffset = <span class="number">0</span></span><br><span class="line">  instances.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    verticalOffset += item.$el.offsetHeight + <span class="number">16</span></span><br><span class="line">  &#125;)</span><br><span class="line">  verticalOffset += <span class="number">16</span></span><br><span class="line">  instance.verticalOffset = verticalOffset</span><br><span class="line">  instances.push(instance)</span><br><span class="line">  instance.vm.$on(<span class="string">'closed'</span>, () =&gt; &#123;</span><br><span class="line">    removeInstance(instance)</span><br><span class="line">    <span class="built_in">document</span>.body.removeChild(instance.vm.$el)</span><br><span class="line">    instance.vm.$destroy()</span><br><span class="line">  &#125;)</span><br><span class="line">  instance.vm.$on(<span class="string">'close'</span>, () =&gt; &#123;</span><br><span class="line">    instance.vm.visible = <span class="literal">false</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> instance.vm</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> notify</span><br></pre></td></tr></table></figure><h3 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">notify () &#123;</span><br><span class="line">              <span class="keyword">this</span>.$notify(&#123;</span><br><span class="line">                  content: <span class="string">`按钮名字<span class="subst">$&#123;<span class="built_in">Math</span>.random().toString(<span class="number">36</span>).slice(<span class="number">2</span>, <span class="number">6</span>)&#125;</span>`</span>,</span><br><span class="line">                  btn: <span class="string">'关闭'</span></span><br><span class="line">              &#125;)</span><br><span class="line">          &#125;</span><br></pre></td></tr></table></figure><p><strong>代码请点这里</strong><br><a href="https://github.com/douzhiwei/notification-vue.git" target="_blank" rel="noopener">演示以及代码</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近一直在写小程序,有点思念vue了,写个组件玩一玩&lt;br&gt;有这样的一个需求,一个常用的组件,我们希望像jq一样调用方法就能够执行而不是每个页面都通过注册components,每个页面注册components不仅不方便也不美观,自己上代码了,把分析写到代码注释里&lt;/p&gt;
&lt;h3 id=&quot;index-js-插件的入口&quot;&gt;&lt;a href=&quot;#index-js-插件的入口&quot; class=&quot;headerlink&quot; title=&quot;index.js 插件的入口&quot;&gt;&lt;/a&gt;index.js 插件的入口&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// vue文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Notification &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;./notification.vue&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 需要暴露出去的方法 也就是我们调用组件的方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; notify &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;./function&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; (Vue) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 注册组件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Vue.component(Notification.name, Notification)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 把notifi方法挂到vue的实例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Vue.prototype.$notify = notify&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Vue" scheme="http://douzhiwei.top/categories/Vue/"/>
    
    
      <category term="vue" scheme="http://douzhiwei.top/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>js面向对象-继承</title>
    <link href="http://douzhiwei.top/2018/04/03/js%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E7%BB%A7%E6%89%BF/"/>
    <id>http://douzhiwei.top/2018/04/03/js面向对象-继承/</id>
    <published>2018-04-03T04:05:41.000Z</published>
    <updated>2018-05-18T08:11:08.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="原型继承"><a href="#原型继承" class="headerlink" title="原型继承"></a>原型继承</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.sayHello = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"使用原型得到Name："</span> + <span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> per = <span class="keyword">new</span> Person(<span class="string">"张三"</span>, <span class="number">21</span>)</span><br><span class="line">per.sayHello() <span class="comment">//输出：使用原型得到Name:占山  </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Student.prototype = <span class="keyword">new</span> Person(<span class="string">"李四"</span>, <span class="number">21</span>) <span class="comment">//原型继承</span></span><br><span class="line"><span class="keyword">let</span> stu = <span class="keyword">new</span> Student()</span><br><span class="line">Student.prototype.grade = <span class="number">5</span></span><br><span class="line">Student.prototype.intr = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.grade)</span><br><span class="line">&#125;</span><br><span class="line">stu.sayHello() <span class="comment">//输出：李四  </span></span><br><span class="line">stu.intr() <span class="comment">//输出：5</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="构造方法继承"><a href="#构造方法继承" class="headerlink" title="构造方法继承"></a>构造方法继承</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.sayParent = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">"Parent:"</span> + <span class="keyword">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.tempMethod = Parent <span class="comment">//构造继承  </span></span><br><span class="line">    <span class="keyword">this</span>.tempMethod(name)</span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">    <span class="keyword">this</span>.sayChild = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Child:"</span> + <span class="keyword">this</span>.name + <span class="string">"age:"</span> + <span class="keyword">this</span>.age)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> parent = <span class="keyword">new</span> Parent(<span class="string">"张三"</span>)</span><br><span class="line">parent.sayParent()</span><br><span class="line"><span class="keyword">var</span> child = <span class="keyword">new</span> Child(<span class="string">"李四"</span>, <span class="number">24</span>)</span><br><span class="line">child.sayChild()</span><br></pre></td></tr></table></figure><h4 id="call-apply-继承"><a href="#call-apply-继承" class="headerlink" title="call apply 继承"></a>call apply 继承</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//call方式  </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">student</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    Person.call(<span class="keyword">this</span>, name, age)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//apply方式  </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">teacher</span>(<span class="params">name, love</span>) </span>&#123;</span><br><span class="line">    Person.apply(<span class="keyword">this</span>, [name, love])</span><br><span class="line">    <span class="comment">//Person.apply(this,arguments) //跟上句一样的效果，arguments  </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> per = <span class="keyword">new</span> Person(<span class="string">"张三"</span>, <span class="number">25</span>, <span class="string">"李四"</span>)   </span><br><span class="line">per.say()</span><br><span class="line"><span class="keyword">var</span> stu = <span class="keyword">new</span> student(<span class="string">"王武"</span>, <span class="number">18</span>)   </span><br><span class="line">stu.say()</span><br><span class="line"><span class="keyword">var</span> tea = <span class="keyword">new</span> teacher(<span class="string">"赵六"</span>, <span class="number">16</span>)  </span><br><span class="line">tea.say()</span><br></pre></td></tr></table></figure><h4 id="Class的继承"><a href="#Class的继承" class="headerlink" title="Class的继承"></a>Class的继承</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">  p() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 通过extends关键字</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">super</span>.p()); <span class="comment">// 2</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> B();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;原型继承&quot;&gt;&lt;a href=&quot;#原型继承&quot; class=&quot;headerlink&quot; title=&quot;原型继承&quot;&gt;&lt;/a&gt;原型继承&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name, age&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.age = age&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Person.prototype.sayHello = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;使用原型得到Name：&quot;&lt;/span&gt; + &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; per = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person(&lt;span class=&quot;string&quot;&gt;&quot;张三&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;21&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;per.sayHello() &lt;span class=&quot;comment&quot;&gt;//输出：使用原型得到Name:占山  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Student&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Student.prototype = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person(&lt;span class=&quot;string&quot;&gt;&quot;李四&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;21&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;//原型继承&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; stu = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Student()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Student.prototype.grade = &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Student.prototype.intr = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.grade)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;stu.sayHello() &lt;span class=&quot;comment&quot;&gt;//输出：李四  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;stu.intr() &lt;span class=&quot;comment&quot;&gt;//输出：5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="“面向对象”" scheme="http://douzhiwei.top/categories/%E2%80%9C%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E2%80%9D/"/>
    
    
      <category term="继承" scheme="http://douzhiwei.top/tags/%E7%BB%A7%E6%89%BF/"/>
    
  </entry>
  
  <entry>
    <title>js面向对象-常用的设计模式</title>
    <link href="http://douzhiwei.top/2018/04/01/js%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E5%B8%B8%E7%94%A8%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://douzhiwei.top/2018/04/01/js面向对象-常用的设计模式/</id>
    <published>2018-04-01T14:33:38.000Z</published>
    <updated>2018-05-18T07:38:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>上面的小游戏采用面向对象开发,这回忆一下几种生产对象的模式</p><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createObject</span>(<span class="params">name, age</span>)   </span>&#123;  </span><br><span class="line">  <span class="comment">//集中实例化的函数   </span></span><br><span class="line">  <span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>()   </span><br><span class="line">  obj.name = name  </span><br><span class="line">  obj.age = age   </span><br><span class="line">  obj.run = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  </span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.name + <span class="keyword">this</span>.age + <span class="string">'运行中...'</span>  </span><br><span class="line">  &#125;;  </span><br><span class="line">  <span class="keyword">return</span> obj;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">let</span> box1 = createObject(<span class="string">'Lee'</span>, <span class="number">100</span>)    <span class="comment">//第一个实例  </span></span><br><span class="line"><span class="keyword">let</span> box2 = createObject(<span class="string">'Jack'</span>, <span class="number">200</span>)   <span class="comment">//第二个实例  </span></span><br><span class="line"><span class="built_in">console</span>.log(box1.run())  </span><br><span class="line"><span class="built_in">console</span>.log(box2.run())  <span class="comment">//保持独立</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CPerson</span>(<span class="params">name,sex,age</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//注意这里 构造函数首字母大写</span></span><br><span class="line"> <span class="keyword">this</span>.name = name</span><br><span class="line"> <span class="keyword">this</span>.sex = sex</span><br><span class="line"> <span class="keyword">this</span>.age = age</span><br><span class="line"> <span class="keyword">this</span>.show = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="keyword">this</span>.name, <span class="keyword">this</span>.age, <span class="keyword">this</span>.sex)</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> CPerson(<span class="string">'zhangsan'</span>,<span class="string">'男'</span>,<span class="string">'100'</span>)</span><br><span class="line"> p1.show()</span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> CPerson(<span class="string">'lisi'</span>,<span class="string">'女'</span>,<span class="string">'14'</span>)</span><br><span class="line"> p2.show()</span><br></pre></td></tr></table></figure><h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">Car.prototype.color = <span class="string">"red"</span></span><br><span class="line">Car.prototype.doors = <span class="number">4</span></span><br><span class="line">Car.prototype.showColor = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">alert(<span class="keyword">this</span>.color)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> car1 = <span class="keyword">new</span> Car()</span><br><span class="line"><span class="built_in">console</span>.log(car1.doors)</span><br><span class="line"><span class="keyword">let</span> car2 = <span class="keyword">new</span> Car()</span><br><span class="line">car1.showColor()</span><br></pre></td></tr></table></figure><h3 id="混合模式"><a href="#混合模式" class="headerlink" title="混合模式"></a>混合模式</h3><p>混合模式只能是 构造方法和原型模式混合</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Blog</span>(<span class="params">name, url, friend </span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.name = name</span><br><span class="line">      <span class="keyword">this</span>.url = url</span><br><span class="line">      <span class="keyword">this</span>.friend = friend</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"> Blog.prototype.alertInfo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">'名字:'</span>+<span class="keyword">this</span>.name + <span class="string">' 空间:'</span> + <span class="keyword">this</span>.url + <span class="string">'好友:'</span> +  <span class="keyword">this</span>.friend)</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">let</span> blog = <span class="keyword">new</span> Blog(<span class="string">"zhangsan"</span>,<span class="string">"http://www.baidu.com/"</span>,[<span class="string">"aaa"</span>, <span class="string">"bbb"</span>,<span class="string">"ccc"</span>, <span class="string">"ddd"</span>])</span><br><span class="line"> <span class="keyword">var</span> blog2 = <span class="keyword">new</span> Blog(<span class="string">"lisi"</span>,<span class="string">"http://www.sina.com/"</span>,[<span class="string">"aaa"</span>, <span class="string">"bbb"</span>,<span class="string">"ccc"</span>, <span class="string">"ddd"</span>])</span><br><span class="line">  blog.alertInfo()</span><br><span class="line">  blog2.alertInfo()</span><br></pre></td></tr></table></figure><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Minister</span>(<span class="params">name</span>) </span>&#123; <span class="comment">// 大臣</span></span><br><span class="line"><span class="keyword">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line">Minister.prototype.say = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">'：大王，冤枉啊！'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> Emperor = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> instance = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Emperor</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (instance) &#123;</span><br><span class="line"><span class="keyword">return</span> instance</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.name = <span class="string">'大王'</span></span><br><span class="line"><span class="keyword">this</span>.id = <span class="built_in">Math</span>.random()</span><br><span class="line"><span class="keyword">return</span> instance = <span class="keyword">this</span></span><br><span class="line">&#125;</span><br><span class="line">Emperor.prototype.say = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="keyword">this</span>.id + <span class="string">'：滚……'</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> Emperor</span><br><span class="line">&#125;)()</span><br><span class="line"><span class="keyword">var</span> minister1 = <span class="keyword">new</span> Minister(<span class="string">'张三'</span>)</span><br><span class="line"><span class="keyword">var</span> emperor1 = <span class="keyword">new</span> Emperor()</span><br><span class="line"><span class="keyword">var</span> minister2 = <span class="keyword">new</span> Minister(<span class="string">'李四'</span>)</span><br><span class="line"><span class="keyword">var</span> emperor2 = <span class="keyword">new</span> Emperor()</span><br><span class="line"><span class="keyword">var</span> minister3 = <span class="keyword">new</span> Minister(<span class="string">'王二麻子'</span>)</span><br><span class="line"><span class="keyword">var</span> emperor3 = <span class="keyword">new</span> Emperor()</span><br><span class="line">minister1.say()</span><br><span class="line">emperor1.say()</span><br><span class="line">minister2.say()</span><br><span class="line">emperor2.say()</span><br><span class="line">minister3.say()</span><br><span class="line">emperor3.say()</span><br><span class="line"></span><br><span class="line"><span class="comment">// es6的单例模式更简单</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Minister</span> </span>&#123;</span><br><span class="line"><span class="comment">// 直接定义一个静态方法 返回这个类的实例 跟上面的本质是一样的</span></span><br><span class="line">    <span class="keyword">static</span> getInstance() &#123;</span><br><span class="line">        <span class="keyword">if</span> (!Minister.instance) &#123;</span><br><span class="line">            Minister.instance = <span class="keyword">new</span> Minister()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Minister.instance</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上面的小游戏采用面向对象开发,这回忆一下几种生产对象的模式&lt;/p&gt;
&lt;h3 id=&quot;工厂模式&quot;&gt;&lt;a href=&quot;#工厂模式&quot; class=&quot;headerlink&quot; title=&quot;工厂模式&quot;&gt;&lt;/a&gt;工厂模式&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;createObject&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name, age&lt;/span&gt;)   &lt;/span&gt;&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//集中实例化的函数   &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;()   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  obj.name = name  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  obj.age = age   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  obj.run = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name + &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.age + &lt;span class=&quot;string&quot;&gt;&#39;运行中...&#39;&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; obj;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; box1 = createObject(&lt;span class=&quot;string&quot;&gt;&#39;Lee&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;)    &lt;span class=&quot;comment&quot;&gt;//第一个实例  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; box2 = createObject(&lt;span class=&quot;string&quot;&gt;&#39;Jack&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;)   &lt;span class=&quot;comment&quot;&gt;//第二个实例  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(box1.run())  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(box2.run())  &lt;span class=&quot;comment&quot;&gt;//保持独立&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="“面向对象”" scheme="http://douzhiwei.top/categories/%E2%80%9C%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E2%80%9D/"/>
    
    
      <category term="生产对象的模式" scheme="http://douzhiwei.top/tags/%E7%94%9F%E4%BA%A7%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>微信小游戏尝鲜~</title>
    <link href="http://douzhiwei.top/2018/03/29/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E6%B8%B8%E6%88%8F%E5%B0%9D%E9%B2%9C/"/>
    <id>http://douzhiwei.top/2018/03/29/微信小游戏尝鲜/</id>
    <published>2018-03-29T12:49:45.000Z</published>
    <updated>2018-05-18T08:10:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>今年年初的时候微信出了小游戏,最近很感兴趣,来研究一下<br>说到游戏,必然要说到游戏的设计模式,以下是我在网上学习和自己的见解,不一定完整或者正确,只是一个思路</p><ul><li><p><code>Director.js</code>游戏的导演,这控制所有的游戏行为</p></li><li><p><code>DataStore.js</code>游戏的数据池,用来读取和写入存储数据</p></li><li><p><code>ResourceLoader.js</code>游戏的资源加载器,作用是在游戏逻辑运行之前,加载所有的资源,这个其实很重要,后面详细说</p></li><li><p><code>Resources.js</code>游戏的资源的数据集合,供<code>ResourceLoader.js</code>使用</p></li><li><p><code>Sprite.js</code>游戏的精灵类,wx里面在不用游戏库的时候其实就是canvas,这里就开始使用面向对象了</p></li></ul><p>接下来,逐一看一下</p><a id="more"></a><p>###Director.js</p><p>导演类，控制游戏的逻辑</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;DataStore&#125; <span class="keyword">from</span> <span class="string">"./base/DataStore.js"</span></span><br><span class="line"><span class="keyword">import</span> &#123;UpPencil&#125; <span class="keyword">from</span> <span class="string">"./runtime/UpPencil.js"</span></span><br><span class="line"><span class="keyword">import</span> &#123;DownPencil&#125; <span class="keyword">from</span> <span class="string">"./runtime/DownPencil.js"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Director</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里使用静态方法 单例模式,保证游戏只有一个导演</span></span><br><span class="line">    <span class="keyword">static</span> getInstance() &#123;</span><br><span class="line">        <span class="keyword">if</span> (!Director.instance) &#123;</span><br><span class="line">            Director.instance = <span class="keyword">new</span> Director()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Director.instance</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="comment">// 构造器  获取数据池的单例对象</span></span><br><span class="line">        <span class="keyword">this</span>.dataStore = DataStore.getInstance()</span><br><span class="line">        <span class="keyword">this</span>.moveSpeed = <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    createPencil() &#123;</span><br><span class="line">        <span class="comment">// 这里 创建 水管 /8 /2 是试出来的</span></span><br><span class="line">        <span class="keyword">const</span> minTop = DataStore.getInstance().canvas.height / <span class="number">8</span></span><br><span class="line">        <span class="keyword">const</span> maxTop = DataStore.getInstance().canvas.height / <span class="number">2</span></span><br><span class="line">        <span class="keyword">const</span> top = minTop + <span class="built_in">Math</span>.random() * (maxTop - minTop)</span><br><span class="line">        <span class="keyword">this</span>.dataStore.get(<span class="string">'pencils'</span>).push(<span class="keyword">new</span> UpPencil(top))</span><br><span class="line">        <span class="keyword">this</span>.dataStore.get(<span class="string">'pencils'</span>).push(<span class="keyword">new</span> DownPencil(top))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    birdsEvent() &#123;</span><br><span class="line">        <span class="comment">// 点击小鸟的事件</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">this</span>.dataStore.get(<span class="string">'birds'</span>).y[i] =</span><br><span class="line">                <span class="keyword">this</span>.dataStore.get(<span class="string">'birds'</span>).birdsY[i]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.dataStore.get(<span class="string">'birds'</span>).time = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断小鸟是否和铅笔撞击</span></span><br><span class="line">    <span class="keyword">static</span> isStrike(bird, pencil) &#123;</span><br><span class="line">        <span class="keyword">let</span> s = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (bird.top &gt; pencil.bottom ||</span><br><span class="line">            bird.bottom &lt; pencil.top ||</span><br><span class="line">            bird.right &lt; pencil.left ||</span><br><span class="line">            bird.left &gt; pencil.right</span><br><span class="line">        ) &#123;</span><br><span class="line">            s = <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> !s</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断小鸟是否撞击地板和铅笔</span></span><br><span class="line">    check() &#123;</span><br><span class="line">        <span class="keyword">const</span> birds = <span class="keyword">this</span>.dataStore.get(<span class="string">'birds'</span>)</span><br><span class="line">        <span class="keyword">const</span> land = <span class="keyword">this</span>.dataStore.get(<span class="string">'land'</span>)</span><br><span class="line">        <span class="keyword">const</span> pencils = <span class="keyword">this</span>.dataStore.get(<span class="string">'pencils'</span>)</span><br><span class="line">        <span class="keyword">const</span> score = <span class="keyword">this</span>.dataStore.get(<span class="string">'score'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">//地板的撞击判断</span></span><br><span class="line">        <span class="keyword">if</span> (birds.birdsY[<span class="number">0</span>] + birds.birdsHeight[<span class="number">0</span>] &gt;= land.y) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'撞击地板啦'</span>)</span><br><span class="line">            <span class="keyword">this</span>.isGameOver = <span class="literal">true</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//小鸟的边框模型</span></span><br><span class="line">        <span class="keyword">const</span> birdsBorder = &#123;</span><br><span class="line">            top: birds.y[<span class="number">0</span>],</span><br><span class="line">            bottom: birds.birdsY[<span class="number">0</span>] + birds.birdsHeight[<span class="number">0</span>],</span><br><span class="line">            left: birds.birdsX[<span class="number">0</span>],</span><br><span class="line">            right: birds.birdsX[<span class="number">0</span>] + birds.birdsWidth[<span class="number">0</span>]</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> length = pencils.length</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="keyword">const</span> pencil = pencils[i]</span><br><span class="line">            <span class="keyword">const</span> pencilBorder = &#123;</span><br><span class="line">                top: pencil.y,</span><br><span class="line">                bottom: pencil.y + pencil.height,</span><br><span class="line">                left: pencil.x,</span><br><span class="line">                right: pencil.x + pencil.width</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (Director.isStrike(birdsBorder, pencilBorder)) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'撞到水管啦'</span>)</span><br><span class="line">                <span class="keyword">this</span>.isGameOver = <span class="literal">true</span></span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//加分逻辑</span></span><br><span class="line">        <span class="keyword">if</span> (birds.birdsX[<span class="number">0</span>] &gt; pencils[<span class="number">0</span>].x + pencils[<span class="number">0</span>].width</span><br><span class="line">            &amp;&amp; score.isScore) &#123;</span><br><span class="line">            wx.vibrateShort(&#123;</span><br><span class="line">                success: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">'振动成功'</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            score.isScore = <span class="literal">false</span>;</span><br><span class="line">            score.scoreNumber++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    run() &#123;</span><br><span class="line">        <span class="keyword">this</span>.check()</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.isGameOver) &#123;</span><br><span class="line">            <span class="comment">// 如果游戏没结束 画地板</span></span><br><span class="line">            <span class="keyword">this</span>.dataStore.get(<span class="string">'background'</span>).draw()</span><br><span class="line">            <span class="comment">// 获取铅笔</span></span><br><span class="line">            <span class="keyword">const</span> pencils = <span class="keyword">this</span>.dataStore.get(<span class="string">'pencils'</span>)</span><br><span class="line">            <span class="keyword">if</span> (pencils[<span class="number">0</span>].x + pencils[<span class="number">0</span>].width &lt;= <span class="number">0</span> &amp;&amp;</span><br><span class="line">                pencils.length === <span class="number">4</span>) &#123;</span><br><span class="line">                pencils.shift()</span><br><span class="line">                pencils.shift()</span><br><span class="line">                <span class="keyword">this</span>.dataStore.get(<span class="string">'score'</span>).isScore = <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 创建 水管对象</span></span><br><span class="line">            <span class="keyword">if</span> (pencils[<span class="number">0</span>].x &lt;= (DataStore.getInstance().canvas.width - pencils[<span class="number">0</span>].width) / <span class="number">2</span> &amp;&amp;</span><br><span class="line">                pencils.length === <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.createPencil()</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 一个一个画 水管</span></span><br><span class="line">            <span class="keyword">this</span>.dataStore.get(<span class="string">'pencils'</span>).forEach(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">                value.draw()</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">// 画 地板</span></span><br><span class="line">            <span class="keyword">this</span>.dataStore.get(<span class="string">'land'</span>).draw()</span><br><span class="line">            <span class="comment">// 画 分数</span></span><br><span class="line">            <span class="keyword">this</span>.dataStore.get(<span class="string">'score'</span>).draw()</span><br><span class="line">            <span class="comment">// 画鸟</span></span><br><span class="line">            <span class="keyword">this</span>.dataStore.get(<span class="string">'birds'</span>).draw()</span><br><span class="line">            <span class="comment">// 动画帧</span></span><br><span class="line">            <span class="keyword">let</span> timer = requestAnimationFrame(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.run())</span><br><span class="line">            <span class="keyword">this</span>.dataStore.put(<span class="string">'timer'</span>, timer)</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 注意  这里的 画的对象是有先后顺序的 要先画 最底层的 canvas 是一层一层的渲染的</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'游戏结束'</span>)</span><br><span class="line">            <span class="comment">// 游戏结束 画 开始按钮</span></span><br><span class="line">            <span class="keyword">this</span>.dataStore.get(<span class="string">'startButton'</span>).draw()</span><br><span class="line">            <span class="comment">// 清除动画</span></span><br><span class="line">            <span class="comment">// 这里说一下 游戏的动画 千万不要使用settimeout 性能会很差 使用requestAnimationFrame 会根据系统的性能 自动的设置 时间间隔</span></span><br><span class="line">            cancelAnimationFrame(<span class="keyword">this</span>.dataStore.get(<span class="string">'timer'</span>))</span><br><span class="line">            <span class="comment">// 销毁数据池 释放内存</span></span><br><span class="line">            <span class="keyword">this</span>.dataStore.destroy()</span><br><span class="line">            <span class="comment">//触发微信小游戏垃圾回收</span></span><br><span class="line">            wx.triggerGC()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="DataStore-js"><a href="#DataStore-js" class="headerlink" title="DataStore.js"></a>DataStore.js</h3><p>变量缓存器，方便我们在不同的类中访问和修改变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">DataStore</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建单例模式 之前已经说过</span></span><br><span class="line">    <span class="keyword">static</span> getInstance() &#123;</span><br><span class="line">        <span class="keyword">if</span> (!DataStore.instance) &#123;</span><br><span class="line">            DataStore.instance = <span class="keyword">new</span> DataStore()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> DataStore.instance</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="comment">// 创建一个map 数据类型</span></span><br><span class="line">        <span class="keyword">this</span>.map = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    put(key, value) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">'function'</span>) &#123;</span><br><span class="line">            value = <span class="keyword">new</span> value()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.map.set(key, value)</span><br><span class="line">        <span class="comment">// 链式操作</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    get(key) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.map.get(key)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    destroy() &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> <span class="keyword">this</span>.map.values()) &#123;</span><br><span class="line">            value = <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ResourceLoader-js"><a href="#ResourceLoader-js" class="headerlink" title="ResourceLoader.js"></a>ResourceLoader.js</h3><p>资源文件加载器，确保canvas在图片资源加载完成后才进行渲染</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;Resources&#125; <span class="keyword">from</span> <span class="string">"./Resources.js"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ResourceLoader</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.map = <span class="keyword">new</span> <span class="built_in">Map</span>(Resources)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> <span class="keyword">this</span>.map) &#123;</span><br><span class="line">            <span class="keyword">const</span> image = wx.createImage()</span><br><span class="line">            image.src = value</span><br><span class="line">            <span class="keyword">this</span>.map.set(key, image)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    onLoaded(cb) &#123;</span><br><span class="line">        <span class="keyword">let</span> loadedCount = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> <span class="keyword">this</span>.map.values()) &#123;</span><br><span class="line">            value.onload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                loadedCount++</span><br><span class="line">                <span class="keyword">if</span> (loadedCount &gt;= <span class="keyword">this</span>.map.size) &#123;</span><br><span class="line">                    cb(<span class="keyword">this</span>.map)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> create() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResourceLoader()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Sprite-js"><a href="#Sprite-js" class="headerlink" title="Sprite.js"></a>Sprite.js</h3><p>精灵的基类，负责初始化精灵加载的资源和大小以及位置 ,就是canvas的draw方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;DataStore&#125; <span class="keyword">from</span> <span class="string">"./DataStore.js"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Sprite</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(img = null,</span><br><span class="line">                srcX = 0,</span><br><span class="line">                srcY = 0,</span><br><span class="line">                srcW = 0,</span><br><span class="line">                srcH = 0,</span><br><span class="line">                x = 0, y = 0,</span><br><span class="line">                width = 0, height = 0) &#123;</span><br><span class="line">        <span class="keyword">this</span>.dataStore = DataStore.getInstance()</span><br><span class="line">        <span class="keyword">this</span>.ctx = <span class="keyword">this</span>.dataStore.ctx</span><br><span class="line">        <span class="keyword">this</span>.img = img</span><br><span class="line">        <span class="keyword">this</span>.srcX = srcX</span><br><span class="line">        <span class="keyword">this</span>.srcY = srcY</span><br><span class="line">        <span class="keyword">this</span>.srcW = srcW</span><br><span class="line">        <span class="keyword">this</span>.srcH = srcH</span><br><span class="line">        <span class="keyword">this</span>.x = x</span><br><span class="line">        <span class="keyword">this</span>.y = y</span><br><span class="line">        <span class="keyword">this</span>.width = width</span><br><span class="line">        <span class="keyword">this</span>.height = height</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> getImage(key)&#123;</span><br><span class="line">        <span class="keyword">return</span> DataStore.getInstance().res.get(key)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * img 传入Image对象</span></span><br><span class="line"><span class="comment">     * srcX 要剪裁的起始X坐标</span></span><br><span class="line"><span class="comment">     * srcY 要剪裁的起始Y坐标</span></span><br><span class="line"><span class="comment">     * srcW 剪裁的宽度</span></span><br><span class="line"><span class="comment">     * srcH 剪裁的高度</span></span><br><span class="line"><span class="comment">     * x 放置的x坐标</span></span><br><span class="line"><span class="comment">     * y 放置的y坐标</span></span><br><span class="line"><span class="comment">     * width 要使用的宽度</span></span><br><span class="line"><span class="comment">     * height 要使用的高度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    draw(img = <span class="keyword">this</span>.img,</span><br><span class="line">         srcX = <span class="keyword">this</span>.srcX,</span><br><span class="line">         srcY = <span class="keyword">this</span>.srcY,</span><br><span class="line">         srcW = <span class="keyword">this</span>.srcW,</span><br><span class="line">         srcH = <span class="keyword">this</span>.srcH,</span><br><span class="line">         x = <span class="keyword">this</span>.x,</span><br><span class="line">         y = <span class="keyword">this</span>.y,</span><br><span class="line">         width = <span class="keyword">this</span>.width,</span><br><span class="line">         height = <span class="keyword">this</span>.height) &#123;</span><br><span class="line">        <span class="keyword">this</span>.ctx.drawImage(</span><br><span class="line">            img,</span><br><span class="line">            srcX,</span><br><span class="line">            srcY,</span><br><span class="line">            srcW,</span><br><span class="line">            srcH,</span><br><span class="line">            x,</span><br><span class="line">            y,</span><br><span class="line">            width,</span><br><span class="line">            height</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="再看一个Land-js-绘制地板的"><a href="#再看一个Land-js-绘制地板的" class="headerlink" title="再看一个Land.js,绘制地板的"></a>再看一个Land.js,绘制地板的</h3><p>这就是继承Sprite,然后根据相关的逻辑进行draw</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不断移动的陆地</span></span><br><span class="line"><span class="keyword">import</span> &#123;Sprite&#125; <span class="keyword">from</span> <span class="string">"../base/Sprite.js"</span></span><br><span class="line"><span class="keyword">import</span> &#123;Director&#125; <span class="keyword">from</span> <span class="string">"../Director.js"</span></span><br><span class="line"><span class="keyword">import</span> &#123;DataStore&#125; <span class="keyword">from</span> <span class="string">"../base/DataStore.js"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Land</span> <span class="keyword">extends</span> <span class="title">Sprite</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">const</span> image = Sprite.getImage(<span class="string">'land'</span>)</span><br><span class="line">        <span class="keyword">super</span>(image, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">            image.width, image.height,</span><br><span class="line">            <span class="number">0</span>, DataStore.getInstance().canvas.height - image.height,</span><br><span class="line">            image.width, image.height)</span><br><span class="line">        <span class="comment">//地板的水平变化坐标</span></span><br><span class="line">        <span class="keyword">this</span>.landX = <span class="number">0</span></span><br><span class="line">        <span class="comment">//地板的移动速度</span></span><br><span class="line">        <span class="keyword">this</span>.landSpeed = Director.getInstance().moveSpeed</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    draw() &#123;</span><br><span class="line">        <span class="keyword">this</span>.landX = <span class="keyword">this</span>.landX + <span class="keyword">this</span>.landSpeed</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.landX &gt; (<span class="keyword">this</span>.img.width - DataStore.getInstance().canvas.width)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.landX = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">super</span>.draw(<span class="keyword">this</span>.img,</span><br><span class="line">            <span class="keyword">this</span>.srcX,</span><br><span class="line">            <span class="keyword">this</span>.srcY,</span><br><span class="line">            <span class="keyword">this</span>.srcW,</span><br><span class="line">            <span class="keyword">this</span>.srcH,</span><br><span class="line">            -<span class="keyword">this</span>.landX,</span><br><span class="line">            <span class="keyword">this</span>.y,</span><br><span class="line">            <span class="keyword">this</span>.width,</span><br><span class="line">            <span class="keyword">this</span>.height)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最后看wx小游戏的入口文件"><a href="#最后看wx小游戏的入口文件" class="headerlink" title="最后看wx小游戏的入口文件"></a>最后看wx小游戏的入口文件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化整个游戏的精灵，作为游戏开始的入口</span></span><br><span class="line"><span class="keyword">import</span> &#123;ResourceLoader&#125; <span class="keyword">from</span> <span class="string">"./js/base/ResourceLoader.js"</span></span><br><span class="line"><span class="keyword">import</span> &#123;BackGround&#125; <span class="keyword">from</span> <span class="string">"./js/runtime/BackGround.js"</span></span><br><span class="line"><span class="keyword">import</span> &#123;DataStore&#125; <span class="keyword">from</span> <span class="string">"./js/base/DataStore.js"</span></span><br><span class="line"><span class="keyword">import</span> &#123;Director&#125; <span class="keyword">from</span> <span class="string">"./js/Director.js"</span></span><br><span class="line"><span class="keyword">import</span> &#123;Land&#125; <span class="keyword">from</span> <span class="string">"./js/runtime/Land.js"</span></span><br><span class="line"><span class="keyword">import</span> &#123;Birds&#125; <span class="keyword">from</span> <span class="string">"./js/player/Birds.js"</span></span><br><span class="line"><span class="keyword">import</span> &#123;StartButton&#125; <span class="keyword">from</span> <span class="string">"./js/player/StartButton.js"</span></span><br><span class="line"><span class="keyword">import</span> &#123;Score&#125; <span class="keyword">from</span> <span class="string">"./js/player/Score.js"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.canvas = wx.createCanvas()</span><br><span class="line">        <span class="keyword">this</span>.ctx = <span class="keyword">this</span>.canvas.getContext(<span class="string">'2d'</span>)</span><br><span class="line">        <span class="keyword">this</span>.dataStore = DataStore.getInstance()</span><br><span class="line">        <span class="keyword">this</span>.director = Director.getInstance()</span><br><span class="line">        <span class="keyword">const</span> loader = ResourceLoader.create()</span><br><span class="line">        loader.onLoaded(<span class="function"><span class="params">map</span> =&gt;</span> <span class="keyword">this</span>.onResourceFirstLoaded(map))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建背景音乐</span></span><br><span class="line">    createBackgroundMusic() &#123;</span><br><span class="line">        <span class="keyword">const</span> bgm = wx.createInnerAudioContext()</span><br><span class="line">        bgm.autoplay = <span class="literal">true</span></span><br><span class="line">        bgm.loop = <span class="literal">true</span></span><br><span class="line">        bgm.src = <span class="string">'audios/bgm.mp3'</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    onResourceFirstLoaded(map) &#123;</span><br><span class="line">        <span class="keyword">this</span>.dataStore.canvas = <span class="keyword">this</span>.canvas</span><br><span class="line">        <span class="keyword">this</span>.dataStore.ctx = <span class="keyword">this</span>.ctx</span><br><span class="line">        <span class="keyword">this</span>.dataStore.res = map</span><br><span class="line">        <span class="keyword">this</span>.createBackgroundMusic()</span><br><span class="line">        <span class="keyword">this</span>.init()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    init() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//首先重置游戏是没有结束的</span></span><br><span class="line">        <span class="keyword">this</span>.director.isGameOver = <span class="literal">false</span></span><br><span class="line">        <span class="keyword">this</span>.dataStore</span><br><span class="line">            .put(<span class="string">'pencils'</span>, [])</span><br><span class="line">            .put(<span class="string">'background'</span>, BackGround)</span><br><span class="line">            .put(<span class="string">'land'</span>, Land)</span><br><span class="line">            .put(<span class="string">'birds'</span>, Birds)</span><br><span class="line">            .put(<span class="string">'score'</span>, Score)</span><br><span class="line">            .put(<span class="string">'startButton'</span>, StartButton)</span><br><span class="line">        <span class="keyword">this</span>.registerEvent()</span><br><span class="line">        <span class="comment">//创建铅笔要在游戏逻辑运行之前</span></span><br><span class="line">        <span class="keyword">this</span>.director.createPencil()</span><br><span class="line">        <span class="keyword">this</span>.director.run()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    registerEvent() &#123;</span><br><span class="line">        wx.onTouchStart(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.director.isGameOver) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'游戏开始'</span>)</span><br><span class="line">                <span class="keyword">this</span>.init()</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.director.birdsEvent()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="总结一波"><a href="#总结一波" class="headerlink" title="总结一波"></a>总结一波</h4><ol><li>面向对象使用</li><li>设计模式的使用</li><li>数据的控制,资源的加载</li><li>canvas的使用</li></ol><blockquote><p>如果看到上面的总结 心中还是有疑问,说明你需要学习一下了,后面我也会自己回忆一下</p></blockquote><p><strong>更多细节以及想运行起来请看源码,同时感谢开放的互联网 <a href="https://github.com/douzhiwei/miniGame" target="_blank" rel="noopener">github</a></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今年年初的时候微信出了小游戏,最近很感兴趣,来研究一下&lt;br&gt;说到游戏,必然要说到游戏的设计模式,以下是我在网上学习和自己的见解,不一定完整或者正确,只是一个思路&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Director.js&lt;/code&gt;游戏的导演,这控制所有的游戏行为&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;DataStore.js&lt;/code&gt;游戏的数据池,用来读取和写入存储数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;ResourceLoader.js&lt;/code&gt;游戏的资源加载器,作用是在游戏逻辑运行之前,加载所有的资源,这个其实很重要,后面详细说&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Resources.js&lt;/code&gt;游戏的资源的数据集合,供&lt;code&gt;ResourceLoader.js&lt;/code&gt;使用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Sprite.js&lt;/code&gt;游戏的精灵类,wx里面在不用游戏库的时候其实就是canvas,这里就开始使用面向对象了&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接下来,逐一看一下&lt;/p&gt;
    
    </summary>
    
      <category term="微信" scheme="http://douzhiwei.top/categories/%E5%BE%AE%E4%BF%A1/"/>
    
    
      <category term="小游戏" scheme="http://douzhiwei.top/tags/%E5%B0%8F%E6%B8%B8%E6%88%8F/"/>
    
  </entry>
  
  <entry>
    <title>vue的实现流程</title>
    <link href="http://douzhiwei.top/2018/03/27/vue%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%B5%81%E7%A8%8B/"/>
    <id>http://douzhiwei.top/2018/03/27/vue的实现流程/</id>
    <published>2018-03-27T07:13:07.000Z</published>
    <updated>2018-03-27T08:34:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vue的三要素"><a href="#Vue的三要素" class="headerlink" title="Vue的三要素"></a>Vue的三要素</h2><ul><li>响应式,vue 如何监听到 data 的每个属性变化?</li><li>模板引擎,vue 的模板如何被解析，指令如何处理?</li><li>渲染,vue 的模板如何被渲染成 html ？以及渲染过程?</li></ul><p>带着这三个问题,说一下vue实现的大概流程</p><h2 id="响应式"><a href="#响应式" class="headerlink" title="响应式"></a>响应式</h2><p>响应式就是修改 data 属性之后，vue 立刻监听到,并且data 属性被代理到 vm 上,vue主要是用了<code>Object.defineProperty</code>这个函数</p><a id="more"></a><h3 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> _name = <span class="string">'shangsan'</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">'name'</span>, &#123;</span><br><span class="line">      get: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">'get'</span>, _name) <span class="comment">// 监听</span></span><br><span class="line">         <span class="keyword">return</span> _name</span><br><span class="line">        &#125;,</span><br><span class="line">      set: <span class="function"><span class="keyword">function</span> (<span class="params">newVal</span>) </span>&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(<span class="string">'set'</span>, newVal)  <span class="comment">// 监听</span></span><br><span class="line">           _name = newVal</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;)</span><br></pre></td></tr></table></figure><p>我看到这的时候有一个疑问,为什么在<code>get</code>的时候监听呢?检测<code>set</code>不就行了吗,原因是这样的:当我们在data里面定义的属性并未在template中使用的时候,vue并不会把这个属性代理到vm中,节省性能开销</p><h3 id="将data代理到vm简单实现"><a href="#将data代理到vm简单实现" class="headerlink" title="将data代理到vm简单实现"></a>将data代理到vm简单实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = &#123;&#125;</span><br><span class="line">     <span class="keyword">var</span> data = &#123;</span><br><span class="line">         name: <span class="string">'dou'</span>,</span><br><span class="line">         age: <span class="number">18</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"> <span class="keyword">var</span> key, value</span><br><span class="line">        <span class="keyword">for</span> (key <span class="keyword">in</span> data) &#123;</span><br><span class="line">            (<span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">Object</span>.defineProperty(vm, key, &#123;</span><br><span class="line">                    get: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                      <span class="built_in">console</span>.log(<span class="string">'get'</span>,data[key]) <span class="comment">// 监听</span></span><br><span class="line">                        <span class="keyword">return</span> data[key]</span><br><span class="line">                    &#125;,</span><br><span class="line">                    set: <span class="function"><span class="keyword">function</span> (<span class="params">newVal</span>) </span>&#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">'set'</span>, newVal) <span class="comment">// 监听</span></span><br><span class="line">                        data[key] = newVal</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)(key)</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>这时候就可以通过vm.name 访问到dou,也可以通过vm.name = ‘nb’修改name的值,这只是简单的模拟,vue的实现要复杂的多</p><h2 id="模板解析"><a href="#模板解析" class="headerlink" title="模板解析"></a>模板解析</h2><p>模板解析里有两个概念</p><ul><li>render 函数</li><li>render 函数与 vdom</li></ul><h3 id="render函数"><a href="#render函数" class="headerlink" title="render函数"></a>render函数</h3><p>vue在render函数中使用了<code>with</code>,通过<code>with</code>可以简化代码,我们不建议使用</p><p>vue的模板会被render函数转化</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;price&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>会被转化为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span>(<span class="keyword">this</span>) &#123;  <span class="comment">// this 就是 vm</span></span><br><span class="line">    <span class="keyword">return</span> _c(</span><br><span class="line">            <span class="string">'div'</span>,</span><br><span class="line">           &#123;</span><br><span class="line">              attrs: &#123;<span class="string">'id'</span>: <span class="string">'app'</span>&#125;</span><br><span class="line">           &#125;,</span><br><span class="line">          [</span><br><span class="line">             _c(<span class="string">'p'</span>, [_v(_s(price))])</span><br><span class="line">          ]</span><br><span class="line">         )</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>去掉<code>with</code>相当于</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> vm._c(</span><br><span class="line">            <span class="string">'div'</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                attrs: &#123;<span class="string">'id'</span>: <span class="string">'app'</span>&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            [</span><br><span class="line">                vm._c(<span class="string">'p'</span>, [vm._v(vm._s(vm.price))])</span><br><span class="line">            ]</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>模板中所有信息都包含在了 render 函数中</li><li>this 即 vm</li><li>price 即 this.price 即 vm.price，即 data 中的 price</li><li>_c 即 this._c 即 vm._c</li></ul><h4 id="v-model-v-on-click-v-for-是怎么实现的"><a href="#v-model-v-on-click-v-for-是怎么实现的" class="headerlink" title="v-model, v-on:click, v-for 是怎么实现的"></a>v-model, v-on:click, v-for 是怎么实现的</h4><p>看一个例子,注意这里引用的是未压缩的本地代码 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>to-do-list by vue<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./vue-2.5.13.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"add"</span>&gt;</span>submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in list"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// data 独立</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> data = &#123;</span></span><br><span class="line"><span class="javascript">            title: <span class="string">''</span>,</span></span><br><span class="line"><span class="undefined">            list: []</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 初始化 Vue 实例</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">            data: data,</span></span><br><span class="line"><span class="undefined">            methods: &#123;</span></span><br><span class="line"><span class="javascript">                add: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">this</span>.list.push(<span class="keyword">this</span>.title)</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">this</span>.title = <span class="string">''</span></span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">        </span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在vue的源码中搜索<code>updateComponent</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">updateComponent = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    vm._update(vm._render(), hydrating);</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><p>这里的vm._render()返回的就是vnode,整理一下打印的vnode</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span>(<span class="keyword">this</span>)&#123;  <span class="comment">// this 就是 vm</span></span><br><span class="line">           <span class="keyword">return</span> _c(</span><br><span class="line">               <span class="string">'div'</span>,</span><br><span class="line">               &#123;</span><br><span class="line">                   attrs:&#123;<span class="string">"id"</span>:<span class="string">"app"</span>&#125;</span><br><span class="line">               &#125;,</span><br><span class="line">               [</span><br><span class="line">                   _c(</span><br><span class="line">                       <span class="string">'div'</span>,</span><br><span class="line">                       [</span><br><span class="line">                           _c(</span><br><span class="line">                               <span class="string">'input'</span>,</span><br><span class="line">                               &#123;</span><br><span class="line">                                   directives:[</span><br><span class="line">                                       &#123;</span><br><span class="line">                                           name:<span class="string">"model"</span>,</span><br><span class="line">                                           rawName:<span class="string">"v-model"</span>,</span><br><span class="line">                                           value:(title),</span><br><span class="line">                                           expression:<span class="string">"title"</span></span><br><span class="line">                                       &#125;</span><br><span class="line">                                   ],</span><br><span class="line">                                   domProps:&#123;</span><br><span class="line">                                       <span class="string">"value"</span>:(title)</span><br><span class="line">                                   &#125;,</span><br><span class="line">                                   on:&#123;</span><br><span class="line">                                       <span class="string">"input"</span>:<span class="function"><span class="keyword">function</span>(<span class="params">$event</span>)</span>&#123;</span><br><span class="line">                                           <span class="keyword">if</span>($event.target.composing)<span class="keyword">return</span>;</span><br><span class="line">                                           title=$event.target.value</span><br><span class="line">                                       &#125;</span><br><span class="line">                                   &#125;</span><br><span class="line">                               &#125;</span><br><span class="line">                           ),</span><br><span class="line">                           _v(<span class="string">" "</span>),</span><br><span class="line">                           _c(</span><br><span class="line">                               <span class="string">'button'</span>,</span><br><span class="line">                               &#123;</span><br><span class="line">                                   on:&#123;</span><br><span class="line">                                       <span class="string">"click"</span>:add</span><br><span class="line">                                   &#125;</span><br><span class="line">                               &#125;,</span><br><span class="line">                               [_v(<span class="string">"submit"</span>)]</span><br><span class="line">                           )</span><br><span class="line">                       ]</span><br><span class="line">                   ),</span><br><span class="line">                   _v(<span class="string">" "</span>),</span><br><span class="line">                   _c(<span class="string">'div'</span>,</span><br><span class="line">                       [</span><br><span class="line">                           _c(</span><br><span class="line">                               <span class="string">'ul'</span>,</span><br><span class="line">                               _l((list),<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;<span class="keyword">return</span> _c(<span class="string">'li'</span>,[_v(_s(item))])&#125;)</span><br><span class="line">                           )</span><br><span class="line">                       ]</span><br><span class="line">                   )</span><br><span class="line">               ]</span><br><span class="line">           )</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>可以看出<code>v-model</code>就是props加event的方式实现的和react实现双向绑定思路是一样的<br><code>v-on</code>就是绑定了methods里的方法,<br><code>v-for</code>用了一个循环返回vode</p><h4 id="render-函数和-vdom"><a href="#render-函数和-vdom" class="headerlink" title="render 函数和 vdom"></a>render 函数和 vdom</h4><p>我们之前说了的<code>snabbdom</code></p><ul><li>vm._c 其实就相当于 snabbdom 中的 h 函数</li><li>render 函数执行之后，返回的是 vnode</li></ul><p>过程</p><ol><li>updateComponent 中实现了 vdom 的 patch</li><li>页面首次渲染执行 updateComponent</li><li>data 中每次修改属性，执行 updateComponent</li></ol><h2 id="整个流程"><a href="#整个流程" class="headerlink" title="整个流程"></a>整个流程</h2><h3 id="第一步：解析模板成-render-函数"><a href="#第一步：解析模板成-render-函数" class="headerlink" title="第一步：解析模板成 render 函数"></a>第一步：解析模板成 render 函数</h3><p><img src="/2018/03/27/vue的实现流程/1.png" alt=""></p><p>转换为</p><p><img src="/2018/03/27/vue的实现流程/2.png" alt=""></p><p>知识点</p><ul><li>with 的用法</li><li>模板中的所有信息都被 render 函数包含</li><li>模板中用到的 data 中的属性，都变成了 JS 变量</li><li>模板中的 v-model  v-for  v-on 都变成了 JS 逻辑</li><li>render 函数返回 vnode<h3 id="第二步：响应式开始监听"><a href="#第二步：响应式开始监听" class="headerlink" title="第二步：响应式开始监听"></a>第二步：响应式开始监听</h3></li></ul><p><img src="/2018/03/27/vue的实现流程/3.png" alt=""></p><p>知识点</p><ul><li>Object.defineProperty</li><li>将 data 的属性代理到 vm 上</li></ul><h3 id="第三步：首次渲染，显示页面，且绑定依赖"><a href="#第三步：首次渲染，显示页面，且绑定依赖" class="headerlink" title="第三步：首次渲染，显示页面，且绑定依赖"></a>第三步：首次渲染，显示页面，且绑定依赖</h3><p><img src="/2018/03/27/vue的实现流程/4.png" alt=""><br><img src="/2018/03/27/vue的实现流程/5.png" alt=""></p><p>知识点</p><ul><li>初次渲染，执行 updateComponent，执行 vm._render()</li><li>执行 render 函数，会访问到 vm.list vm.title</li><li>会被响应式的 get 方法监听到</li><li>执行 updateComponent ，会走到 vdom 的 patch 方法</li><li>patch 将 vnode 渲染成 DOM ，初次渲染完成</li></ul><h3 id="第四步：data-属性变化，触发-rerender"><a href="#第四步：data-属性变化，触发-rerender" class="headerlink" title="第四步：data 属性变化，触发 rerender"></a>第四步：data 属性变化，触发 rerender</h3><ul><li>修改属性，被响应式的 set 监听到</li><li>set 中执行 updateComponent</li><li>updateComponent 重新执行 vm._render()</li><li>生成的 vnode 和 prevVnode ，通过 patch 进行对比</li><li>渲染到 html 中</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Vue的三要素&quot;&gt;&lt;a href=&quot;#Vue的三要素&quot; class=&quot;headerlink&quot; title=&quot;Vue的三要素&quot;&gt;&lt;/a&gt;Vue的三要素&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;响应式,vue 如何监听到 data 的每个属性变化?&lt;/li&gt;
&lt;li&gt;模板引擎,vue 的模板如何被解析，指令如何处理?&lt;/li&gt;
&lt;li&gt;渲染,vue 的模板如何被渲染成 html ？以及渲染过程?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;带着这三个问题,说一下vue实现的大概流程&lt;/p&gt;
&lt;h2 id=&quot;响应式&quot;&gt;&lt;a href=&quot;#响应式&quot; class=&quot;headerlink&quot; title=&quot;响应式&quot;&gt;&lt;/a&gt;响应式&lt;/h2&gt;&lt;p&gt;响应式就是修改 data 属性之后，vue 立刻监听到,并且data 属性被代理到 vm 上,vue主要是用了&lt;code&gt;Object.defineProperty&lt;/code&gt;这个函数&lt;/p&gt;
    
    </summary>
    
    
      <category term="vue" scheme="http://douzhiwei.top/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vdom</title>
    <link href="http://douzhiwei.top/2018/03/26/vdom-diff%E7%AE%97%E6%B3%95/"/>
    <id>http://douzhiwei.top/2018/03/26/vdom-diff算法/</id>
    <published>2018-03-26T09:04:03.000Z</published>
    <updated>2018-03-27T03:52:31.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是vdom"><a href="#什么是vdom" class="headerlink" title="什么是vdom"></a>什么是vdom</h2><ul><li>virtual dom ， 虚拟 DOM</li><li>用 JS 模拟 DOM 结构</li><li>DOM 变化的对比，放在 JS 层来做</li><li>提高重绘和渲染性能</li></ul><p><strong>html</strong></p><p><img src="/2018/03/26/vdom-diff算法/v-dom-html.png" alt=""></p><a id="more"></a><p><strong>生产的vNode节点</strong></p><p><img src="/2018/03/26/vdom-diff算法/v-dom-js.png" alt=""></p><p><strong>我们知道直接操作Dom是非常昂贵的,这不在举例,总结一下</strong></p><ul><li>DOM 操作是“昂贵”的，js 运行效率高</li><li>尽量减少 DOM 操作，而不是“推倒重来”</li><li>项目越复杂，影响就越严重</li><li>vdom 即可解决这个问题</li></ul><h2 id="使用vdom"><a href="#使用vdom" class="headerlink" title="使用vdom"></a>使用vdom</h2><p>vue和react都使用了vdom,我们知道vue的vdom和diff算法是在snabbdom上进行修改的,看一下snabbdom,github可以搜索到这个库</p><p><img src="/2018/03/26/vdom-diff算法/snabbdom.png" alt=""></p><h3 id="看一下官方的demo"><a href="#看一下官方的demo" class="headerlink" title="看一下官方的demo"></a>看一下官方的demo</h3><p><img src="/2018/03/26/vdom-diff算法/vdom-demo.png" alt=""></p><h3 id="h函数"><a href="#h函数" class="headerlink" title="h函数"></a>h函数</h3><p>h函数就是把html节点转换为vNode的方法,就是最上面的那个图</p><h3 id="patch函数"><a href="#patch函数" class="headerlink" title="patch函数"></a>patch函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义 h</span></span><br><span class="line">       <span class="keyword">var</span> h = snabbdom.h</span><br><span class="line">       <span class="keyword">var</span> container = <span class="built_in">document</span>.getElementById(<span class="string">'container'</span>)</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 生成 vnode</span></span><br><span class="line">       <span class="keyword">var</span> vnode = h(<span class="string">'ul#list'</span>, &#123;&#125;, [</span><br><span class="line">           h(<span class="string">'li.item'</span>, &#123;&#125;, <span class="string">'Item 1'</span>),</span><br><span class="line">           h(<span class="string">'li.item'</span>, &#123;&#125;, <span class="string">'Item 2'</span>)</span><br><span class="line">       ])</span><br><span class="line">       patch(container, vnode)</span><br><span class="line"></span><br><span class="line">       <span class="built_in">document</span>.getElementById(<span class="string">'btn-change'</span>).addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">           <span class="comment">// 生成 newVnode</span></span><br><span class="line">           <span class="keyword">var</span> newVnode = h(<span class="string">'ul#list'</span>, &#123;&#125;, [</span><br><span class="line">               h(<span class="string">'li.item'</span>, &#123;&#125;, <span class="string">'Item 1'</span>),</span><br><span class="line">               h(<span class="string">'li.item'</span>, &#123;&#125;, <span class="string">'Item B'</span>),</span><br><span class="line">               h(<span class="string">'li.item'</span>, &#123;&#125;, <span class="string">'Item 3'</span>)</span><br><span class="line">           ])</span><br><span class="line">           patch(vnode, newVnode)</span><br><span class="line">       &#125;)</span><br></pre></td></tr></table></figure><p><strong>patch函数有两种用法</strong></p><ol><li>当容器为空的时候,根据vNode生成dom节点</li><li>当dom发生变化时,pacth比较newVnode和oldVnode,生成新的dom节点</li></ol><p>上一个栗子,直接拷贝到浏览器就可以运行,然后通过控制台的element可以观察变化</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn-change"</span>&gt;</span>change<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/snabbdom/0.7.1/snabbdom.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/snabbdom/0.7.1/snabbdom-class.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/snabbdom/0.7.1/snabbdom-props.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/snabbdom/0.7.1/snabbdom-style.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/snabbdom/0.7.1/snabbdom-eventlisteners.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/snabbdom/0.7.1/h.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> snabbdom = <span class="built_in">window</span>.snabbdom</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 定义 patch</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> patch = snabbdom.init([</span></span><br><span class="line"><span class="undefined">            snabbdom_class,</span></span><br><span class="line"><span class="undefined">            snabbdom_props,</span></span><br><span class="line"><span class="undefined">            snabbdom_style,</span></span><br><span class="line"><span class="undefined">            snabbdom_eventlisteners</span></span><br><span class="line"><span class="undefined">        ])</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 定义 h</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> h = snabbdom.h</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> container = <span class="built_in">document</span>.getElementById(<span class="string">'container'</span>)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 生成 vnode</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> vnode = h(<span class="string">'ul#list'</span>, &#123;&#125;, [</span></span><br><span class="line"><span class="javascript">            h(<span class="string">'li.item'</span>, &#123;&#125;, <span class="string">'Item 1'</span>),</span></span><br><span class="line"><span class="javascript">            h(<span class="string">'li.item'</span>, &#123;&#125;, <span class="string">'Item 2'</span>)</span></span><br><span class="line"><span class="undefined">        ])</span></span><br><span class="line"><span class="undefined">        patch(container, vnode)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">'btn-change'</span>).addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 生成 newVnode</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> newVnode = h(<span class="string">'ul#list'</span>, &#123;&#125;, [</span></span><br><span class="line"><span class="javascript">                h(<span class="string">'li.item'</span>, &#123;&#125;, <span class="string">'Item 1'</span>),</span></span><br><span class="line"><span class="javascript">                h(<span class="string">'li.item'</span>, &#123;&#125;, <span class="string">'Item B'</span>),</span></span><br><span class="line"><span class="javascript">                h(<span class="string">'li.item'</span>, &#123;&#125;, <span class="string">'Item 3'</span>)</span></span><br><span class="line"><span class="undefined">            ])</span></span><br><span class="line"><span class="undefined">            patch(vnode, newVnode)</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="diff算法"><a href="#diff算法" class="headerlink" title="diff算法"></a>diff算法</h2><ul><li>DOM 操作是“昂贵”的，因此尽量减少 DOM 操作</li><li>找出本次 DOM 必须更新的节点来更新，其他的不更新</li><li>这个“找出”的过程，就需要 diff 算法,上面已经提到了</li></ul><h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><ul><li>patch(container, vnode)</li><li>patch(vnode, newVnode)</li></ul><p>1.patch(container, vnode)过程如下图</p><p>根据vNode</p><p><img src="/2018/03/26/vdom-diff算法/v-dom-js.png" alt=""></p><p>生产Dom节点</p><p><img src="/2018/03/26/vdom-diff算法/v-dom-html.png" alt=""></p><p><strong>简单写一下实现,只是一个思路并不能运行</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createElement</span>(<span class="params">vnode</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> tag = vnode.tag  <span class="comment">// 'ul'</span></span><br><span class="line">    <span class="keyword">let</span> attrs = vnode.attrs || &#123;&#125;</span><br><span class="line">    <span class="keyword">let</span> children = vnode.children || []</span><br><span class="line">    <span class="keyword">if</span> (!tag) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建真实的 DOM 元素</span></span><br><span class="line">    <span class="keyword">let</span> elem = <span class="built_in">document</span>.createElement(tag)</span><br><span class="line">    <span class="comment">// 属性</span></span><br><span class="line">    <span class="keyword">let</span> attrName</span><br><span class="line">    <span class="keyword">for</span> (attrName <span class="keyword">in</span> attrs) &#123;</span><br><span class="line">        <span class="keyword">if</span> (attrs.hasOwnProperty(attrName)) &#123;</span><br><span class="line">            <span class="comment">// 给 elem 添加属性</span></span><br><span class="line">            elem.setAttribute(attrName, attrs[attrName])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 子元素</span></span><br><span class="line">    children.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">childVnode</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 给 elem 添加子元素</span></span><br><span class="line">        elem.appendChild(createElement(childVnode))  <span class="comment">// 递归</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回真实的 DOM 元素</span></span><br><span class="line">    <span class="keyword">return</span> elem</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.patch(vnode, newVnode)</p><p>比较新旧vnode生成dom,也是简单写一下思路</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateChildren</span>(<span class="params">vnode, newVnode</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> children = vnode.children || []</span><br><span class="line">    <span class="keyword">let</span> newChildren = newVnode.children || []</span><br><span class="line"></span><br><span class="line">    children.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">childVnode, index</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> newChildVnode = newChildren[index]</span><br><span class="line">        <span class="keyword">if</span> (childVnode.tag === newChildVnode.tag) &#123;</span><br><span class="line">            <span class="comment">// 深层次对比，递归</span></span><br><span class="line">            updateChildren(childVnode, newChildVnode)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 替换</span></span><br><span class="line">            replaceNode(childVnode, newChildVnode)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">replaceNode</span>(<span class="params">vnode, newVnode</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> elem = vnode.elem  <span class="comment">// 真实的 DOM 节点</span></span><br><span class="line">    <span class="keyword">let</span> newElem = createElement(newVnode)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 替换</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结diff过程"><a href="#总结diff过程" class="headerlink" title="总结diff过程"></a>总结diff过程</h3><ul><li>patch(container, vnode) 和 patch(vnode, newVnode</li><li>createElment</li><li>updateChildren</li></ul><p><strong>diff的算法是 非常复杂的我觉得没有必要研究他的没一行源码,知道流程就好</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是vdom&quot;&gt;&lt;a href=&quot;#什么是vdom&quot; class=&quot;headerlink&quot; title=&quot;什么是vdom&quot;&gt;&lt;/a&gt;什么是vdom&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;virtual dom ， 虚拟 DOM&lt;/li&gt;
&lt;li&gt;用 JS 模拟 DOM 结构&lt;/li&gt;
&lt;li&gt;DOM 变化的对比，放在 JS 层来做&lt;/li&gt;
&lt;li&gt;提高重绘和渲染性能&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;html&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2018/03/26/vdom-diff算法/v-dom-html.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://douzhiwei.top/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="vue" scheme="http://douzhiwei.top/tags/vue/"/>
    
      <category term="react" scheme="http://douzhiwei.top/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>js异步的前世今生</title>
    <link href="http://douzhiwei.top/2018/03/25/js%E5%BC%82%E6%AD%A5%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/"/>
    <id>http://douzhiwei.top/2018/03/25/js异步的前世今生/</id>
    <published>2018-03-25T15:02:53.000Z</published>
    <updated>2018-03-26T09:00:52.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="单线程"><a href="#单线程" class="headerlink" title="单线程"></a>单线程</h2><p>要说js异步操作首先还的从js的单线程说起</p><ul><li><strong>单线程</strong>:  只有一个线程，只能做一件事</li><li><strong>原因</strong>:  避免 DOM 渲染的冲突<ul><li>浏览器需要渲染 DOM</li><li>JS 可以修改 DOM 结构</li><li>JS 执行的时候，浏览器 DOM 渲染会暂停</li><li>两段 JS 也不能同时执行（都修改 DOM 就冲突了）</li><li>serviceworker 支持多线程，但是不能访问 DOM</li></ul></li></ul><h3 id="解决方案-异步"><a href="#解决方案-异步" class="headerlink" title="解决方案 - 异步"></a>解决方案 - 异步</h3><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">100</span>)</span><br><span class="line">   setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="number">200</span>)</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">300</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">400</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者是ajax</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">100</span>)</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">       url: <span class="string">'./xxx'</span>,</span><br><span class="line">       success: <span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(result)</span><br><span class="line">       &#125;</span><br><span class="line"> &#125;)</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="number">300</span>)</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="number">400</span>)</span><br></pre></td></tr></table></figure><h3 id="异步的缺点"><a href="#异步的缺点" class="headerlink" title="异步的缺点"></a>异步的缺点</h3><ul><li>没按照书写方式执行，可读性查,维护性差</li><li>callback 中不容易模块化, callbackHell</li></ul><h2 id="event-loop"><a href="#event-loop" class="headerlink" title="event-loop"></a>event-loop</h2><ul><li><strong>事件轮询</strong>，JS 实现异步的具体解决方案</li><li>同步代码，直接执行</li><li>异步函数先放在 异步队列 中</li><li>待同步函数执行完毕，轮询执行 异步队列 的函数</li></ul><p>代码分析</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 主进程</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 异步队列</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//立刻放入</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//100ms后放入</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>nodejs中也有事件轮询这个概念,但是要比js中复杂的多,后续也会说一下nodejs的事件轮询</strong></p><h2 id="jquery中解决异步"><a href="#jquery中解决异步" class="headerlink" title="jquery中解决异步"></a>jquery中解决异步</h2><ul><li>jQuery 1.5 的变化</li><li>使用 jQuery Deferred</li><li>初步引入 Promise 概念</li></ul><h3 id="jquery1-5之前的ajax是这样的"><a href="#jquery1-5之前的ajax是这样的" class="headerlink" title="jquery1.5之前的ajax是这样的"></a>jquery1.5之前的ajax是这样的</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ajax = $.ajax(&#123;</span><br><span class="line">           url: <span class="string">'xxx'</span>,</span><br><span class="line">           success: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">               <span class="built_in">console</span>.log(<span class="string">'success 1'</span>)</span><br><span class="line">               <span class="built_in">console</span>.log(<span class="string">'success 2'</span>)</span><br><span class="line">               <span class="built_in">console</span>.log(<span class="string">'success 3'</span>)</span><br><span class="line">           &#125;,</span><br><span class="line">           error: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">               <span class="built_in">console</span>.log(<span class="string">'error'</span>)</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;)</span><br><span class="line"> <span class="built_in">console</span>.log(ajax) <span class="comment">// XHR对象</span></span><br></pre></td></tr></table></figure><h3 id="jquery1-5之后的ajax是这样的"><a href="#jquery1-5之后的ajax是这样的" class="headerlink" title="jquery1.5之后的ajax是这样的"></a>jquery1.5之后的ajax是这样的</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ajax = $.ajax(<span class="string">'./data.json'</span>)</span><br><span class="line">       ajax.done(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(<span class="string">'success a'</span>)</span><br><span class="line">       &#125;).fail(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(<span class="string">'fail 1'</span>)</span><br><span class="line">       &#125;).done(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(<span class="string">'success b'</span>)</span><br><span class="line">       &#125;).fail(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(<span class="string">'fail 2'</span>)</span><br><span class="line">       &#125;).done(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(<span class="string">'success c'</span>)</span><br><span class="line">       &#125;).fail(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(<span class="string">'fail 3'</span>)</span><br><span class="line">       &#125;)</span><br><span class="line">       </span><br><span class="line">       <span class="comment">//或者是</span></span><br><span class="line">       <span class="keyword">var</span> ajax = $.ajax(<span class="string">'./data.json'</span>)</span><br><span class="line">       ajax.then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(<span class="string">'success 100'</span>)</span><br><span class="line">       &#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(<span class="string">'fail 100'</span>)</span><br><span class="line">       &#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(<span class="string">'success 200'</span>)</span><br><span class="line">       &#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(<span class="string">'fail 200'</span>)</span><br><span class="line">       &#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(<span class="string">'success 300'</span>)</span><br><span class="line">       &#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">           conso3le.log(<span class="string">'fail 00'</span>)</span><br><span class="line">       &#125;)</span><br><span class="line">       </span><br><span class="line">  <span class="built_in">console</span>.log(ajax) <span class="comment">// deferred对象</span></span><br></pre></td></tr></table></figure><h3 id="jquery1-5的变化"><a href="#jquery1-5的变化" class="headerlink" title="jquery1.5的变化"></a>jquery1.5的变化</h3><ul><li>无法改变 JS 异步和单线程的本质</li><li>只能从写法上杜绝 callback 这种形式</li><li>它是一种语法糖形式，但是解耦了代码</li><li>体现了开放封闭原则</li></ul><h3 id="使用jquery的Deferred"><a href="#使用jquery的Deferred" class="headerlink" title="使用jquery的Deferred"></a>使用jquery的Deferred</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waitHandle</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="comment">// 定义</span></span><br><span class="line">       <span class="keyword">var</span> dtd = $.Deferred()</span><br><span class="line">       <span class="keyword">var</span> wait = <span class="function"><span class="keyword">function</span> (<span class="params">dtd</span>) </span>&#123;</span><br><span class="line">           <span class="keyword">var</span> task = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">               <span class="built_in">console</span>.log(<span class="string">'执行完成'</span>)</span><br><span class="line">               <span class="comment">// 成功</span></span><br><span class="line">               dtd.resolve()</span><br><span class="line">               <span class="comment">// 失败</span></span><br><span class="line">               <span class="comment">// dtd.reject()</span></span><br><span class="line">           &#125;</span><br><span class="line">           setTimeout(task, <span class="number">1000</span>)</span><br><span class="line">           <span class="comment">// wait 返回</span></span><br><span class="line">           <span class="keyword">return</span> dtd.promise()</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 最终返回</span></span><br><span class="line">       <span class="keyword">return</span> wait(dtd)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> w = waitHandle()  <span class="comment">// promise 对象</span></span><br><span class="line">   $.when(w).then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">'ok 1'</span>)</span><br><span class="line">   &#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">'err 1'</span>)</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure><h2 id="Promise的使用和原理"><a href="#Promise的使用和原理" class="headerlink" title="Promise的使用和原理"></a>Promise的使用和原理</h2><ul><li>基本语法</li><li>异常捕获</li><li>多个串联</li><li>Promise.all 和 Promise.race</li><li>Promise 标准</li></ul><p>这里不说了,之前说过了,可以看之前写的 <a href="http://douzhiwei.top/2018/03/24/Promise-es6/">点这</a><br>,还有一个进阶的<a href="http://douzhiwei.top/2018/03/19/Promise/">点这</a></p><h2 id="async-和-await"><a href="#async-和-await" class="headerlink" title="async 和 await"></a>async 和 await</h2><p>async function的出现,我们可以像写同步代码的方式书写异步代码</p><ul><li>使用了 Promise ，并没有和 Promise 冲突</li><li>完全是同步的写法，再也没有回调函数</li><li>但是：改变不了 JS 单线程、异步的本质</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> load = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">const</span> res1 = <span class="keyword">await</span> loadImg(src1)</span><br><span class="line"><span class="built_in">console</span>.log(res1)</span><br><span class="line"><span class="keyword">const</span> res2 = <span class="keyword">await</span> loadImg(src2)</span><br><span class="line"><span class="built_in">console</span>.log(res2)</span><br><span class="line">&#125;</span><br><span class="line">load()</span><br></pre></td></tr></table></figure><ul><li>使用 await ，函数必须用 async 标识</li><li>await 后面跟的是一个 Promise 实例</li><li>因为是ES7的提案,所以babel要使用state2,可以大胆的使用async func,在koa2已经开始全面使用</li><li>比较老旧浏览器需要 babel-polyfill</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;单线程&quot;&gt;&lt;a href=&quot;#单线程&quot; class=&quot;headerlink&quot; title=&quot;单线程&quot;&gt;&lt;/a&gt;单线程&lt;/h2&gt;&lt;p&gt;要说js异步操作首先还的从js的单线程说起&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;单线程&lt;/strong&gt;:  只有一个线程，只能做一件事&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;原因&lt;/strong&gt;:  避免 DOM 渲染的冲突&lt;ul&gt;
&lt;li&gt;浏览器需要渲染 DOM&lt;/li&gt;
&lt;li&gt;JS 可以修改 DOM 结构&lt;/li&gt;
&lt;li&gt;JS 执行的时候，浏览器 DOM 渲染会暂停&lt;/li&gt;
&lt;li&gt;两段 JS 也不能同时执行（都修改 DOM 就冲突了）&lt;/li&gt;
&lt;li&gt;serviceworker 支持多线程，但是不能访问 DOM&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;解决方案-异步&quot;&gt;&lt;a href=&quot;#解决方案-异步&quot; class=&quot;headerlink&quot; title=&quot;解决方案 - 异步&quot;&gt;&lt;/a&gt;解决方案 - 异步&lt;/h3&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://douzhiwei.top/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>vue实例下挂载的常用方法</title>
    <link href="http://douzhiwei.top/2018/03/22/vue%E5%AE%9E%E4%BE%8B%E4%B8%8B%E6%8C%82%E8%BD%BD%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>http://douzhiwei.top/2018/03/22/vue实例下挂载的常用方法/</id>
    <published>2018-03-22T13:16:18.000Z</published>
    <updated>2018-03-27T07:01:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>vue实例下有很多方法,有的时候还是非常有用的,先创建一个vue实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    template: <span class="string">'&lt;div ref="div"&gt;&#123;&#123;text&#125;&#125; &#123;&#123;obj.a&#125;&#125;&lt;/div&gt;'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        text: <span class="number">0</span>,</span><br><span class="line">        obj: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// watch: &#123;</span></span><br><span class="line">    <span class="comment">//   text (newText, oldText) &#123;</span></span><br><span class="line">    <span class="comment">//     console.log(`$&#123;newText&#125; : $&#123;oldText&#125;`)</span></span><br><span class="line">    <span class="comment">//   &#125;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.$mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1.</span> app.$data 实例下的data将返回  </span><br><span class="line">    data: &#123;</span><br><span class="line">        text: <span class="number">0</span>,</span><br><span class="line">        obj: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="number">2.</span> app.$props返回传入的props,这里会返回<span class="literal">undefined</span></span><br><span class="line"><span class="number">3.</span> app.$el输出&lt;div&gt;<span class="number">0</span>&lt;<span class="regexp">/div&gt;`</span></span><br><span class="line"><span class="regexp">4. app.$options,返回挂载在vue实例上的好几个属性和方法</span></span><br><span class="line"><span class="regexp">5. app.$root 返回 app</span></span><br><span class="line"><span class="regexp">6. app.$children 返回[]</span></span><br><span class="line"><span class="regexp">7. app.$slots返回&#123;&#125;</span></span><br><span class="line"><span class="regexp">8. app.$scopedSlots返回&#123;&#125;</span></span><br><span class="line"><span class="regexp">9. app.$refs 返回 div</span></span><br><span class="line"><span class="regexp">10. app.$isServer 返回false,这个一般在ssr的时候用到</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;vue实例下有很多方法,有的时候还是非常有用的,先创建一个vue实例&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;sp
      
    
    </summary>
    
    
      <category term="vue" scheme="http://douzhiwei.top/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>ES6进阶</title>
    <link href="http://douzhiwei.top/2018/03/21/ES6%E8%BF%9B%E9%98%B6/"/>
    <id>http://douzhiwei.top/2018/03/21/ES6进阶/</id>
    <published>2018-03-21T14:43:39.000Z</published>
    <updated>2018-03-27T03:00:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="let和const"><a href="#let和const" class="headerlink" title="let和const"></a>let和const</h2><h3 id="作用域的概念"><a href="#作用域的概念" class="headerlink" title="作用域的概念"></a>作用域的概念</h3><ul><li>在es5中只有全局作用域和函数作用域</li><li>在es6中新增块作用域</li></ul><h3 id="如何使用let和const"><a href="#如何使用let和const" class="headerlink" title="如何使用let和const"></a>如何使用let和const</h3><p>直接看代码</p><ul><li>let</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 块作用域</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>; i&lt;<span class="number">3</span>; i++)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(i) <span class="comment">//1 2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i) <span class="comment">// ReferenceError 这里为啥会报这个错误呢</span></span><br><span class="line"><span class="number">1.</span><span class="keyword">let</span>声明的是块作用域</span><br><span class="line"><span class="number">2.</span>这里找不到i应该报<span class="literal">undefined</span>的啊，因为在es6中强制使用严格模式，变量未定义直接引用就会报引用异常。也就是说自动使用了</span><br><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不能重复定义</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">2</span> <span class="comment">// 会报Duplicate declaration这个错误，因为let声明的变量不能重复定义</span></span><br></pre></td></tr></table></figure><a id="more"></a><ul><li>const</li><li>也是块作用域和let一样</li><li>和let有一个区别，let可以声明的时候不赋值，但是const必须声明时赋值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// const定义常量，赋值以后不能改变</span></span><br><span class="line"><span class="keyword">const</span> PI = <span class="number">3.14</span></span><br><span class="line">PI = <span class="number">1</span> <span class="comment">//会报PI is read-only这个错误，因为const定义的不能修改</span></span><br><span class="line"><span class="comment">// 声明必须赋值</span></span><br><span class="line"><span class="keyword">const</span> a</span><br><span class="line">a = <span class="number">1</span> <span class="comment">// 会报Unexpected token这个错，因为 const 定义的时候必须赋值</span></span><br><span class="line"><span class="comment">// 特殊的</span></span><br><span class="line"><span class="keyword">const</span> k = &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;</span><br><span class="line">k.b=<span class="number">2</span> <span class="comment">//k=&#123;a:1,b:2&#125; k是引用类型 返回值是指针，k的指针并没有变，所以不会报错</span></span><br></pre></td></tr></table></figure><blockquote><p>不存在变量提升,变量未声明使用会报错ReferenceError</p></blockquote><h2 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h2><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>数组 对象 字符串 布尔值 函数参数 数值 的解构赋值，这主要说数值和对象的，其他的都差不多</p><h3 id="数组的解构赋值"><a href="#数组的解构赋值" class="headerlink" title="数组的解构赋值"></a>数组的解构赋值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//最基本的写法</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> a,b</span><br><span class="line">[a,b] = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"><span class="built_in">console</span>.log(a,b) <span class="comment">// 1,2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加默认值</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> a,b</span><br><span class="line">[a,b,c=<span class="number">3</span>] = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"><span class="built_in">console</span>.log(a,b,c) <span class="comment">// 1,2,3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用场景</span></span><br><span class="line"><span class="comment">// 1. 变量的值交换</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">2</span></span><br><span class="line">[a,b] = [b,a]</span><br><span class="line"><span class="built_in">console</span>.log(a,b) <span class="comment">//2, 1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 从函数的返回值取值</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> a,b</span><br><span class="line">[a,b] = f()</span><br><span class="line"><span class="built_in">console</span>.log(a,b) <span class="comment">// 1, 2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 从函数的返回值中取值，并且弄成我们想要的格式</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> a,b,c</span><br><span class="line">[a,,,b]=f()</span><br><span class="line"><span class="built_in">console</span>.log(a,b) <span class="comment">//1,4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 同样，取我们想要的</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> a,b,c</span><br><span class="line">[a,...b]=f()</span><br><span class="line"><span class="built_in">console</span>.log(a,b) <span class="comment">//1, [2,3,4,5]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 取我们想要的，意思就是乐意要啥就拿啥</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> a,b,rest</span><br><span class="line">[a,b,..rest] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="built_in">console</span>.log(a,b,rest) <span class="comment">// 1, 2, [3,4,5]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对象的解构赋值"><a href="#对象的解构赋值" class="headerlink" title="对象的解构赋值"></a>对象的解构赋值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基本写法</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> a,b</span><br><span class="line">&#123;&#123;a,b&#125; = &#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>&#125;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a,b) <span class="comment">// 1, 2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> o = &#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">q</span>:<span class="literal">true</span>&#125;</span><br><span class="line"><span class="keyword">let</span> &#123;a,p&#125; = o</span><br><span class="line"><span class="built_in">console</span>.log(a,q) <span class="comment">//1,true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加默认值</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> &#123;a=<span class="number">10</span>,b=<span class="number">1</span>&#125; = &#123;a=<span class="number">1</span>&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a,b) <span class="comment">//1,1 ,默认值会被后面的值替换</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用场景</span></span><br><span class="line"><span class="comment">// 模拟后端接口，取我们想要的值</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> data = &#123;</span><br><span class="line">title: <span class="string">'a'</span>,</span><br><span class="line">test:[&#123;</span><br><span class="line">title: <span class="string">'b'</span></span><br><span class="line">desc: <span class="string">'desc'</span></span><br><span class="line">&#125;]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">title</span>:esTitle,<span class="attr">test</span>:[&#123;<span class="attr">title</span>:cTitle&#125;]&#125; = data</span><br><span class="line"><span class="built_in">console</span>.log(esTitle,cTitle) <span class="comment">// a ,b</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>最后 为啥都加了一个大括号呢，这样的目的是利用块作用域把变量隔离开，要不就报重复定义的错了</strong></p><h2 id="正则的扩展"><a href="#正则的扩展" class="headerlink" title="正则的扩展"></a>正则的扩展</h2><ul><li>构造函数的变化</li><li>方法的扩展</li><li>u y 修饰符</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数的变化</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// es5 RegExp的两种情况</span></span><br><span class="line"><span class="comment">//第一种情况，参数是字符串，这时第二个参数表示正则表达式的修饰符</span></span><br><span class="line"><span class="keyword">let</span> regex=<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'xyz'</span>,<span class="string">'i'</span>)</span><br><span class="line"><span class="comment">// 第二种情况，参数是一个正则表示式</span></span><br><span class="line"><span class="keyword">let</span> regex2= <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/xyz/i</span>)</span><br><span class="line"><span class="built_in">console</span>.log(regex.test(<span class="string">'xyz123'</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(regex2.test(<span class="string">'xyz123'</span>)) <span class="comment">//true</span></span><br><span class="line"><span class="comment">// es6 构造函数第一个参数是一个正则对象，可以使用第二个参数指定修饰符</span></span><br><span class="line"><span class="keyword">let</span> regex3 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/xyz/ig</span>,<span class="string">'i'</span>)</span><br><span class="line"><span class="comment">// ig会被覆盖</span></span><br><span class="line"><span class="built_in">console</span>.log(regex3.flags) <span class="comment">// i</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// y修饰符</span></span><br><span class="line"><span class="comment">// y修饰符于g类似都是全局搜索,g修饰符只要剩余位置中存在匹配就可，而y修饰符确保匹配必须从剩余的第一个位置开始</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> s=<span class="string">'aaa_a_a'</span></span><br><span class="line"><span class="keyword">let</span> a1=<span class="regexp">/b+/g</span></span><br><span class="line"><span class="keyword">let</span> a2=<span class="regexp">/b+/y</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'one'</span>,a1.exec(s)) <span class="comment">//[aaa,inex:0,input:'aaa_a_a']</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'one'</span>,a2.exec(s)) <span class="comment">//[aaa,inex:0,input:'aaa_a_a']</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'two'</span>,a1.exec(s)) <span class="comment">//[a,inex:4,input:'aaa_a_a']</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'two'</span>,a2.exec(s)) <span class="comment">// null</span></span><br><span class="line"><span class="comment">// sticky</span></span><br><span class="line"><span class="built_in">console</span>.log(a1.sticky) <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(a2.sticky) <span class="comment">//true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// u修饰符</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 新增了使用大括号表示 Unicode，这种表示法在正则表达式中必须加上u修饰符，才能识别当中的大括号，否则会被解读为量词。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// u 修饰符 用于处理utf-16编码</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/^\uD83D/</span>.test(<span class="string">'\uD83D\uDC2A'</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/^\uD83D/u</span>.test(<span class="string">'\uD83D\uDC2A'</span>)) <span class="comment">// false</span></span><br><span class="line"><span class="comment">// \uD83D\uDC2A是一个四个字节的 UTF-16 编码，代表一个字符。但是，ES5 不支持四个字节的 UTF-16 编码，</span></span><br><span class="line"><span class="comment">// 会将其识别为两个字符，导致第一行行代码结果为true。加了u修饰符以后，ES6 就会识别其为一个字符，所以第二行代码结果为false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/\u&#123;61&#125;/</span>.test(<span class="string">'a'</span>)) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/\u&#123;61&#125;/u</span>.test(<span class="string">'a'</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="comment">// Unicode 字符表示法,可以正确识别超过两个字符的unicode代码</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`\u&#123;20BB7&#125;`</span>) <span class="comment">// 吉</span></span><br><span class="line"><span class="keyword">let</span> s= <span class="string">'吉'</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/^.$/</span>.test(s)) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/^.$/u</span>.test(s)) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log（<span class="string">'test'</span>,/吉&#123;<span class="number">2</span>&#125;/.test（<span class="string">'吉吉'</span>）） <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log（<span class="string">'test-2'</span>,/吉&#123;<span class="number">2</span>&#125;/u.test（<span class="string">'吉吉'</span>）） <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字符串的扩展"><a href="#字符串的扩展" class="headerlink" title="字符串的扩展"></a>字符串的扩展</h2><ul><li>Unicode表示法</li><li>遍历接口</li><li>新增方法</li><li>模板,便签字符串</li></ul><h3 id="Unicode表示法"><a href="#Unicode表示法" class="headerlink" title="Unicode表示法"></a>Unicode表示法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="comment">// es5的写法</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`\u0061`</span>) <span class="comment">// a</span></span><br><span class="line">consoel.log(<span class="string">`\u20BB7`</span>) <span class="comment">// 不正常显示 因为这个大于了 0xFFFF,超出这个必须用双字节形式表示</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`\uD842\uDFB7`</span>) <span class="comment">// 𠮷</span></span><br><span class="line"><span class="comment">// es6的写法 用\u&#123;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`\u&#123;20BB7&#125;`</span>) <span class="comment">// 𠮷</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//js内部，字符以UTF-16的格式储存，每个字符固定为2个字节。对于那些需要4个字节储存的字符（Unicode码大于0xFFFF的字符），js会认为它们是两个字符</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> s = <span class="string">'𠮷'</span></span><br><span class="line"><span class="comment">// es5</span></span><br><span class="line"><span class="built_in">console</span>.log(s.length) <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(s.charAt(<span class="number">0</span>)) <span class="comment">// 乱码</span></span><br><span class="line"><span class="built_in">console</span>.log(s.charAt(<span class="number">1</span>)) <span class="comment">//乱码</span></span><br><span class="line"><span class="built_in">console</span>.log(s.charCodeAt(<span class="number">0</span>)) <span class="comment">// 55362</span></span><br><span class="line"><span class="built_in">console</span>.log(s.charCodeAt(<span class="number">1</span>)) <span class="comment">// 57271</span></span><br><span class="line"><span class="comment">// es6</span></span><br><span class="line"><span class="keyword">let</span> s1 = <span class="string">'𠮷a'</span></span><br><span class="line"><span class="built_in">console</span>.log(s1.length) <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(s1.codePointAt(<span class="number">0</span>)) <span class="comment">// 134071</span></span><br><span class="line"><span class="built_in">console</span>.log(s1.codePointAt(<span class="number">0</span>).toString(<span class="number">16</span>)) <span class="comment">// 20bb7</span></span><br><span class="line"><span class="built_in">console</span>.log(s1.codePointAt(<span class="number">1</span>)) <span class="comment">// 57271</span></span><br><span class="line"><span class="built_in">console</span>.log(s1.codePointAt(<span class="number">2</span>)) <span class="comment">// 97</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ES5提供String.fromCharCode方法，用于从码点返回对应字符，但是这个方法不能识别32位的UTF-16字符（Unicode编号大于0xFFFF）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6提供了String.fromCodePoint方法，可以识别大于0xFFFF的字符,在作用上，与codePointAt方法相反</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//es5</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>.fromCharCode(<span class="string">'0x20bb7'</span>)) <span class="comment">// 乱码</span></span><br><span class="line"><span class="comment">//es6</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>.formCodePoint(<span class="string">'0x20bb7'</span>)) <span class="comment">// 𠮷</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="遍历接口"><a href="#遍历接口" class="headerlink" title="遍历接口"></a>遍历接口</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="comment">// es5</span></span><br><span class="line"><span class="keyword">let</span> str=<span class="string">'\u&#123;20bb7&#125;abc'</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i =<span class="number">0</span>;i&lt;str.length;i++)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(str[i]) <span class="comment">// 乱码 乱码 a b c</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// es6</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> code <span class="keyword">of</span> str)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(code) <span class="comment">// 𠮷 a b c for of 可以正确识别</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="新的常用方法"><a href="#新的常用方法" class="headerlink" title="新的常用方法"></a>新的常用方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// includes startsWith endsWith</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> str = <span class="string">'string'</span></span><br><span class="line"><span class="built_in">console</span>.log(str.includes(<span class="string">'r'</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(str.startsWith(<span class="string">'s'</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(str.endsWith(<span class="string">'g'</span>)) <span class="comment">// true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// repeat</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> str = <span class="string">'abc'</span></span><br><span class="line"><span class="built_in">console</span>.log(str.repeat(<span class="number">2</span>)) <span class="comment">// abcabc</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//忽略换行</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>.raw<span class="string">`Hi\n<span class="subst">$&#123;<span class="number">1</span>+<span class="number">2</span>&#125;</span>`</span>) Hi\n3</span><br><span class="line"><span class="built_in">console</span>.log(S<span class="string">`Hi\n<span class="subst">$&#123;<span class="number">1</span>+<span class="number">2</span>&#125;</span>`</span>) <span class="comment">// 换行</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// padStart padEnd 这两个还处于草案阶段,要使用babel-polyfill进行编译</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'1'</span>,padStart(<span class="number">2.</span><span class="string">'0'</span>)) <span class="comment">//01 第一个参数是长度，长度不够补0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'1'</span>,padEnd(<span class="number">2.</span><span class="string">'0'</span>)) <span class="comment">//10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="便签-模板字符串-很好用"><a href="#便签-模板字符串-很好用" class="headerlink" title="便签,模板字符串,很好用"></a>便签,模板字符串,很好用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> name=<span class="string">"dou"</span>;</span><br><span class="line"><span class="keyword">let</span> info=<span class="string">"hello"</span>;</span><br><span class="line"><span class="keyword">let</span> m=<span class="string">`i am <span class="subst">$&#123;name&#125;</span>,<span class="subst">$&#123;info&#125;</span>`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(m); <span class="comment">//i am dou, hello</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> user=&#123;</span><br><span class="line">name:<span class="string">'name'</span>,</span><br><span class="line">info:<span class="string">'hello'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(abc<span class="string">`i am <span class="subst">$&#123;user.name&#125;</span>,<span class="subst">$&#123;user.info&#125;</span>`</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">abc</span>(<span class="params">s,v1,v2</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(s,v1,v2);</span><br><span class="line"><span class="keyword">return</span> s+v1+v2</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// i am ,,,dou hello</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数值的扩展"><a href="#数值的扩展" class="headerlink" title="数值的扩展"></a>数值的扩展</h2><ul><li>二进制和八进制表示法</li><li>新增方法</li></ul><h3 id="二进制和八进制表示法"><a href="#二进制和八进制表示法" class="headerlink" title="二进制和八进制表示法"></a>二进制和八进制表示法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="comment">//二进制</span></span><br><span class="line"><span class="built_in">console</span>.log（<span class="number">0b111110111</span>） <span class="comment">//503</span></span><br><span class="line"><span class="comment">//八进制</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0o767</span>) <span class="comment">//503</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="新增方法-常用的"><a href="#新增方法-常用的" class="headerlink" title="新增方法,常用的"></a>新增方法,常用的</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="comment">// 检查是不是有限的 (-2^53,2^53)</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isFinite(<span class="number">1</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isFinite(<span class="literal">NaN</span>)) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isFinite(<span class="number">1</span>/<span class="number">0</span>)) <span class="comment">// false</span></span><br><span class="line"><span class="comment">// 检查是不是NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isNaN(<span class="literal">NaN</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isNaN(<span class="number">0</span>)) <span class="comment">// false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 检查是不是整数</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isInteger(<span class="number">1</span>)) <span class="comment">//true</span></span><br><span class="line"><span class="comment">// 这要注意</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isInteger(<span class="number">1.0</span>)) <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isInteger(<span class="number">1.1</span>)) <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isInteger(<span class="string">'1'</span>)) <span class="comment">//false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 最大和最小安全数值</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.MAX_SAFE_INTEGER)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.MIN_SAFE_INTEGER)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isSafeIntger(<span class="number">1</span>)) <span class="comment">//true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 取整</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.trunc(<span class="number">1.1</span>)) <span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.trunc(<span class="number">1.9</span>)) <span class="comment">//1</span></span><br><span class="line"><span class="comment">//判断一个数到底是正数、负数、还是零</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.sign(<span class="number">-2</span>)) <span class="comment">//-1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.sign(<span class="number">0</span>)) <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.sign(<span class="number">2</span>)) <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.sign(<span class="string">'2'</span>)) <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.sign(<span class="string">'aa'</span>)) <span class="comment">// NaN</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组的扩展"><a href="#数组的扩展" class="headerlink" title="数组的扩展"></a>数组的扩展</h2><h3 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from"></a>Array.from</h3><h3 id="Array-of"><a href="#Array-of" class="headerlink" title="Array.of"></a>Array.of</h3><h3 id="copyeWithin"><a href="#copyeWithin" class="headerlink" title="copyeWithin"></a>copyeWithin</h3><h3 id="find-findIndex"><a href="#find-findIndex" class="headerlink" title="find/findIndex"></a>find/findIndex</h3><h3 id="fill"><a href="#fill" class="headerlink" title="fill"></a>fill</h3><h3 id="entries-keys-values"><a href="#entries-keys-values" class="headerlink" title="entries\keys\values"></a>entries\keys\values</h3><h3 id="includes"><a href="#includes" class="headerlink" title="includes"></a>includes</h3><p><strong>直接看代码</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// Array.of 将一组值，转换为数组</span></span><br><span class="line"><span class="keyword">let</span> arr = <span class="built_in">Array</span>.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr) [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="keyword">let</span> emptyArr = <span class="built_in">Array</span>.of()</span><br><span class="line"><span class="built_in">console</span>.log(emptyArr) <span class="comment">// []</span></span><br><span class="line"><span class="comment">//Array.from 把类数组转为数组</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.from([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> item*<span class="number">2</span> <span class="comment">// 2,4,6</span></span><br><span class="line">&#125;))</span><br><span class="line"><span class="comment">//fill填充 第二个和第三个参数，用于指定填充的起始位置和结束位置</span></span><br><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span>,<span class="string">'a'</span>,<span class="literal">undefined</span>].fill(<span class="number">1</span>)) <span class="comment">//[1,1,1]</span></span><br><span class="line"><span class="built_in">console</span>.log([a,b,c],fill(<span class="number">7</span>,<span class="number">1</span>,<span class="number">3</span>)) <span class="comment">// [a,7,7]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// key values entries</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">of</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].key())&#123;</span><br><span class="line"><span class="built_in">console</span>.log(i) <span class="comment">//0,1,2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//兼容</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].values())&#123;</span><br><span class="line"><span class="built_in">console</span>.log(v) <span class="comment">//1,2,3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> [i,v] <span class="keyword">of</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].entries())&#123;</span><br><span class="line"><span class="built_in">console</span>.log(i,v) <span class="comment">// 0 1 1 2 2 3</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//copyWithin将指定位置的成员复制到其他位置,并返回新数组</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>].copyWithin(<span class="number">0</span>,<span class="number">3</span>,<span class="number">4</span>)) <span class="comment">//[4,2,3,4,5]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//find findIndex 找出第一个符合条件的数组成员</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>].find(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> item&gt;<span class="number">3</span></span><br><span class="line">&#125;)) <span class="comment">// 4 只找一次</span></span><br><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>].findIndex(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> item&gt;<span class="number">3</span></span><br><span class="line">&#125;)) <span class="comment">// 3 只找一次</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// includes 找数组里的值,可以找NaN</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span>,<span class="number">2</span>,<span class="literal">NaN</span>].includes(<span class="number">1</span>)) <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span>,<span class="number">2</span>,<span class="literal">NaN</span>].includes(<span class="literal">NaN</span>)) <span class="comment">//true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数的扩展"><a href="#函数的扩展" class="headerlink" title="函数的扩展"></a>函数的扩展</h2><ul><li>函数参数的默认值</li><li>rest参数</li><li>箭头函数</li><li>尾调用</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数参数的默认值</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">x, y = <span class="string">'world'</span></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'默认值'</span>,x,y);</span><br><span class="line">&#125;</span><br><span class="line">test(<span class="string">'hello'</span>); <span class="comment">// hello world</span></span><br><span class="line"><span class="comment">// 如果传的参数默认值会被替换</span></span><br><span class="line">test(<span class="string">'hello'</span>,<span class="string">'dou'</span>); <span class="comment">//hello dou</span></span><br><span class="line"><span class="comment">// 注意这会带来一个作用域的问题</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x, y = x</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(y);</span><br><span class="line">&#125;</span><br><span class="line">f(<span class="number">2</span>) <span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 设置默认值，会形成一个单独的作用域等到初始化结束，这个作用域就会消失 </span></span><br><span class="line"><span class="keyword">let</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">y = x</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> x = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(y);</span><br><span class="line">&#125;</span><br><span class="line">f() <span class="comment">// 1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// rest参数</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test3</span>(<span class="params">...arg</span>)</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> arg)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'rest'</span>,v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">test3(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="string">'a'</span>) <span class="comment">//1,2,3,4,a</span></span><br><span class="line"><span class="comment">// rest参数会将传入的字符串转化为数组</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//扩展运算符 相当于rest的逆运算=&gt;把数组展开</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">console</span>.log(...[<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>]); <span class="comment">// 1,2,4</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'a'</span>,...[<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>]); <span class="comment">// a,1,2,4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数 不在说了</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> arrow = <span class="function"><span class="params">v</span> =&gt;</span> v*<span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(arrow(<span class="number">1</span>)) <span class="comment">// 2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 尾调用,优化用,不再展开,基本形式如下</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tail</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'tail'</span>,x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fx</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> tail(x)</span><br><span class="line">&#125;</span><br><span class="line">fx(<span class="number">123</span>) <span class="comment">// tail 123</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对象的扩展"><a href="#对象的扩展" class="headerlink" title="对象的扩展"></a>对象的扩展</h2><ul><li>简洁表示法</li><li>属性表达式</li><li>新增API</li><li>扩展运算符</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="comment">// 简洁表示法</span></span><br><span class="line"><span class="keyword">let</span> o=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> k=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">let</span> es5=&#123;</span><br><span class="line">o:o,</span><br><span class="line">k:k</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> es6=&#123;</span><br><span class="line">o,</span><br><span class="line">k</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(es5,es6); <span class="comment">// 是一样的结果</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> es5_method=&#123;</span><br><span class="line">hello:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'hello'</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> es6_method=&#123;</span><br><span class="line">hello()&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'hello'</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(es5_method.hello(),es6_method.hello()); <span class="comment">// 也是一样的,在vue中我们就是用的简洁表示</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 属性表达式</span></span><br><span class="line"><span class="keyword">let</span> a=<span class="string">'b'</span>;</span><br><span class="line"><span class="keyword">let</span> es5_obj=&#123;</span><br><span class="line">a:<span class="string">'c'</span>,</span><br><span class="line">b:<span class="string">'c'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> es6_obj=&#123;</span><br><span class="line">[a]:<span class="string">'c'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(es5_obj,es6_obj) <span class="comment">// es5的就不说了 es6输出 &#123;b:c&#125;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// is</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(<span class="string">'abc'</span>,<span class="string">'abc'</span>),<span class="string">'abc'</span>===<span class="string">'abc'</span>) <span class="comment">// true true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is([],[]),[]===[]); <span class="comment">// false false</span></span><br><span class="line"><span class="comment">// 注意</span></span><br><span class="line">+<span class="number">0</span> === <span class="number">-0</span> <span class="comment">//true</span></span><br><span class="line"><span class="literal">NaN</span> === <span class="literal">NaN</span> <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Object</span>.is(+<span class="number">0</span>, <span class="number">-0</span>) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Object</span>.is(<span class="literal">NaN</span>, <span class="literal">NaN</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//assign</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'拷贝'</span>,<span class="built_in">Object</span>.assign(&#123;<span class="attr">a</span>:<span class="string">'a'</span>&#125;,&#123;<span class="attr">b</span>:<span class="string">'b'</span>&#125;)) <span class="comment">// &#123;a:a,b:b&#125; 注意这是浅拷贝</span></span><br><span class="line"><span class="comment">// entries</span></span><br><span class="line"><span class="keyword">let</span> test=&#123;<span class="attr">k</span>:<span class="number">123</span>,<span class="attr">o</span>:<span class="number">456</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> [key,value] <span class="keyword">of</span> <span class="built_in">Object</span>.entries(test))&#123;</span><br><span class="line"><span class="built_in">console</span>.log([key,value])</span><br><span class="line"><span class="comment">// [k,123] [o,456]</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 扩展运算符</span></span><br><span class="line"><span class="keyword">let</span> &#123;a,b,...c&#125;=&#123;<span class="attr">a</span>:<span class="string">'test'</span>,<span class="attr">b</span>:<span class="string">'kill'</span>,<span class="attr">c</span>:<span class="string">'ddd'</span>,<span class="attr">d</span>:<span class="string">'ccc'</span>&#125;;</span><br><span class="line"><span class="comment">// babel对这个支持还不是很友好</span></span><br><span class="line">c=&#123;</span><br><span class="line">c:<span class="string">'ddd'</span>,</span><br><span class="line">d:<span class="string">'ccc'</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ES6-引入了一种新的原始数据类型Symbol，表示独一无二的值"><a href="#ES6-引入了一种新的原始数据类型Symbol，表示独一无二的值" class="headerlink" title="ES6 引入了一种新的原始数据类型Symbol，表示独一无二的值"></a>ES6 引入了一种新的原始数据类型Symbol，表示独一无二的值</h2><p>这个玩意我觉得没啥用处阿,简单看一下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 声明方式</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 第一种声明方式</span></span><br><span class="line"><span class="keyword">let</span> a1=<span class="built_in">Symbol</span>();</span><br><span class="line"><span class="keyword">let</span> a2=<span class="built_in">Symbol</span>();</span><br><span class="line"><span class="built_in">console</span>.log(a1===a2);</span><br><span class="line"><span class="comment">// false Symbol声明的是独一无二的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种声明方式</span></span><br><span class="line"><span class="keyword">let</span> a3=<span class="built_in">Symbol</span>.for(<span class="string">'a3'</span>);</span><br><span class="line"><span class="keyword">let</span> a4=<span class="built_in">Symbol</span>.for(<span class="string">'a3'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a3===a4);</span><br><span class="line"><span class="comment">// true 都引用的a3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 作为对象的key和symbol的遍历</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> a1=<span class="built_in">Symbol</span>.for(<span class="string">'abc'</span>);</span><br><span class="line"><span class="keyword">let</span> obj=&#123;</span><br><span class="line">[a1]:<span class="string">'123'</span>,</span><br><span class="line"><span class="string">'abc'</span>:<span class="number">345</span>,</span><br><span class="line"><span class="string">'c'</span>:<span class="number">456</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// 三个值,放控制台打印一下.这里就不写了</span></span><br><span class="line"><span class="comment">// 注意 for of 遍历找不到symbol的值</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> [key,value] <span class="keyword">of</span> <span class="built_in">Object</span>.entries(obj))&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'let of'</span>,key,value);</span><br><span class="line"><span class="comment">// abc:345 c:456</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Object.getOwnPropertySymbols只可以找到symbol</span></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertySymbols(obj).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(obj[item]);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// Reflect这个玩意 啥都可以找到</span></span><br><span class="line"><span class="built_in">Reflect</span>.ownKeys(obj).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'ownkeys'</span>,item,obj[item]);</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="新增数据结构Set-和-Map"><a href="#新增数据结构Set-和-Map" class="headerlink" title="新增数据结构Set 和 Map"></a>新增数据结构Set 和 Map</h2><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><p>Set和数组类似,但是成员唯一</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明方式1</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> list = <span class="keyword">new</span> <span class="built_in">Set</span>()</span><br><span class="line">list.add(<span class="number">5</span>)</span><br><span class="line">list.add(<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(list.size) <span class="comment">// 2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明方式2</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">let</span> list = <span class="keyword">new</span> <span class="built_in">Set</span>(arr)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(list.size) <span class="comment">// 5</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不可以有重复的成员</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> list = <span class="keyword">new</span> <span class="built_in">Set</span>()</span><br><span class="line">list.add(<span class="number">1</span>)</span><br><span class="line">list.add(<span class="number">2</span>)</span><br><span class="line">list.add(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(list); <span class="comment">// 只有 1,2</span></span><br><span class="line"><span class="comment">// 用途 数组去重</span></span><br><span class="line"><span class="keyword">let</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"><span class="keyword">let</span> list2=<span class="keyword">new</span> <span class="built_in">Set</span>(arr)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(list2) <span class="comment">// 1,2,3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// api crud 不再多说 看栗子</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> arr=[<span class="string">'add'</span>,<span class="string">'delete'</span>,<span class="string">'clear'</span>,<span class="string">'has'</span>]</span><br><span class="line"><span class="keyword">let</span> list=<span class="keyword">new</span> <span class="built_in">Set</span>(arr)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'has'</span>,list.has(<span class="string">'add'</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'delete'</span>,list.delete(<span class="string">'add'</span>),list) <span class="comment">// 'delete','clear','has'</span></span><br><span class="line">list.clear() <span class="comment">// 没了都删了</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'list'</span>,list)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历 都是我们常用的</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> arr=[<span class="string">'add'</span>,<span class="string">'delete'</span>,<span class="string">'clear'</span>,<span class="string">'has'</span>]</span><br><span class="line"><span class="keyword">let</span> list=<span class="keyword">new</span> <span class="built_in">Set</span>(arr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">of</span> list.keys())&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'keys'</span>,key)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> value <span class="keyword">of</span> list.values())&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'value'</span>,value)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> [key,value] <span class="keyword">of</span> list.entries())&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'entries'</span>,key,value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">list.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;<span class="built_in">console</span>.log(item)&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// weakSet 这玩意成员只能是对象,Set有的方法他都有</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> weakList=<span class="keyword">new</span> <span class="built_in">WeakSet</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arg=&#123;&#125;</span><br><span class="line"></span><br><span class="line">weakList.add(arg)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(weakList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明方式</span></span><br><span class="line"><span class="comment">// map的key可以是任意数据类型</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line"><span class="keyword">let</span> arr=[<span class="string">'123'</span>]</span><br><span class="line"></span><br><span class="line">map.set(arr,<span class="number">456</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'map'</span>,map,map.get(arr)) <span class="comment">// 456</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 常用api,和set很类似,放控制台打印就明白</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">'a'</span>,<span class="number">123</span>],[<span class="string">'b'</span>,<span class="number">456</span>]])</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'map'</span>,map)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'size'</span>,map.size)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'delete'</span>,map.delete(<span class="string">'a'</span>),map)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'clear'</span>,map.clear(),map)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// weakmap 和weakSet一样 成员必须是对象</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> weakmap=<span class="keyword">new</span> <span class="built_in">WeakMap</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> o=&#123;&#125;</span><br><span class="line">weakmap.set(o,<span class="number">123</span>)</span><br><span class="line"><span class="built_in">console</span>.log(weakmap.get(o))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Set-Map和数组-对象的横向对比"><a href="#Set-Map和数组-对象的横向对比" class="headerlink" title="Set,Map和数组,对象的横向对比"></a>Set,Map和数组,对象的横向对比</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="comment">// map和array的对比</span></span><br><span class="line"><span class="comment">// 数据结构横向对比，增，查，改，删</span></span><br><span class="line"><span class="keyword">let</span> map=<span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line"><span class="keyword">let</span> array=[]</span><br><span class="line"><span class="comment">// 增</span></span><br><span class="line">map.set(<span class="string">'t'</span>,<span class="number">1</span>)</span><br><span class="line">array.push(&#123;<span class="attr">t</span>:<span class="number">1</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">'map-array'</span>,map,array)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查</span></span><br><span class="line"><span class="keyword">let</span> map_exist=map.has(<span class="string">'t'</span>);</span><br><span class="line"><span class="keyword">let</span> array_exist=array.find(<span class="function"><span class="params">item</span>=&gt;</span>item.t)</span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">'map-array'</span>,map_exist,array_exist)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改</span></span><br><span class="line">map.set(<span class="string">'t'</span>,<span class="number">2</span>)</span><br><span class="line">array.forEach(<span class="function"><span class="params">item</span>=&gt;</span>item.t?item.t=<span class="number">2</span>:<span class="string">''</span>)</span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">'map-array-modify'</span>,map,array)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删</span></span><br><span class="line">map.delete(<span class="string">'t'</span>)</span><br><span class="line"><span class="keyword">let</span> index=array.findIndex(<span class="function"><span class="params">item</span>=&gt;</span>item.t)</span><br><span class="line">array.splice(index,<span class="number">1</span>)</span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">'map-array-empty'</span>,map,array)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// set和array的对比</span></span><br><span class="line"><span class="keyword">let</span> set=<span class="keyword">new</span> <span class="built_in">Set</span>()</span><br><span class="line"><span class="keyword">let</span> array=[]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 增</span></span><br><span class="line">set.add(&#123;<span class="attr">t</span>:<span class="number">1</span>&#125;)</span><br><span class="line">array.push(&#123;<span class="attr">t</span>:<span class="number">1</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">'set-array'</span>,set,array)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查</span></span><br><span class="line"><span class="keyword">let</span> set_exist=set.has(&#123;<span class="attr">t</span>:<span class="number">1</span>&#125;)</span><br><span class="line"><span class="keyword">let</span> array_exist=array.find(<span class="function"><span class="params">item</span>=&gt;</span>item.t)</span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">'set-array'</span>,set_exist,array_exist)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改</span></span><br><span class="line">set.forEach(<span class="function"><span class="params">item</span>=&gt;</span>item.t?item.t=<span class="number">2</span>:<span class="string">''</span>)</span><br><span class="line">array.forEach(<span class="function"><span class="params">item</span>=&gt;</span>item.t?item.t=<span class="number">2</span>:<span class="string">''</span>)</span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">'set-array-modify'</span>,set,array)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删</span></span><br><span class="line">set.forEach(<span class="function"><span class="params">item</span>=&gt;</span>item.t?set.delete(item):<span class="string">''</span>)</span><br><span class="line"><span class="keyword">let</span> index=array.findIndex(<span class="function"><span class="params">item</span>=&gt;</span>item.t)</span><br><span class="line">array.splice(index,<span class="number">1</span>)</span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">'set-array-empty'</span>,set,array)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// map,set,object对比</span></span><br><span class="line"><span class="keyword">let</span> item=&#123;<span class="attr">t</span>:<span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">let</span> map=<span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line"><span class="keyword">let</span> set=<span class="keyword">new</span> <span class="built_in">Set</span>()</span><br><span class="line"><span class="keyword">let</span> obj=&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 增</span></span><br><span class="line">map.set(<span class="string">'t'</span>,<span class="number">1</span>)</span><br><span class="line">set.add(item)</span><br><span class="line">obj[<span class="string">'t'</span>]=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">'map-set-obj'</span>,obj,map,set)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查</span></span><br><span class="line"><span class="built_in">console</span>.info(&#123;</span><br><span class="line">map_exist:map.has(<span class="string">'t'</span>),</span><br><span class="line">set_exist:set.has(item),</span><br><span class="line">obj_exist:<span class="string">'t'</span> <span class="keyword">in</span> obj</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改</span></span><br><span class="line">map.set(<span class="string">'t'</span>,<span class="number">2</span>)</span><br><span class="line">item.t=<span class="number">2</span></span><br><span class="line">obj[<span class="string">'t'</span>]=<span class="number">2</span></span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">'map-set-obj-modify'</span>,obj,map,set)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除</span></span><br><span class="line">map.delete(<span class="string">'t'</span>)</span><br><span class="line">set.delete(item)</span><br><span class="line"><span class="keyword">delete</span> obj[<span class="string">'t'</span>]</span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">'map-set-obj-empty'</span>,obj,map,set)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>简单总结</em></strong><br>对比看来,map占有优势,所以我们应该优先使用map,使用建议 map=&gt;set=&gt;array</p><h2 id="Proxy和Reflect"><a href="#Proxy和Reflect" class="headerlink" title="Proxy和Reflect"></a>Proxy和Reflect</h2><h3 id="Proxy可以理解成一个拦截器-直接看栗子"><a href="#Proxy可以理解成一个拦截器-直接看栗子" class="headerlink" title="Proxy可以理解成一个拦截器,直接看栗子"></a>Proxy可以理解成一个拦截器,直接看栗子</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Proxy</span></span><br><span class="line"><span class="comment">// 先定义一个对象</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> obj=&#123;</span><br><span class="line">time:<span class="string">'2017-09-11'</span>,</span><br><span class="line">name:<span class="string">'dou'</span>,</span><br><span class="line">_r:<span class="number">123</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 声明一个Proxy</span></span><br><span class="line"><span class="keyword">let</span> monitor=<span class="keyword">new</span> <span class="built_in">Proxy</span>(obj,&#123;</span><br><span class="line"><span class="comment">// 拦截对象属性的读取</span></span><br><span class="line">get(target,key)&#123;</span><br><span class="line"><span class="keyword">return</span> target[key].replace(<span class="string">'2017'</span>,<span class="string">'2018'</span>)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 拦截对象设置属性</span></span><br><span class="line">set(target,key,value)&#123;</span><br><span class="line"><span class="keyword">if</span>(key===<span class="string">'name'</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> target[key]=value</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> target[key]</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 拦截key in object操作</span></span><br><span class="line">has(target,key)&#123;</span><br><span class="line"><span class="keyword">if</span>(key===<span class="string">'name'</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> target[key]</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 拦截delete</span></span><br><span class="line">deleteProperty(target,key)&#123;</span><br><span class="line"><span class="keyword">if</span>(key.indexOf(<span class="string">'_'</span>)&gt;<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="keyword">delete</span> target[key]</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> target[key]</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 拦截Object.keys,Object.getOwnPropertySymbols,Object.getOwnPropertyNames</span></span><br><span class="line">ownKeys(target)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Object</span>.keys(target).filter(<span class="function"><span class="params">item</span>=&gt;</span>item!=<span class="string">'time'</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// api</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'get'</span>,monitor.time) <span class="comment">// 2018-09-11</span></span><br><span class="line"></span><br><span class="line">monitor.time=<span class="string">'2018'</span>;</span><br><span class="line">monitor.name=<span class="string">'zhi'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'set'</span>,monitor.time,monitor);</span><br><span class="line"><span class="comment">// 2018-09-11 time: "2017-09-11", name: "zhi", _r: 123</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'has'</span>,<span class="string">'name'</span> <span class="keyword">in</span> monitor,<span class="string">'time'</span> <span class="keyword">in</span> monitor); <span class="comment">// true false</span></span><br><span class="line"><span class="comment">// time 是删不掉的,因为我们上面设置了只可以删除_开始的</span></span><br><span class="line"><span class="keyword">delete</span> monitor.time</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'delete'</span>,monitor)</span><br><span class="line"><span class="comment">// time: "2017-09-11", name: "zhi", _r: 123</span></span><br><span class="line"><span class="keyword">delete</span> monitor._r</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'delete'</span>,monitor)</span><br><span class="line"><span class="comment">// time: "2017-09-11", name: "zhi"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'ownKeys'</span>,<span class="built_in">Object</span>.keys(monitor)) <span class="comment">// ["name"]</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Reflect"><a href="#Reflect" class="headerlink" title="Reflect"></a>Reflect</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> obj=&#123;</span><br><span class="line">time:<span class="string">'2017-03-11'</span>,</span><br><span class="line">name:<span class="string">'net'</span>,</span><br><span class="line">_r:<span class="number">123</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Reflect get'</span>,<span class="built_in">Reflect</span>.get(obj,<span class="string">'time'</span>)) <span class="comment">// 2017-03-11</span></span><br><span class="line"><span class="built_in">Reflect</span>.set(obj,<span class="string">'name'</span>,<span class="string">'zhi'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// time: "2017-03-11", name: "zhi", _r: 123</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'has'</span>,<span class="built_in">Reflect</span>.has(obj,<span class="string">'name'</span>)) <span class="comment">//true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 撸一个例子</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">validator</span>(<span class="params">target,validator</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Proxy</span>(target,&#123;</span><br><span class="line">_validator:validator,</span><br><span class="line">set(target,key,value,proxy)&#123;</span><br><span class="line"><span class="keyword">if</span>(target.hasOwnProperty(key))&#123;</span><br><span class="line"><span class="keyword">let</span> va=<span class="keyword">this</span>._validator[key];</span><br><span class="line"><span class="keyword">if</span>(!!va(value))&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Reflect</span>.set(target,key,value,proxy)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">`不能设置<span class="subst">$&#123;key&#125;</span>到<span class="subst">$&#123;value&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">`<span class="subst">$&#123;key&#125;</span> 不存在`</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> personValidators=&#123;</span><br><span class="line">name(val)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">typeof</span> val===<span class="string">'string'</span></span><br><span class="line">&#125;,</span><br><span class="line">age(val)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">typeof</span> val === <span class="string">'number'</span> &amp;&amp; val&gt;<span class="number">18</span></span><br><span class="line">&#125;,</span><br><span class="line">mobile(val)&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(name,age)&#123;</span><br><span class="line"><span class="keyword">this</span>.name=name</span><br><span class="line"><span class="keyword">this</span>.age=age</span><br><span class="line"><span class="keyword">this</span>.mobile=<span class="string">'1111'</span></span><br><span class="line"><span class="keyword">return</span> validator(<span class="keyword">this</span>,personValidators)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person=<span class="keyword">new</span> Person(<span class="string">'lilei'</span>,<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.info(person) <span class="comment">// name: "lilei", age: 30, mobile: "1111"</span></span><br><span class="line"></span><br><span class="line">person.name=<span class="string">'Han mei mei'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.info(person) <span class="comment">// name: "Han mei mei", age: 30, mobile: "1111"</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="comment">// 基本定义和生成实例</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(name='dou')&#123;</span><br><span class="line"><span class="keyword">this</span>.name=name</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> v_parent=<span class="keyword">new</span> Parent(<span class="string">'v'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'构造函数和实例'</span>,v_parent); <span class="comment">// &#123;name:v&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(name='zhi')&#123;</span><br><span class="line"><span class="keyword">this</span>.name=name</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'继承'</span>,<span class="keyword">new</span> Child()) <span class="comment">// zhi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 继承传递参数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(name='wei')&#123;</span><br><span class="line"><span class="keyword">this</span>.name=name</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(name='child')&#123;</span><br><span class="line"><span class="comment">// 这里要注意了 这个super必须要写在第一行,如果子类有自己的属性,不写在第一行就报错</span></span><br><span class="line"><span class="keyword">super</span>(name)</span><br><span class="line"><span class="keyword">this</span>.type=<span class="string">'child'</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'继承传递参数'</span>,<span class="keyword">new</span> Child(<span class="string">'hello'</span>)) <span class="comment">// &#123; name: 'hello', type: 'child' &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// getter,setter</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(name='wei')&#123;</span><br><span class="line"><span class="keyword">this</span>.name=name</span><br><span class="line">&#125;</span><br><span class="line">get longName()&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">'mk'</span>+<span class="keyword">this</span>.name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">set longName(value)&#123;</span><br><span class="line"><span class="keyword">this</span>.name=value</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> v=<span class="keyword">new</span> Parent();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'getter'</span>,v.longName) <span class="comment">// mkwei</span></span><br><span class="line">v.longName=<span class="string">'hello'</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'setter'</span>,v.longName) <span class="comment">// mkhello</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 静态方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(name='dou')&#123;</span><br><span class="line"><span class="keyword">this</span>.name=name</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> tell()&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'tell'</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Parent.tell() <span class="comment">// tell</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 静态属性</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(name='zhi')&#123;</span><br><span class="line"><span class="keyword">this</span>.name=name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> tell()&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'tell'</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Parent.type=<span class="string">'test'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'静态属性'</span>,Parent.type) <span class="comment">// test</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="comment">// es5和es6异步操作对比</span></span><br><span class="line"><span class="comment">//es5 通过回掉方式</span></span><br><span class="line"><span class="keyword">let</span> ajax=<span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'执行'</span>)</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">callback&amp;&amp;callback.call()</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;;</span><br><span class="line">ajax(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'timeout1'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 执行 timeout1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// es6通过promise</span></span><br><span class="line"><span class="keyword">let</span> ajax=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'执行2'</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">resolve()</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ajax().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'promise'</span>,<span class="string">'timeout2'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 执行 timeout2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 链式调用</span></span><br><span class="line"><span class="keyword">let</span> ajax=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'执行3'</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">resolve()</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ajax()</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">resolve()</span><br><span class="line">&#125;, <span class="number">2000</span>)</span><br><span class="line">&#125;);</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'timeout3'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 错误处理</span></span><br><span class="line"><span class="keyword">let</span> ajax=<span class="function"><span class="keyword">function</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'执行4'</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(num&gt;<span class="number">5</span>)&#123;</span><br><span class="line">resolve()</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'出错了'</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ajax(<span class="number">6</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'log'</span>,<span class="number">6</span>)</span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'catch'</span>,err)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">ajax(<span class="number">3</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'log'</span>,<span class="number">3</span>)</span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'catch'</span>,err)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 执行4 执行4 log 6 报错</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// all 和 race</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 所有图片加载完再添加到页面</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadImg</span>(<span class="params">src</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">let</span> img=<span class="built_in">document</span>.createElement(<span class="string">'img'</span>)</span><br><span class="line">img.src=src</span><br><span class="line">img.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">resolve(img)</span><br><span class="line">&#125;</span><br><span class="line">img.onerror=<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">reject(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showImgs</span>(<span class="params">imgs</span>)</span>&#123;</span><br><span class="line">imgs.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">img</span>)</span>&#123;</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(img)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all([</span><br><span class="line">loadImg(<span class="string">'df1ef0720bea6832.png'</span>),</span><br><span class="line">loadImg(<span class="string">'http://i4.buimg.com/5677501/2b07ee25b08930ba.png'</span>),</span><br><span class="line">loadImg(<span class="string">'http://baidu.com/567751/5eb8190d6b2a1c9c.png'</span>)</span><br><span class="line">]).then(showImgs)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 有一个图片加载完就添加到页面</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadImg</span>(<span class="params">src</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">let</span> img=<span class="built_in">document</span>.createElement(<span class="string">'img'</span>)</span><br><span class="line">img.src=src</span><br><span class="line">img.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">resolve(img)</span><br><span class="line">&#125;</span><br><span class="line">img.onerror=<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">reject(err);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showImgs</span>(<span class="params">img</span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> p=<span class="built_in">document</span>.createElement(<span class="string">'p'</span>)</span><br><span class="line">p.appendChild(img);</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(p)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.race([</span><br><span class="line">loadImg(<span class="string">'http://i4.buimg.com/567571/df1ef0720bea6832.png'</span>),</span><br><span class="line">loadImg(<span class="string">'http://i4.buimg.com/567751/2b07ee25b08930ba.png'</span>),</span><br><span class="line">loadImg(<span class="string">'http://i2.muimg.com/567751/5eb8190d6b2a1c9c.png'</span>)</span><br><span class="line">]).then(showImgs)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Iterator接口"><a href="#Iterator接口" class="headerlink" title="Iterator接口"></a>Iterator接口</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> arr=[<span class="string">'hello'</span>,<span class="string">'world'</span>]</span><br><span class="line"><span class="comment">// 数组的Iterator,自带的</span></span><br><span class="line"><span class="keyword">let</span> map=arr[<span class="built_in">Symbol</span>.iterator]()</span><br><span class="line"><span class="built_in">console</span>.log(map.next())</span><br><span class="line"><span class="built_in">console</span>.log(map.next())</span><br><span class="line"><span class="built_in">console</span>.log(map.next())</span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">&#123; <span class="attr">value</span>: <span class="string">'hello'</span>, <span class="attr">done</span>: <span class="literal">false</span> &#125;</span><br><span class="line">&#123; <span class="attr">value</span>: <span class="string">'world'</span>, <span class="attr">done</span>: <span class="literal">false</span> &#125;</span><br><span class="line">&#123; <span class="attr">value</span>: <span class="literal">undefined</span>, <span class="attr">done</span>: <span class="literal">true</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义Iterator接口</span></span><br><span class="line"><span class="comment">// 之所以对象没有部署Iterator接口,是因为不知道我们在对象你存什么,这时候我们自己定义就可以</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> obj=&#123;</span><br><span class="line">start:[<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>],</span><br><span class="line">end:[<span class="number">7</span>,<span class="number">9</span>,<span class="number">8</span>],</span><br><span class="line"><span class="comment">// 这里好好看一下</span></span><br><span class="line">[<span class="built_in">Symbol</span>.iterator]()&#123;</span><br><span class="line"><span class="keyword">let</span> self=<span class="keyword">this</span></span><br><span class="line"><span class="keyword">let</span> index=<span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> arr=self.start.concat(self.end)</span><br><span class="line"><span class="keyword">let</span> len=arr.length</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">next()&#123;</span><br><span class="line"><span class="keyword">if</span>(index&lt;len)&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="comment">// 返回是 value 和 done</span></span><br><span class="line">value:arr[index++],</span><br><span class="line">done:<span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">value:arr[index++],</span><br><span class="line">done:<span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">of</span> obj)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(key) <span class="comment">// 123798</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="genertaor函数"><a href="#genertaor函数" class="headerlink" title="genertaor函数"></a>genertaor函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="comment">// genertaor基本定义</span></span><br><span class="line"><span class="keyword">let</span> tell=<span class="function"><span class="keyword">function</span>* (<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">yield</span> <span class="string">'a'</span></span><br><span class="line"><span class="keyword">yield</span> <span class="string">'b'</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">'c'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> k=tell()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(k.next()) <span class="comment">// &#123;value: "a", done: false&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(k.next()) <span class="comment">// &#123;value: "b", done: false&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(k.next()) <span class="comment">// &#123;value: "c", done: true&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(k.next()) <span class="comment">// &#123;value: undefined, done: true&#125;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用genertaor来部署iterator接口,在说iterator接口的时候,也自定义过,比较一下</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> obj=&#123;&#125;;</span><br><span class="line">obj[<span class="built_in">Symbol</span>.iterator]=<span class="function"><span class="keyword">function</span>* (<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line"><span class="keyword">yield</span> <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> value <span class="keyword">of</span> obj)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(value)<span class="comment">// 1 2 3</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现无限轮询</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> state=<span class="function"><span class="keyword">function</span>* (<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">yield</span> <span class="string">'A'</span></span><br><span class="line"><span class="keyword">yield</span> <span class="string">'B'</span></span><br><span class="line"><span class="keyword">yield</span> <span class="string">'C'</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> status=state()</span><br><span class="line"><span class="built_in">console</span>.log(status.next()) <span class="comment">// A</span></span><br><span class="line"><span class="built_in">console</span>.log(status.next()) <span class="comment">// B</span></span><br><span class="line"><span class="built_in">console</span>.log(status.next()) <span class="comment">// C</span></span><br><span class="line"><span class="built_in">console</span>.log(status.next()) <span class="comment">// A</span></span><br><span class="line"><span class="built_in">console</span>.log(status.next()) <span class="comment">// B</span></span><br><span class="line"><span class="comment">// 如果一直调用next方法 会无限轮询</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// sync和genertaor 使用方法一样</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">// let state=async function ()&#123;</span></span><br><span class="line"><span class="comment">// while(1)&#123;</span></span><br><span class="line"><span class="comment">// await 'A';</span></span><br><span class="line"><span class="comment">// await 'B';</span></span><br><span class="line"><span class="comment">// await 'C';</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// let status=state();</span></span><br><span class="line"><span class="comment">// console.log(status.next());</span></span><br><span class="line"><span class="comment">// console.log(status.next());</span></span><br><span class="line"><span class="comment">// console.log(status.next());</span></span><br><span class="line"><span class="comment">// console.log(status.next());</span></span><br><span class="line"><span class="comment">// console.log(status.next());</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 整两个栗子</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽奖</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> draw=<span class="function"><span class="keyword">function</span>(<span class="params">count</span>)</span>&#123;</span><br><span class="line"><span class="comment">//具体抽奖逻辑</span></span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">`剩余<span class="subst">$&#123;count&#125;</span>次`</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> residue=<span class="function"><span class="keyword">function</span>* (<span class="params">count</span>)</span>&#123;</span><br><span class="line"><span class="keyword">while</span> (count&gt;<span class="number">0</span>) &#123;</span><br><span class="line">count--;</span><br><span class="line"><span class="keyword">yield</span> draw(count);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> star=residue(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">let</span> btn=<span class="built_in">document</span>.createElement(<span class="string">'button'</span>)</span><br><span class="line">btn.id=<span class="string">'start'</span></span><br><span class="line">btn.textContent=<span class="string">'抽奖'</span></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(btn)</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'start'</span>).addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">star.next();</span><br><span class="line">&#125;,<span class="literal">false</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 长轮询</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> ajax=<span class="function"><span class="keyword">function</span>* (<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">yield</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">resolve(&#123;<span class="attr">code</span>:<span class="number">0</span>&#125;)</span><br><span class="line">&#125;, <span class="number">200</span>);</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pull=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> genertaor=ajax()</span><br><span class="line"><span class="keyword">let</span> step=genertaor.next()</span><br><span class="line">step.value.then(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(d.code!=<span class="number">0</span>)&#123;</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">'wait'</span>)</span><br><span class="line">pull()</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.info(d)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pull();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Decorator"><a href="#Decorator" class="headerlink" title="Decorator"></a>Decorator</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法的修饰</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> readonly=<span class="function"><span class="keyword">function</span>(<span class="params">target,name,descriptor</span>)</span>&#123;</span><br><span class="line">descriptor.writable=<span class="literal">false</span></span><br><span class="line"><span class="keyword">return</span> descriptor</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">@readonly</span><br><span class="line">time()&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">'2017-03-11'</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> test=<span class="keyword">new</span> Test()</span><br><span class="line"><span class="built_in">console</span>.log(test.time());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// class 的修饰</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 加一个静态属性</span></span><br><span class="line"><span class="keyword">let</span> typename=<span class="function"><span class="keyword">function</span>(<span class="params">target,name,descriptor</span>)</span>&#123;</span><br><span class="line">target.myname=<span class="string">'hello'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@typename</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'类修饰符'</span>,Test.myname);</span><br><span class="line"><span class="comment">// 第三方库修饰器的js库已经为我们写好了跟多的修饰器</span></span><br><span class="line"><span class="comment">// core-decorators; npm install core-decorators</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 来个栗子 实现业务和逻辑的分离</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> log=<span class="function">(<span class="params">type</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target,name,descriptor</span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> src_method=descriptor.value</span><br><span class="line">descriptor.value=<span class="function">(<span class="params">...arg</span>)=&gt;</span>&#123;</span><br><span class="line">src_method.apply(target,arg)</span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">`log <span class="subst">$&#123;type&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AD</span></span>&#123;</span><br><span class="line">@log(<span class="string">'show'</span>)</span><br><span class="line">show()&#123;</span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">'ad is show'</span>)</span><br><span class="line">&#125;</span><br><span class="line">@log(<span class="string">'click'</span>)</span><br><span class="line">click()&#123;</span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">'ad is click'</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ad=<span class="keyword">new</span> AD()</span><br><span class="line">ad.show()</span><br><span class="line">ad.click()</span><br><span class="line">ad is show</span><br><span class="line">log show</span><br><span class="line">ad is click</span><br><span class="line">log click</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;let和const&quot;&gt;&lt;a href=&quot;#let和const&quot; class=&quot;headerlink&quot; title=&quot;let和const&quot;&gt;&lt;/a&gt;let和const&lt;/h2&gt;&lt;h3 id=&quot;作用域的概念&quot;&gt;&lt;a href=&quot;#作用域的概念&quot; class=&quot;headerlink&quot; title=&quot;作用域的概念&quot;&gt;&lt;/a&gt;作用域的概念&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;在es5中只有全局作用域和函数作用域&lt;/li&gt;
&lt;li&gt;在es6中新增块作用域&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;如何使用let和const&quot;&gt;&lt;a href=&quot;#如何使用let和const&quot; class=&quot;headerlink&quot; title=&quot;如何使用let和const&quot;&gt;&lt;/a&gt;如何使用let和const&lt;/h3&gt;&lt;p&gt;直接看代码&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;let&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 块作用域&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i&amp;lt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;; i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(i) &lt;span class=&quot;comment&quot;&gt;//1 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(i) &lt;span class=&quot;comment&quot;&gt;// ReferenceError 这里为啥会报这个错误呢&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt;声明的是块作用域&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2.&lt;/span&gt;这里找不到i应该报&lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt;的啊，因为在es6中强制使用严格模式，变量未定义直接引用就会报引用异常。也就是说自动使用了&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&#39;use strict&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 不能重复定义&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// 会报Duplicate declaration这个错误，因为let声明的变量不能重复定义&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="ES6" scheme="http://douzhiwei.top/categories/ES6/"/>
    
    
      <category term="ES6" scheme="http://douzhiwei.top/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>mvvm</title>
    <link href="http://douzhiwei.top/2018/03/20/mvvm-vue/"/>
    <id>http://douzhiwei.top/2018/03/20/mvvm-vue/</id>
    <published>2018-03-20T13:03:24.000Z</published>
    <updated>2018-03-27T03:52:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>要说mvvm那得先从这几个方面说起</p><h2 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h2><p>做过后端的都知道mvc,mvvm也是从mvc演变而来,看几个图就明白了</p><p><img src="/2018/03/20/mvvm-vue/mvc-01.png" alt=""></p><ul><li>M - Model 数据</li><li>V - View 视图、界面</li><li>C - Controller 控制器、逻辑处理</li></ul><a id="more"></a><p><strong>mvc一般都是这样流转的,也有mpc等等,在这就说mvc了</strong></p><p><img src="/2018/03/20/mvvm-vue/mvc-02.png" alt=""></p><ol><li>用户操作view,也就是页面</li><li>触发Controller</li><li>Controller改变Model的数据</li><li>View发生变化</li></ol><h2 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h2><ul><li>Model - 模型、数据</li><li>View - 视图、模板（视图和模型是分离的）</li><li>ViewModel - 连接 Model 和 View </li></ul><p>先看一下官方给的图</p><p><img src="/2018/03/20/mvvm-vue/mvvm-01.png" alt=""></p><p>看一个代码实例</p><p><img src="/2018/03/20/mvvm-vue/mvvm-02.png" alt=""></p><p>其实vm就是view和model的桥</p><p><strong>mvvm一般是这样流转的</strong></p><ol><li>用户操作view,vm会检测到然后改变model</li><li>model变化 直接影响view</li><li>vm 发生变法,model和view豆跟着变化</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;要说mvvm那得先从这几个方面说起&lt;/p&gt;
&lt;h2 id=&quot;MVC&quot;&gt;&lt;a href=&quot;#MVC&quot; class=&quot;headerlink&quot; title=&quot;MVC&quot;&gt;&lt;/a&gt;MVC&lt;/h2&gt;&lt;p&gt;做过后端的都知道mvc,mvvm也是从mvc演变而来,看几个图就明白了&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2018/03/20/mvvm-vue/mvc-01.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;M - Model 数据&lt;/li&gt;
&lt;li&gt;V - View 视图、界面&lt;/li&gt;
&lt;li&gt;C - Controller 控制器、逻辑处理&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://douzhiwei.top/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="vue" scheme="http://douzhiwei.top/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>自己写一个Promise</title>
    <link href="http://douzhiwei.top/2018/03/19/Promise/"/>
    <id>http://douzhiwei.top/2018/03/19/Promise/</id>
    <published>2018-03-19T09:08:07.000Z</published>
    <updated>2018-03-26T07:39:39.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h1><p>Promise对象代表一个异步操作，有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Promise</span>(<span class="params">excutor</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> self = <span class="keyword">this</span></span><br><span class="line">  self.status = <span class="string">'pending'</span></span><br><span class="line">  self.value = <span class="literal">null</span></span><br><span class="line">  self.reason = <span class="literal">null</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (self.status === <span class="string">'pending'</span>) &#123;</span><br><span class="line">      self.value = value</span><br><span class="line">      self.status = <span class="string">'fulfilled'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">reject</span>(<span class="params">reason</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (self.status === <span class="string">'pending'</span>) &#123;</span><br><span class="line">      self.reason = reason</span><br><span class="line">      self.status = <span class="string">'rejected'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    excutor(resolve, reject)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    reject(err)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Promise接收一个函数作为参数，该函数有两个参数，一个是resolve，表示成功时执行的函数，一个是reject，表示失败失败时执行的函数。resolve执行时传入的参数会作为then方法中第一个函数的参数，reject执行传入的参数会作为then方法中第二函数的参数。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.prototype.then = <span class="function"><span class="keyword">function</span> (<span class="params">onFulfilled, onRejected</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> self = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">if</span> (self.status === <span class="string">'fulfilled'</span>) &#123;</span><br><span class="line">    onFulfilled(self.value)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (self.status === <span class="string">'rejected'</span>) &#123;</span><br><span class="line">    onRejected(self.reason)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Promise中常常会写一些异步代码，等到异步操作执行完成才会触发resolve或者reject函数，当执行then方法的时候此时的状态还是初始的pending状态，所以为了能取到值，我们可以通过发布订阅模式来写。</p><a id="more"></a><h2 id="基本调用"><a href="#基本调用" class="headerlink" title="基本调用"></a>基本调用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Promise</span>(<span class="params">excutor</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> self = <span class="keyword">this</span></span><br><span class="line">  self.status = <span class="string">'pending'</span></span><br><span class="line">  self.value = <span class="literal">null</span></span><br><span class="line">  self.reason = <span class="literal">null</span></span><br><span class="line">  self.onFulfilledCallbacks = []</span><br><span class="line">  self.onRejectedCallbacks = []</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (self.status === <span class="string">'pending'</span>) &#123;</span><br><span class="line">      self.value = value</span><br><span class="line">      self.status = <span class="string">'fulfilled'</span></span><br><span class="line">      self.onFulfilledCallbacks.forEach(<span class="function"><span class="params">item</span> =&gt;</span> item(self.value))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">reject</span>(<span class="params">reason</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (self.status === <span class="string">'pending'</span>) &#123;</span><br><span class="line">      self.reason = reason</span><br><span class="line">      self.status = <span class="string">'rejected'</span></span><br><span class="line">      self.onRejectedCallbacks.forEach(<span class="function"><span class="params">item</span> =&gt;</span> item(self.reason))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    excutor(resolve, reject)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    reject(err)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.prototype.then = <span class="function"><span class="keyword">function</span> (<span class="params">onFulfilled, onRejected</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> self = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">if</span> (self.status === <span class="string">'fulfilled'</span>) &#123;</span><br><span class="line">    onFulfilled(self.value)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (self.status === <span class="string">'rejected'</span>) &#123;</span><br><span class="line">    onRejected(self.reason)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (self.status === <span class="string">'pending'</span>) &#123;</span><br><span class="line">    self.onFulfilledCallbacks.push(onFulfilled)</span><br><span class="line">    self.onRejectedCallbacks.push(onRejected)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们都知道Promise有一个特点，就是链式调用，当执行then完成后可以继续执行then方法，其实他的原理就是通过返回一个新的Promise实现的，那么then方法中的代码就可以写成下面这样<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.prototype.then = <span class="function"><span class="keyword">function</span> (<span class="params">onFulfilled, onRejected</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> self = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">if</span> (self.status === <span class="string">'fulfilled'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      onFulfilled(self.value)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (self.status === <span class="string">'rejected'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      onRejected(self.reason)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (self.status === <span class="string">'pending'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      self.onFulfilledCallbacks.push(onFulfilled)</span><br><span class="line">      self.onRejectedCallbacks.push(onRejected)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>then方法接收的两个函数中，可以通过return把值传给下一个步，也可以返回一个新的Promise把值传给下一步，then方法执行的时候有个特点，就是为了保证链式调用，上一次then中不管你是成功态还是失败态都会把参数作为下一个then中成功时回调的参数，举个例子<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  reject(<span class="string">'1'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> promise2 = promise1.then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;, (err) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">&#125;)</span><br><span class="line">promise2.then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res)<span class="comment">//不管上一次then执行的那个回调函数，在这里都可以接收到参数</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h2 id="实现链式调用"><a href="#实现链式调用" class="headerlink" title="实现链式调用"></a>实现链式调用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.prototype.then = <span class="function"><span class="keyword">function</span> (<span class="params">onFulfilled, onRejected</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> self = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">if</span> (self.status === <span class="string">'fulfilled'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> x = onFulfilled(self.value)</span><br><span class="line">        <span class="keyword">if</span> (x <span class="keyword">instanceof</span> <span class="built_in">Promise</span>) &#123;</span><br><span class="line">          x.then(resolve, reject)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          resolve(x)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        reject(err)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (self.status === <span class="string">'rejected'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> x = onRejected(self.reason)</span><br><span class="line">        <span class="keyword">if</span> (x <span class="keyword">instanceof</span> <span class="built_in">Promise</span>) &#123;</span><br><span class="line">          x.then(resolve, reject)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          resolve(x)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        reject(err)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (self.status === <span class="string">'pending'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      self.onFulfilledCallbacks.push(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> x = onFulfilled(self.value)</span><br><span class="line">        <span class="keyword">if</span> (x <span class="keyword">instanceof</span> <span class="built_in">Promise</span>) &#123;</span><br><span class="line">          x.then(resolve, reject)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          resolve(x)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      self.onRejectedCallbacks.push(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> x = onRejected(self.reason)</span><br><span class="line">        <span class="keyword">if</span> (x <span class="keyword">instanceof</span> <span class="built_in">Promise</span>) &#123;</span><br><span class="line">          x.then(resolve, reject)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          resolve(x)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码还要再次处理，就是当某个then中没有传成功时的回调函数或失败时的回调函数，代码就是报错，所以要指定默认值<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.prototype.then = <span class="function"><span class="keyword">function</span> (<span class="params">onFulfilled, onRejected</span>) </span>&#123;</span><br><span class="line">  onFulfilled = <span class="keyword">typeof</span> onFulfilled === <span class="string">'function'</span> ? onFulfilled :  <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;<span class="keyword">return</span> data&#125;</span><br><span class="line">  onRejected = <span class="keyword">typeof</span> onRejected === <span class="string">'function'</span> ? onRejected : <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;<span class="keyword">throw</span> err&#125;</span><br><span class="line">  <span class="keyword">let</span> self = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">if</span> (self.status === <span class="string">'fulfilled'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> x = onFulfilled(self.value)</span><br><span class="line">        <span class="keyword">if</span> (x <span class="keyword">instanceof</span> <span class="built_in">Promise</span>) &#123;</span><br><span class="line">          x.then(resolve, reject)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          resolve(x)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        reject(err)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (self.status === <span class="string">'rejected'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> x = onRejected(self.reason)</span><br><span class="line">        <span class="keyword">if</span> (x <span class="keyword">instanceof</span> <span class="built_in">Promise</span>) &#123;</span><br><span class="line">          x.then(resolve, reject)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          resolve(x)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        reject(err)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (self.status === <span class="string">'pending'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      self.onFulfilledCallbacks.push(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> x = onFulfilled(self.value)</span><br><span class="line">        <span class="keyword">if</span> (x <span class="keyword">instanceof</span> <span class="built_in">Promise</span>) &#123;</span><br><span class="line">          x.then(resolve, reject)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          resolve(x)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      self.onRejectedCallbacks.push(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> x = onRejected(self.reason)</span><br><span class="line">        <span class="keyword">if</span> (x <span class="keyword">instanceof</span> <span class="built_in">Promise</span>) &#123;</span><br><span class="line">          x.then(resolve, reject)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          resolve(x)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>指定默认值得时候注意失败时要继续抛出错误，因为只有代码报错才会走reject函数</p><h2 id="catch方法"><a href="#catch方法" class="headerlink" title="catch方法"></a>catch方法</h2><p>其实catch方法就是then方法的简写<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.prototype.catch = <span class="function"><span class="keyword">function</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.then(<span class="literal">null</span>, fn)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Promise</span>(<span class="params">excutor</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> self = <span class="keyword">this</span></span><br><span class="line">  self.status = <span class="string">'pending'</span></span><br><span class="line">  self.value = <span class="literal">null</span></span><br><span class="line">  self.reason = <span class="literal">null</span></span><br><span class="line">  self.onFulfilledCallbacks = []</span><br><span class="line">  self.onRejectedCallbacks = []</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (self.status === <span class="string">'pending'</span>) &#123;</span><br><span class="line">      self.value = value</span><br><span class="line">      self.status = <span class="string">'fulfilled'</span></span><br><span class="line">      self.onFulfilledCallbacks.forEach(<span class="function"><span class="params">item</span> =&gt;</span> item())</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">reject</span>(<span class="params">reason</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (self.status === <span class="string">'pending'</span>) &#123;</span><br><span class="line">      self.reason = reason</span><br><span class="line">      self.status = <span class="string">'rejected'</span></span><br><span class="line">      self.onRejectedCallbacks.forEach(<span class="function"><span class="params">item</span> =&gt;</span> item())</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    excutor(resolve, reject)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    reject(err)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.prototype.then = <span class="function"><span class="keyword">function</span> (<span class="params">onFulfilled, onRejected</span>) </span>&#123;</span><br><span class="line">  onFulfilled = <span class="keyword">typeof</span> onFulfilled === <span class="string">'function'</span> ? onFulfilled :  <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;resolve(data)&#125;</span><br><span class="line">  onRejected = <span class="keyword">typeof</span> onRejected === <span class="string">'function'</span> ? onRejected : <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;<span class="keyword">throw</span> err&#125;</span><br><span class="line">  <span class="keyword">let</span> self = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">if</span> (self.status === <span class="string">'fulfilled'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> x = onFulfilled(self.value)</span><br><span class="line">        <span class="keyword">if</span> (x <span class="keyword">instanceof</span> <span class="built_in">Promise</span>) &#123;</span><br><span class="line">          x.then(resolve, reject)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          resolve(x)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        reject(err)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (self.status === <span class="string">'rejected'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> x = onRejected(self.reason)</span><br><span class="line">        <span class="keyword">if</span> (x <span class="keyword">instanceof</span> <span class="built_in">Promise</span>) &#123;</span><br><span class="line">          x.then(resolve, reject)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          resolve(x)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        reject(err)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (self.status === <span class="string">'pending'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      self.onFulfilledCallbacks.push(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> x = onFulfilled(self.value)</span><br><span class="line">        <span class="keyword">if</span> (x <span class="keyword">instanceof</span> <span class="built_in">Promise</span>) &#123;</span><br><span class="line">          x.then(resolve, reject)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          resolve(x)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      self.onRejectedCallbacks.push(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> x = onRejected(self.reason)</span><br><span class="line">        <span class="keyword">if</span> (x <span class="keyword">instanceof</span> <span class="built_in">Promise</span>) &#123;</span><br><span class="line">          x.then(resolve, reject)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          resolve(x)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.prototype.catch = <span class="function"><span class="keyword">function</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.then(<span class="literal">null</span>, fn)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;promise&quot;&gt;&lt;a href=&quot;#promise&quot; class=&quot;headerlink&quot; title=&quot;promise&quot;&gt;&lt;/a&gt;promise&lt;/h1&gt;&lt;p&gt;Promise对象代表一个异步操作，有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）。&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;excutor&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; self = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  self.status = &lt;span class=&quot;string&quot;&gt;&#39;pending&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  self.value = &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  self.reason = &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;resolve&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;value&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (self.status === &lt;span class=&quot;string&quot;&gt;&#39;pending&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      self.value = value&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      self.status = &lt;span class=&quot;string&quot;&gt;&#39;fulfilled&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;reject&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;reason&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (self.status === &lt;span class=&quot;string&quot;&gt;&#39;pending&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      self.reason = reason&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      self.status = &lt;span class=&quot;string&quot;&gt;&#39;rejected&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    excutor(resolve, reject)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (err) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    reject(err)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Promise接收一个函数作为参数，该函数有两个参数，一个是resolve，表示成功时执行的函数，一个是reject，表示失败失败时执行的函数。resolve执行时传入的参数会作为then方法中第一个函数的参数，reject执行传入的参数会作为then方法中第二函数的参数。&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;.prototype.then = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;onFulfilled, onRejected&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; self = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (self.status === &lt;span class=&quot;string&quot;&gt;&#39;fulfilled&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    onFulfilled(self.value)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (self.status === &lt;span class=&quot;string&quot;&gt;&#39;rejected&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    onRejected(self.reason)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Promise中常常会写一些异步代码，等到异步操作执行完成才会触发resolve或者reject函数，当执行then方法的时候此时的状态还是初始的pending状态，所以为了能取到值，我们可以通过发布订阅模式来写。&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://douzhiwei.top/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="ES6" scheme="http://douzhiwei.top/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>编写vue插件以及发布到npm</title>
    <link href="http://douzhiwei.top/2018/03/16/%E7%BC%96%E5%86%99vue%E6%8F%92%E4%BB%B6%E4%BB%A5%E5%8F%8A%E5%8F%91%E5%B8%83%E5%88%B0npm/"/>
    <id>http://douzhiwei.top/2018/03/16/编写vue插件以及发布到npm/</id>
    <published>2018-03-16T02:37:12.000Z</published>
    <updated>2018-03-27T03:51:29.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="开发插件"><a href="#开发插件" class="headerlink" title="开发插件"></a>开发插件</h2><p>插件通常会为 Vue 添加全局功能。插件的范围没有限制——一般有下面几种：</p><ol><li><p>添加全局方法或者属性，如: <a href="https://github.com/karol-f/vue-custom-element" target="_blank" rel="noopener">vue-custom-element</a></p></li><li><p>添加全局资源：指令/过滤器/过渡等，如 <a href="https://github.com/vuejs/vue-touch" target="_blank" rel="noopener">vue-touch</a></p></li><li><p>通过全局 mixin 方法添加一些组件选项，如: <a href="https://github.com/vuejs/vue-router" target="_blank" rel="noopener">vue-router</a></p></li><li><p>添加 Vue 实例方法，通过把它们添加到 Vue.prototype 上实现。</p></li></ol><a id="more"></a><ol><li>一个库，提供自己的 API，同时提供上面提到的一个或多个功能，如 <a href="https://github.com/vuejs/vue-router" target="_blank" rel="noopener">vue-router</a></li></ol><p>Vue.js 的插件应当有一个公开方法 <code>install</code> 。这个方法的第一个参数是 <code>Vue</code> 构造器，第二个参数是一个可选的选项对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">MyPlugin.install = <span class="function"><span class="keyword">function</span> (<span class="params">Vue, options</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 1. 添加全局方法或属性</span></span><br><span class="line">  Vue.myGlobalMethod = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 逻辑...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. 添加全局资源</span></span><br><span class="line">  Vue.directive(<span class="string">'my-directive'</span>, &#123;</span><br><span class="line">    bind (el, binding, vnode, oldVnode) &#123;</span><br><span class="line">      <span class="comment">// 逻辑...</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3. 注入组件</span></span><br><span class="line">  Vue.mixin(&#123;</span><br><span class="line">    created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 逻辑...</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 4. 添加实例方法</span></span><br><span class="line">  Vue.prototype.$myMethod = <span class="function"><span class="keyword">function</span> (<span class="params">methodOptions</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 逻辑...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用插件"><a href="#使用插件" class="headerlink" title="使用插件"></a>使用插件</h2><p>通过全局方法 Vue.use() 使用插件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用 `MyPlugin.install(Vue)`</span></span><br><span class="line">Vue.use(MyPlugin)</span><br></pre></td></tr></table></figure><p>也可以传入一个选项对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.use(MyPlugin, &#123; <span class="attr">someOption</span>: <span class="literal">true</span> &#125;)</span><br></pre></td></tr></table></figure><p><code>Vue.use</code> 会自动阻止多次注册相同插件，届时只会注册一次该插件。</p><p>Vue.js 官方提供的一些插件 (例如 <code>vue-router</code>) 在检测到 <code>Vue</code> 是可访问的全局变量时会自动调用 <code>Vue.use()</code>。然而在例如 CommonJS 的模块环境中，你应该始终显式地调用 <code>Vue.use()</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用 Browserify 或 webpack 提供的 CommonJS 模块环境时</span></span><br><span class="line"><span class="keyword">var</span> Vue = <span class="built_in">require</span>(<span class="string">'vue'</span>)</span><br><span class="line"><span class="keyword">var</span> VueRouter = <span class="built_in">require</span>(<span class="string">'vue-router'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不要忘了调用此方法</span></span><br><span class="line">Vue.use(VueRouter)</span><br></pre></td></tr></table></figure><p><a href="https://github.com/vuejs/awesome-vue#components--libraries" target="_blank" rel="noopener">awesome-vue</a> 集合了来自社区贡献的数以千计的插件和库。</p><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><h3 id="省市区级联选择"><a href="#省市区级联选择" class="headerlink" title="省市区级联选择"></a>省市区级联选择</h3><ol><li>定义一个<code>install</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> areaSelecter <span class="keyword">from</span> <span class="string">'./area-selecter-map'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> areaSelect = &#123;</span><br><span class="line">    install: <span class="function"><span class="keyword">function</span> (<span class="params">Vue</span>) </span>&#123;</span><br><span class="line">        Vue.component(areaSelecter.name, areaSelecter)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> areaSelect</span><br></pre></td></tr></table></figure><ol><li>通过use方式使用</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> areaSelect <span class="keyword">from</span> <span class="string">'./lib/index.js'</span></span><br><span class="line"></span><br><span class="line">Vue.use(areaSelect)</span><br></pre></td></tr></table></figure><ol><li>在html里面使用</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">area-select</span>&gt;</span><span class="tag">&lt;/<span class="name">area-select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="发布到npm"><a href="#发布到npm" class="headerlink" title="发布到npm"></a>发布到npm</h2><p><strong>最先设置package.json,有几个重点</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&quot;name&quot;: &quot;项目名-必填&quot;,</span><br><span class="line"> &quot;version&quot;: &quot;版本号-必填&quot;,</span><br><span class="line"> &quot;description&quot;: &quot;描述-必填&quot;,</span><br><span class="line"> &quot;author&quot;: &quot;作者-乐意填就填&quot;,</span><br><span class="line"> &quot;private&quot;: false, // 必须是false,要不别人用不了</span><br><span class="line"> &quot;license&quot;: &quot;MIT&quot;, // 协议</span><br><span class="line"> &quot;repository&quot;: &quot;https://github.com/XXX&quot;, //必填</span><br><span class="line"> &quot;main&quot;: &quot;src/lib/index.js&quot;, // 入口文件,重要 必填</span><br></pre></td></tr></table></figure><p> <strong>注册npm用户</strong></p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm adduser </span><br><span class="line">Username: your name</span><br><span class="line">Password: your password</span><br><span class="line">Email: yourmail</span><br></pre></td></tr></table></figure><p><strong>看一下是不是自己</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm whoami</span><br></pre></td></tr></table></figure><p><strong>发布</strong></p><p>cd到项目目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm login // 登陆 </span><br><span class="line">npm publish // 发布</span><br></pre></td></tr></table></figure><p><strong>这个插件最开始是从ng移植过来的,但是经过一段时间的使用发现有性能问题,于是在重新编写了一次,源码里新旧代码都有,有兴趣的可以去比较一下</strong></p><p><a href="https://github.com/douzhiwei/area-selecter" target="_blank" rel="noopener">github</a></p><p><a href="https://www.npmjs.com/package/area-selecter" target="_blank" rel="noopener">npm</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;开发插件&quot;&gt;&lt;a href=&quot;#开发插件&quot; class=&quot;headerlink&quot; title=&quot;开发插件&quot;&gt;&lt;/a&gt;开发插件&lt;/h2&gt;&lt;p&gt;插件通常会为 Vue 添加全局功能。插件的范围没有限制——一般有下面几种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;添加全局方法或者属性，如: &lt;a href=&quot;https://github.com/karol-f/vue-custom-element&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;vue-custom-element&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;添加全局资源：指令/过滤器/过渡等，如 &lt;a href=&quot;https://github.com/vuejs/vue-touch&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;vue-touch&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;通过全局 mixin 方法添加一些组件选项，如: &lt;a href=&quot;https://github.com/vuejs/vue-router&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;vue-router&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;添加 Vue 实例方法，通过把它们添加到 Vue.prototype 上实现。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Vue" scheme="http://douzhiwei.top/categories/Vue/"/>
    
    
      <category term="vue" scheme="http://douzhiwei.top/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue-router</title>
    <link href="http://douzhiwei.top/2018/03/15/vue-router/"/>
    <id>http://douzhiwei.top/2018/03/15/vue-router/</id>
    <published>2018-03-15T02:44:54.000Z</published>
    <updated>2018-03-27T03:52:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用vue-router，我们只需要做的是将组件(components)映射到路由(routes).vue-router的概念也是比较多,建议先看<a href="https://router.vuejs.org/zh-cn/essentials/getting-started.html" target="_blank" rel="noopener">官方文档</a>,这主要是总结,基础的知识点略过</p><h2 id="几个易混概念"><a href="#几个易混概念" class="headerlink" title="几个易混概念"></a>几个易混概念</h2><h3 id="route-和-router"><a href="#route-和-router" class="headerlink" title="$route 和 $router"></a><code>$route</code> 和 <code>$router</code></h3><ul><li><p><code>$route</code>为当前router跳转对象,里面可以获取<code>name、path、query、params</code></p></li><li><p><code>$router</code>为router的实例,可以使用使用很多实例方法,比如<code>$router.push</code>等</p></li></ul><a id="more"></a><h3 id="动态路由和query参数"><a href="#动态路由和query参数" class="headerlink" title="动态路由和query参数"></a>动态路由和query参数</h3><ul><li>动态路由是以<code>/user/:id</code>的形式,这注意一点例如从 /user/foo 导航到 /user/bar，原来的组件实例会被复用。因为两个路由都渲染同个组件，比起销毁再创建，复用则显得更加高效。不过，这也意味着组件的生命周期钩子不会再被调用。想要检测参数变化可以使用<code>watch</code>和<code>beforeRouteUpdate</code></li><li>query参数的形式是<code>/user?123</code>,嵌套路由不推荐使用这种,会导致路由乱,不好维护</li></ul><h3 id="router-push-name-还是-path"><a href="#router-push-name-还是-path" class="headerlink" title="$router.push name 还是 path"></a>$router.push <code>name</code> 还是 <code>path</code></h3><p><code>name</code>和<code>path</code>用那个都可以,我的建议是不要混用,这里有几点需要注意<br><strong>如果提供了 path，params 会被忽略，上述例子中的 query 并不属于这种情况。取而代之的是下面例子的做法，你需要提供路由的 name 或手写完整的带有参数的 path</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> userId = <span class="number">123</span></span><br><span class="line">router.push(&#123; <span class="attr">name</span>: <span class="string">'user'</span>, <span class="attr">params</span>: &#123; userId &#125;&#125;) <span class="comment">// -&gt; /user/123</span></span><br><span class="line">router.push(&#123; <span class="attr">path</span>: <span class="string">`/user/<span class="subst">$&#123;userId&#125;</span>`</span> &#125;) <span class="comment">// -&gt; /user/123</span></span><br><span class="line"><span class="comment">// 这里的 params 不生效</span></span><br><span class="line">router.push(&#123; <span class="attr">path</span>: <span class="string">'/user'</span>, <span class="attr">params</span>: &#123; userId &#125;&#125;) <span class="comment">// -&gt; /user</span></span><br></pre></td></tr></table></figure><h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><p>有的时候刚进页面地址是<code>/</code>,这是页面是空白的,我们需要导航到<code>/user</code>,这是可以使用重定向</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">routes: [</span><br><span class="line">   &#123; <span class="attr">path</span>: <span class="string">'/'</span>, <span class="attr">redirect</span>: &#123; <span class="attr">path</span>: <span class="string">'/user'</span> &#125;&#125;</span><br><span class="line"> ]</span><br></pre></td></tr></table></figure><h3 id="路由传参"><a href="#路由传参" class="headerlink" title="路由传参"></a>路由传参</h3><p>为了使路由和组件尽可能的解耦,可以使用prop</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> User = &#123;</span><br><span class="line">  props: [<span class="string">'id'</span>],</span><br><span class="line">  template: <span class="string">'&lt;div&gt;User &#123;&#123; id &#125;&#125;&lt;/div&gt;'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'/user/:id'</span>, <span class="attr">component</span>: User, <span class="attr">props</span>: <span class="literal">true</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="守卫"><a href="#守卫" class="headerlink" title="守卫"></a>守卫</h3><p>这列举一下守卫导航,具体信息<a href="https://router.vuejs.org/zh-cn/advanced/navigation-guards.html" target="_blank" rel="noopener">看这</a></p><ol><li>全局守卫<code>router.beforeEach</code></li><li>全局后置钩子<code>router.afterEach</code></li><li>路由独享的守卫<code>beforeEnter</code></li><li>组件内的守卫<code>beforeRouteEnter,beforeRouteUpdate (2.2新增),beforeRouteLeave</code></li></ol><p>####完整的导航解析流程</p><ol><li>导航被触发。</li><li>在失活的组件里调用离开守卫。</li><li>调用全局的 beforeEach 守卫。</li><li>在重用的组件里调用 beforeRouteUpdate 守卫 (2.2+)。</li><li>在路由配置里调用 beforeEnter。</li><li>解析异步路由组件。</li><li>在被激活的组件里调用 beforeRouteEnter。</li><li>调用全局的 beforeResolve 守卫 (2.5+)。</li><li>导航被确认。</li><li>调用全局的 afterEach 钩子。</li><li>触发 DOM 更新。</li><li>用创建好的实例调用 beforeRouteEnter 守卫中传给 next 的回调函数。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用vue-router，我们只需要做的是将组件(components)映射到路由(routes).vue-router的概念也是比较多,建议先看&lt;a href=&quot;https://router.vuejs.org/zh-cn/essentials/getting-started.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方文档&lt;/a&gt;,这主要是总结,基础的知识点略过&lt;/p&gt;
&lt;h2 id=&quot;几个易混概念&quot;&gt;&lt;a href=&quot;#几个易混概念&quot; class=&quot;headerlink&quot; title=&quot;几个易混概念&quot;&gt;&lt;/a&gt;几个易混概念&lt;/h2&gt;&lt;h3 id=&quot;route-和-router&quot;&gt;&lt;a href=&quot;#route-和-router&quot; class=&quot;headerlink&quot; title=&quot;$route 和 $router&quot;&gt;&lt;/a&gt;&lt;code&gt;$route&lt;/code&gt; 和 &lt;code&gt;$router&lt;/code&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;$route&lt;/code&gt;为当前router跳转对象,里面可以获取&lt;code&gt;name、path、query、params&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;$router&lt;/code&gt;为router的实例,可以使用使用很多实例方法,比如&lt;code&gt;$router.push&lt;/code&gt;等&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Vue" scheme="http://douzhiwei.top/categories/Vue/"/>
    
    
      <category term="vue" scheme="http://douzhiwei.top/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vuex</title>
    <link href="http://douzhiwei.top/2018/03/14/vuex/"/>
    <id>http://douzhiwei.top/2018/03/14/vuex/</id>
    <published>2018-03-14T07:10:23.000Z</published>
    <updated>2018-03-27T03:53:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化</p><p>vuex的概念有很多,例如<code>state</code>,<code>getter</code>,<code>mutation</code>,<code>action</code>等等,还有很多用法,这里直接上我们的实践,中间穿插概念的简单说明,如果没接触过vuex,需要先看<a href="https://cn.vuejs.org/v2/guide/installation.html" target="_blank" rel="noopener">官方文档</a></p><a id="more"></a><h2 id="项目目录"><a href="#项目目录" class="headerlink" title="项目目录"></a>项目目录</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">├── index.html</span><br><span class="line">├── main.js</span><br><span class="line">├── src</span><br><span class="line">│   ├── App.vue</span><br><span class="line">│   └── ...</span><br><span class="line">└── store</span><br><span class="line">    ├── index.js     </span><br><span class="line">    ├── state.js         </span><br><span class="line">    ├── actions.js       </span><br><span class="line">    ├── mutations.js </span><br><span class="line">    ├── mutation-types.js </span><br><span class="line">    └── getters.js</span><br></pre></td></tr></table></figure><h3 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a><code>index.js</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> actions <span class="keyword">from</span> <span class="string">'./actions'</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> getters <span class="keyword">from</span> <span class="string">'./getters'</span></span><br><span class="line"><span class="keyword">import</span> state <span class="keyword">from</span> <span class="string">'./state'</span></span><br><span class="line"><span class="keyword">import</span> mutations <span class="keyword">from</span> <span class="string">'./mutations'</span></span><br><span class="line"><span class="keyword">import</span> createLogger <span class="keyword">from</span> <span class="string">'vuex/dist/logger'</span></span><br><span class="line"><span class="comment">// 使用vuex插件,会在控制台看到详细的数据变化</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> debug = process.env.NODE_ENV !== <span class="string">'production'</span></span><br><span class="line"><span class="comment">// 在开发环境使用严格模式，无论何时发生了状态变更且不是由 mutation 函数引起的，将会抛出错误</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  actions,</span><br><span class="line">  getters,</span><br><span class="line">  state,</span><br><span class="line">  mutations,</span><br><span class="line">  strict: debug,</span><br><span class="line">  plugins: debug ? [createLogger()] : []</span><br><span class="line">  <span class="comment">// 只有在开发环境才使用插件</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="state-js"><a href="#state-js" class="headerlink" title="state.js"></a><code>state.js</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  userInfo: &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">'占山'</span>&#125;</span><br><span class="line">  <span class="comment">// 预定义所有要用到的变量</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> state</span><br></pre></td></tr></table></figure><h3 id="getters-js"><a href="#getters-js" class="headerlink" title="getters.js"></a><code>getters.js</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> userInfo = <span class="function"><span class="params">state</span> =&gt;</span> state.userInfo</span><br><span class="line"><span class="comment">// 可以在这里进行过滤等操作</span></span><br></pre></td></tr></table></figure><h3 id="mutation-types-js"><a href="#mutation-types-js" class="headerlink" title="mutation-types.js"></a><code>mutation-types.js</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> USER_LOGIN = <span class="string">'USER_LOGIN'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> USER_LOGOUT = <span class="string">'USER_LOGOUT'</span></span><br><span class="line"><span class="comment">// 定义常量,在mutations.js和actions.js</span></span><br><span class="line"><span class="comment">// 使用常量替代 Mutation 事件类型 官方推荐写法</span></span><br></pre></td></tr></table></figure><h3 id="mutations-js"><a href="#mutations-js" class="headerlink" title="mutations.js"></a><code>mutations.js</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> types <span class="keyword">from</span> <span class="string">'./mutation-types'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  [types.USER_LOGIN] (state, params) &#123;</span><br><span class="line">    state.userInfo = params</span><br><span class="line">  &#125;,</span><br><span class="line">  [types.USER_LOGOUT] (state, params) &#123;</span><br><span class="line">    storage.remove(<span class="string">'user-info'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> mutations</span><br></pre></td></tr></table></figure><h3 id="actions-js"><a href="#actions-js" class="headerlink" title="actions.js"></a><code>actions.js</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> types <span class="keyword">from</span> <span class="string">'./mutation-types'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> userLogin = <span class="function"><span class="keyword">function</span> (<span class="params">&#123;commit&#125;, userInfo</span>) </span>&#123;</span><br><span class="line">  commit(types.USER_LOGIN, userInfo)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> userLogOut = <span class="function"><span class="keyword">function</span> (<span class="params">&#123;commit&#125;</span>) </span>&#123;</span><br><span class="line">  commit(types.USER_LOGOUT)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="几个易混的辅助函数"><a href="#几个易混的辅助函数" class="headerlink" title="几个易混的辅助函数"></a>几个易混的辅助函数</h2><table><thead><tr><th style="text-align:left">名称</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">mapState</td><td style="text-align:left">mapState 工具函数会将 store 中的 state 映射到局部计算属性中</td></tr><tr><td style="text-align:left">mapGetters</td><td style="text-align:left">mapGetters 工具函数会将 store 中的 getter 映射到局部计算中</td></tr><tr><td style="text-align:left">mapActions</td><td style="text-align:left">mapActions 工具函数会将 store 中的 dispatch 方法映射到组件的 methods 中</td></tr></tbody></table><p>这个三个函数都是vuex的语法糖,通过上面代码的组织方式,我们常用的是<code>mapGetters</code>和<br><code>mapActions</code></p><h2 id="使用流程"><a href="#使用流程" class="headerlink" title="使用流程"></a>使用流程</h2><p>最开始在<code>main.js</code>中注入store</p><h3 id="这里我们用一个登录保存用户信息在其他组件内使用用户信息和登出清空用户信息的这样的一个例子跑一遍vuex的流程"><a href="#这里我们用一个登录保存用户信息在其他组件内使用用户信息和登出清空用户信息的这样的一个例子跑一遍vuex的流程" class="headerlink" title="这里我们用一个登录保存用户信息在其他组件内使用用户信息和登出清空用户信息的这样的一个例子跑一遍vuex的流程"></a>这里我们用一个登录保存用户信息在其他组件内使用用户信息和登出清空用户信息的这样的一个例子跑一遍vuex的流程</h3><p>1- 登录</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">     ...mapActions([<span class="string">'userLogin'</span>]),</span><br><span class="line">     <span class="comment">//使用 mapActions 辅助函数将组件的 methods 映射为 store.dispatch 调用</span></span><br><span class="line">     login () &#123;       </span><br><span class="line">       api.user.login.save(<span class="keyword">this</span>.form).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">         <span class="keyword">if</span> (res.data.status === <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="keyword">this</span>.userLogin(<span class="keyword">this</span>.form)</span><br><span class="line">   <span class="comment">// 过程</span></span><br><span class="line">   <span class="number">1.</span>调用action里的userLogin()</span><br><span class="line">   <span class="number">2.</span> userLogin()会commit一个叫[USER_LOGIN]的mutation</span><br><span class="line">   <span class="number">3.</span> 名为[USER_LOGIN]的mutation会操作state,把userInfo保存在state中  </span><br><span class="line"></span><br><span class="line">     </span><br><span class="line">         &#125; </span><br><span class="line">       &#125;)...  </span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>2- 再组件内获取用户信息</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> computed: &#123;</span><br><span class="line">          ...mapGetters([</span><br><span class="line">              <span class="string">'userInfo'</span></span><br><span class="line">          ])</span><br><span class="line">      &#125;</span><br><span class="line"><span class="comment">// 通过mapGetters把userInfo映射到局部计算属性,</span></span><br><span class="line">   这时就可以通过<span class="keyword">this</span>.userInfo获取到用户信息</span><br></pre></td></tr></table></figure><p>3- 操作userInfo信息</p><p>当我们点击登出的时候,需要操作把state里面的userInfo信息清楚</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">     ...mapActions([<span class="string">'userLogOut'</span>]),</span><br><span class="line">     <span class="comment">// 这里我们之前已经用过了,不说了</span></span><br><span class="line">    </span><br><span class="line">     logOut() &#123;</span><br><span class="line">         <span class="keyword">this</span>.userLogOut()</span><br><span class="line">    <span class="comment">// 过程</span></span><br><span class="line">     <span class="number">1.</span> 调用action里的userLogOut()</span><br><span class="line"> <span class="number">2.</span> userLogOut()会commit一个叫[USER_LOGOUT]的mutation</span><br><span class="line"> <span class="number">3.</span> 名为[USER_LOGOUT]的mutation会操作state,删除userInfo               </span><br><span class="line">     &#125;</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure><p><strong>ok这一圈跑完了</strong></p><p>vuex可能会有一点难理解,首先的多看几遍官方文档</p><p>至于文档里提到过的Module写法,再dmp项目里已经用过了,感觉不如现在的代码整洁,现在这种方式在ssp项目有应用,效果还不错</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化&lt;/p&gt;
&lt;p&gt;vuex的概念有很多,例如&lt;code&gt;state&lt;/code&gt;,&lt;code&gt;getter&lt;/code&gt;,&lt;code&gt;mutation&lt;/code&gt;,&lt;code&gt;action&lt;/code&gt;等等,还有很多用法,这里直接上我们的实践,中间穿插概念的简单说明,如果没接触过vuex,需要先看&lt;a href=&quot;https://cn.vuejs.org/v2/guide/installation.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方文档&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Vue" scheme="http://douzhiwei.top/categories/Vue/"/>
    
    
      <category term="vue" scheme="http://douzhiwei.top/tags/vue/"/>
    
      <category term="vuex" scheme="http://douzhiwei.top/tags/vuex/"/>
    
  </entry>
  
  <entry>
    <title>vue项目总结-进阶-响应式原理</title>
    <link href="http://douzhiwei.top/2018/03/14/vue%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93-%E8%BF%9B%E9%98%B6-%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86/"/>
    <id>http://douzhiwei.top/2018/03/14/vue项目总结-进阶-响应式原理/</id>
    <published>2018-03-14T03:50:42.000Z</published>
    <updated>2018-03-27T03:52:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>###监测变化</p><ul><li>把一个普通 <strong><code>JavaScript</code></strong> 对象传给 <strong><code>Vue</code></strong> 实例的 <strong><code>data</code></strong> 选项，<strong><code>Vue</code></strong> 将遍历此对象所有的属性，并使用 <strong><code>Object.defineProperty</code></strong> 把这些属性全部转为 <strong><code>getter/setter</code></strong>,<strong><code>Vue</code></strong> 不允许在已经创建的实例上动态添加新的根级响应式属性。但是可以使用 <strong><code>Vue.set(object, key, value)</code></strong> 方法将响应属性添加到嵌套的对象上</li></ul><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Vue.set(vm.someObject, <span class="string">'b'</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment">//使用 vm.$set 实例方法</span></span><br><span class="line"><span class="keyword">this</span>.$set(<span class="keyword">this</span>.someObject,<span class="string">'b'</span>,<span class="number">2</span>)</span><br><span class="line"><span class="comment">//项目中 设置属性 让Vue能够监测到</span></span><br><span class="line">created()&#123;</span><br><span class="line"><span class="comment">// 初始化数据 让vue能够监测</span></span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">let</span> a <span class="keyword">of</span> <span class="keyword">this</span>.dataList ) &#123;</span><br><span class="line"><span class="keyword">if</span> (a) &#123;</span><br><span class="line"><span class="keyword">this</span>.$set(a, <span class="string">"showChildrens"</span>, <span class="literal">false</span>);</span><br><span class="line"><span class="keyword">this</span>.$set(a, <span class="string">"sel"</span>, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">let</span> b <span class="keyword">of</span> a.sub_category ) &#123;</span><br><span class="line"><span class="keyword">if</span> (b) &#123;</span><br><span class="line"><span class="keyword">this</span>.$set(b, <span class="string">"sel"</span>, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>有时你想向已有对象上添加一些属性，例如使用 <code>Object.assign()</code> 或<code>_.extend()</code> 方法来添加属性。但是，添加到对象上的新属性不会触发更新。在这种情况下可以创建一个新的对象，让它包含原对象的属性和新的属性：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代替 `Object.assign(this.someObject, &#123; a: 1, b: 2 &#125;)`</span></span><br><span class="line"><span class="keyword">this</span>.someObject = <span class="built_in">Object</span>.assign(&#123;&#125;, <span class="keyword">this</span>.someObject, &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="异步更新队列"><a href="#异步更新队列" class="headerlink" title="异步更新队列"></a>异步更新队列</h3><p>Vue 异步执行 DOM 更新。只要观察到数据变化，Vue 将开启一个队列，并缓冲在同一事件循环中发生的所有数据改变。如果同一个 watcher 被多次触发，只会被推入到队列中一次。这种在缓冲时去除重复数据对于避免不必要的计算和 DOM 操作上非常重要,有的时候我们明明代码写的没问题但是达不到我们的预期,这大多跟异步更新有关系,这时候就要用<br><code>$nextTick</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Vue.directive(<span class="string">'has'</span>, &#123;</span><br><span class="line">    bind: <span class="function">(<span class="params">el, binding, vnode</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 这里不用nextTick 会报一个错误:el.parentNode is undefined</span></span><br><span class="line">        vnode.context.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!Vue.prototype.$_has(binding.value)) &#123;</span><br><span class="line">                el.parentNode.removeChild(el)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"> cityClick(keyCity, keyProvince) &#123;</span><br><span class="line"> <span class="comment">// 这里不实用nextTick,会发现明明checkbox已选中,但是取不到最新的值</span></span><br><span class="line">                <span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">this</span>.dataList[keyProvince][keyCity].sel) &#123;</span><br><span class="line">                        <span class="keyword">this</span>.selectChildNode(keyCity, <span class="literal">true</span>)</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">this</span>.selectChildNode(keyCity, <span class="literal">false</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                <span class="keyword">this</span>.selectParentNode(<span class="keyword">this</span>.dataList[keyProvince], keyProvince)</span><br><span class="line">            &#125;,</span><br></pre></td></tr></table></figure><h3 id="再看一个经常用到的-改变数组"><a href="#再看一个经常用到的-改变数组" class="headerlink" title="再看一个经常用到的,改变数组"></a>再看一个经常用到的,改变数组</h3><p>由于 JavaScript 的限制， Vue 不能检测以下变动的数组：<br>当你利用索引直接设置一个项时，例如： <code>vm.items[indexOfItem] = newValue</code><br>当你修改数组的长度时，例如： <code>vm.items.length = newLength</code><br>为了解决第一类问题，以下两种方式都可以实现和 <code>vm.items[indexOfItem] = newValue</code> 相同的效果， 同时也将触发状态更新：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Vue.set</span></span><br><span class="line">Vue.set(example1.items, indexOfItem, newValue)</span><br><span class="line"><span class="comment">// Array.prototype.splice</span></span><br><span class="line">example1.items.splice(indexOfItem, <span class="number">1</span>, newValue)</span><br><span class="line">为了解决第二类问题，可以使用 splice：</span><br><span class="line">example1.items.splice(newLength)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;###监测变化&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;把一个普通 &lt;strong&gt;&lt;code&gt;JavaScript&lt;/code&gt;&lt;/strong&gt; 对象传给 &lt;strong&gt;&lt;code&gt;Vue&lt;/code&gt;&lt;/strong&gt; 实例的 &lt;strong&gt;&lt;code&gt;data&lt;/code&gt;&lt;/strong&gt; 选项，&lt;strong&gt;&lt;code&gt;Vue&lt;/code&gt;&lt;/strong&gt; 将遍历此对象所有的属性，并使用 &lt;strong&gt;&lt;code&gt;Object.defineProperty&lt;/code&gt;&lt;/strong&gt; 把这些属性全部转为 &lt;strong&gt;&lt;code&gt;getter/setter&lt;/code&gt;&lt;/strong&gt;,&lt;strong&gt;&lt;code&gt;Vue&lt;/code&gt;&lt;/strong&gt; 不允许在已经创建的实例上动态添加新的根级响应式属性。但是可以使用 &lt;strong&gt;&lt;code&gt;Vue.set(object, key, value)&lt;/code&gt;&lt;/strong&gt; 方法将响应属性添加到嵌套的对象上&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Vue" scheme="http://douzhiwei.top/categories/Vue/"/>
    
    
      <category term="vue" scheme="http://douzhiwei.top/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue项目总结-进阶-自定义指令</title>
    <link href="http://douzhiwei.top/2018/03/14/vue%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93-%E8%BF%9B%E9%98%B6-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4/"/>
    <id>http://douzhiwei.top/2018/03/14/vue项目总结-进阶-自定义指令/</id>
    <published>2018-03-14T03:45:33.000Z</published>
    <updated>2018-03-27T03:53:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>和ng一样vue的指令也是操作DOM,说一下基本的写法</p><h2 id="钩子函数"><a href="#钩子函数" class="headerlink" title="钩子函数"></a>钩子函数</h2><p>指令定义函数提供了几个钩子函数（可选）：</p><ul><li><p><code>bind</code>: 只调用一次，指令第一次绑定到元素时调用，用这个钩子函数可以定义一个在绑定时执行一次的初始化动作。</p></li><li><p><code>inserted</code>: 被绑定元素插入父节点时调用（父节点存在即可调用，不必存在于 document 中）。</p></li><li><p><code>update</code>: 所在组件的 VNode 更新时调用，<strong>但是可能发生在其孩子的 VNode 更新之前</strong>。指令的值可能发生了改变也可能没有。但是你可以通过比较更新前后的值来忽略不必要的模板更新 (详细的钩子函数参数见下)。</p></li><li><p><code>componentUpdated</code>: 所在组件的 VNode <strong>及其孩子的 VNode</strong> 全部更新时调用。</p></li><li><p><code>unbind</code>: 只调用一次， 指令与元素解绑时调用。</p></li></ul><p>接下来我们来看一下钩子函数的参数 (包括 <code>el</code>，<code>binding</code>，<code>vnode</code>，<code>oldVnode</code>) 。</p><a id="more"></a><h3 id="钩子函数参数"><a href="#钩子函数参数" class="headerlink" title="钩子函数参数"></a>钩子函数参数</h3><p>钩子函数被赋予了以下参数：</p><ul><li><strong>el</strong>: 指令所绑定的元素，可以用来直接操作 DOM 。</li><li><strong>binding</strong>: 一个对象，包含以下属性：</li><li><strong>name</strong>: 指令名，不包括 <code>v-</code> 前缀。</li><li><strong>value</strong>: 指令的绑定值， 例如： <code>v-my-directive=&quot;1 + 1&quot;</code>, value 的值是 <code>2</code>。</li><li><strong>oldValue</strong>: 指令绑定的前一个值，仅在 <code>update</code> 和 <code>componentUpdated</code> 钩子中可用。无论值是否改变都可用。</li><li><strong>expression</strong>: 绑定值的字符串形式。 例如 <code>v-my-directive=&quot;1 + 1&quot;</code> ， expression 的值是 <code>&quot;1 + 1&quot;</code>。</li><li><strong>arg</strong>: 传给指令的参数。例如 <code>v-my-directive:foo</code>， arg 的值是 <code>&quot;foo&quot;</code>。</li><li><strong>modifiers</strong>: 一个包含修饰符的对象。 例如： <code>v-my-directive.foo.bar</code>, 修饰符对象 modifiers 的值是 <code>{ foo: true, bar: true }</code>。</li><li><strong>vnode</strong>: Vue 编译生成的虚拟节点，查阅 <a href="../api/#VNode接口">VNode API</a> 了解更多详情。</li><li><strong>oldVnode</strong>: 上一个虚拟节点，仅在 <code>update</code> 和 <code>componentUpdated</code> 钩子中可用。</li></ul><p>除了 <code>el</code> 之外，其它参数都应该是只读的，尽量不要修改他们。如果需要在钩子之间共享数据，建议通过元素的 <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dataset" target="_blank" rel="noopener">dataset</a> 来进行。</p><h3 id="看一个项目中的栗子"><a href="#看一个项目中的栗子" class="headerlink" title="看一个项目中的栗子"></a>看一个项目中的栗子</h3><p><strong>点击除指定div关闭</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> clickoutsideContext = <span class="string">'@@clickoutsideContext'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">@param el 指令所绑定的元素</span></span><br><span class="line"><span class="comment">@param binding &#123;Object&#125;</span></span><br><span class="line"><span class="comment">@param vnode vue编译生成的虚拟节点</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">bind (el, binding, vnode) &#123;</span><br><span class="line"><span class="keyword">const</span> documentHandler = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line"><span class="comment">// console.log(el)</span></span><br><span class="line"><span class="comment">// console.log(e.target);</span></span><br><span class="line"><span class="comment">// console.log(vnode);</span></span><br><span class="line"><span class="comment">// console.log(binding);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!vnode.context || el.contains(e.target)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (binding.expression) &#123;</span><br><span class="line">vnode.context[el[clickoutsideContext].methodName](e)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">el[clickoutsideContext].bindingFn(e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">el[clickoutsideContext] = &#123;</span><br><span class="line">documentHandler,</span><br><span class="line">methodName: binding.expression,</span><br><span class="line">bindingFn: binding.value</span><br><span class="line">&#125;</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'click'</span>, documentHandler);</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line">&#125;,</span><br><span class="line">update (el, binding) &#123;</span><br><span class="line">el[clickoutsideContext].methodName = binding.expression;</span><br><span class="line">el[clickoutsideContext].bindingFn = binding.value;</span><br><span class="line">&#125;,</span><br><span class="line">unbind(el) &#123;</span><br><span class="line"><span class="built_in">document</span>.removeEventListener(<span class="string">'click'</span>, el[clickoutsideContext].documentHandler);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;和ng一样vue的指令也是操作DOM,说一下基本的写法&lt;/p&gt;
&lt;h2 id=&quot;钩子函数&quot;&gt;&lt;a href=&quot;#钩子函数&quot; class=&quot;headerlink&quot; title=&quot;钩子函数&quot;&gt;&lt;/a&gt;钩子函数&lt;/h2&gt;&lt;p&gt;指令定义函数提供了几个钩子函数（可选）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;bind&lt;/code&gt;: 只调用一次，指令第一次绑定到元素时调用，用这个钩子函数可以定义一个在绑定时执行一次的初始化动作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;inserted&lt;/code&gt;: 被绑定元素插入父节点时调用（父节点存在即可调用，不必存在于 document 中）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;update&lt;/code&gt;: 所在组件的 VNode 更新时调用，&lt;strong&gt;但是可能发生在其孩子的 VNode 更新之前&lt;/strong&gt;。指令的值可能发生了改变也可能没有。但是你可以通过比较更新前后的值来忽略不必要的模板更新 (详细的钩子函数参数见下)。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;componentUpdated&lt;/code&gt;: 所在组件的 VNode &lt;strong&gt;及其孩子的 VNode&lt;/strong&gt; 全部更新时调用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;unbind&lt;/code&gt;: 只调用一次， 指令与元素解绑时调用。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接下来我们来看一下钩子函数的参数 (包括 &lt;code&gt;el&lt;/code&gt;，&lt;code&gt;binding&lt;/code&gt;，&lt;code&gt;vnode&lt;/code&gt;，&lt;code&gt;oldVnode&lt;/code&gt;) 。&lt;/p&gt;
    
    </summary>
    
      <category term="Vue" scheme="http://douzhiwei.top/categories/Vue/"/>
    
    
      <category term="vue" scheme="http://douzhiwei.top/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue项目总结-进阶-mixin</title>
    <link href="http://douzhiwei.top/2018/03/14/vue%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93-%E8%BF%9B%E9%98%B6-mixin/"/>
    <id>http://douzhiwei.top/2018/03/14/vue项目总结-进阶-mixin/</id>
    <published>2018-03-14T02:42:23.000Z</published>
    <updated>2018-03-27T03:53:13.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="混入"><a href="#混入" class="headerlink" title="混入"></a>混入</h2><p>mixins 是一种分发 Vue 组件中可复用功能的非常灵活的方式。可以用mixin来共享变量,比如说翻页数据.权限数据等等,还可以定义方法共享到组件,下面说一下合并的策略,这个很有用</p><a id="more"></a><h3 id="选项合并"><a href="#选项合并" class="headerlink" title="选项合并"></a>选项合并</h3><ul><li>当组件和混入对象有同名选项时,会已组件数据优先</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mixin = &#123;</span><br><span class="line">  data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      message: <span class="string">'hello'</span>,</span><br><span class="line">      foo: <span class="string">'abc'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  mixins: [mixin],</span><br><span class="line">  data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      message: <span class="string">'goodbye'</span>,</span><br><span class="line">      bar: <span class="string">'def'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.$data)</span><br><span class="line">    <span class="comment">// =&gt; &#123; message: "goodbye", foo: "abc", bar: "def" &#125;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>当组件和mixin有相同钩子时,先执行mixin里面的钩子</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mixin = &#123;</span><br><span class="line">  created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'混入对象的钩子被调用'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  mixins: [mixin],</span><br><span class="line">  created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'组件钩子被调用'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// =&gt; "混入对象的钩子被调用"</span></span><br><span class="line"><span class="comment">// =&gt; "组件钩子被调用"</span></span><br></pre></td></tr></table></figure><ul><li>当值为对象的选项，例如 methods, components 和 directives，将被混合为同一个对象。两个对象键名冲突时，取组件对象的键值对</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mixin = &#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    foo: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'foo'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    conflicting: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'from mixin'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  mixins: [mixin],</span><br><span class="line">  methods: &#123;</span><br><span class="line">    bar: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'bar'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    conflicting: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'from self'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">vm.foo() <span class="comment">// =&gt; "foo"</span></span><br><span class="line">vm.bar() <span class="comment">// =&gt; "bar"</span></span><br><span class="line">vm.conflicting() <span class="comment">// =&gt; "from self"</span></span><br></pre></td></tr></table></figure><h3 id="全局混入"><a href="#全局混入" class="headerlink" title="全局混入"></a>全局混入</h3><p>不推荐使用全局混入,一旦使用全局混入会影响之后创建的所有vue实例,使用全局混入时,最好配置一个options</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 为自定义的选项 'myOption' 注入一个处理器。</span></span><br><span class="line">Vue.mixin(&#123;</span><br><span class="line">  created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> myOption = <span class="keyword">this</span>.$options.myOption</span><br><span class="line">    <span class="keyword">if</span> (myOption) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(myOption)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  myOption: <span class="string">'hello!'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// =&gt; "hello!"</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;混入&quot;&gt;&lt;a href=&quot;#混入&quot; class=&quot;headerlink&quot; title=&quot;混入&quot;&gt;&lt;/a&gt;混入&lt;/h2&gt;&lt;p&gt;mixins 是一种分发 Vue 组件中可复用功能的非常灵活的方式。可以用mixin来共享变量,比如说翻页数据.权限数据等等,还可以定义方法共享到组件,下面说一下合并的策略,这个很有用&lt;/p&gt;
    
    </summary>
    
      <category term="Vue" scheme="http://douzhiwei.top/categories/Vue/"/>
    
    
      <category term="vue" scheme="http://douzhiwei.top/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue项目总结-基础</title>
    <link href="http://douzhiwei.top/2018/03/13/vue%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93-%E5%9F%BA%E7%A1%80/"/>
    <id>http://douzhiwei.top/2018/03/13/vue项目总结-基础/</id>
    <published>2018-03-13T09:02:10.000Z</published>
    <updated>2018-03-27T03:52:47.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="VUE"><a href="#VUE" class="headerlink" title="VUE"></a>VUE</h1><p>Vue 是一套构建用户界面的渐进式框架。与其他重量级框架不同的是，Vue 采用自底向上增量开发的设计。Vue 的核心库只关注视图层，它不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与单文件组件和 Vue 生态系统支持的库结合使用时，Vue 也完全能够为复杂的单页应用程序提供驱动。</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p><strong>易用</strong><br>已经会了HTML,CSS,JavaScript即刻阅读指南开始构建应用！<br><strong>灵活</strong><br>简单小巧的核心，渐进式技术栈，足以应付任何规模的应用。</p><p><strong>性能</strong><br>20kb min+gzip 运行大小<br>超快虚拟 DOM<br>最省心的优化</p><a id="more"></a><p><em>对比其他框架<a href="https://cn.vuejs.org/v2/guide/comparison.html" target="_blank" rel="noopener">This link</a></em></p><p><em>关于项目的搭建请参考<a href="https://cn.vuejs.org/v2/guide/installation.html" target="_blank" rel="noopener">This link</a></em></p><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p> <strong>生命周期 先上图</strong><br><img src="https://cn.vuejs.org/images/lifecycle.png" alt=""><br>vue的生命周期很重要,总结一下什么时候用</p><table><thead><tr><th style="text-align:left">每个生命周期函数</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:left">beforeCreate</td><td style="text-align:center">组件实例刚被创建,组件属性计算之前,如data</td></tr><tr><td style="text-align:left">created</td><td style="text-align:center">组件实例创建完成,属性已绑定</td></tr><tr><td style="text-align:left">beforeMounted</td><td style="text-align:center">模板编译/挂载之前</td></tr><tr><td style="text-align:left">mounted</td><td style="text-align:center">模板编译/挂载之后</td></tr><tr><td style="text-align:left">beforeUpdate</td><td style="text-align:center">组件更新前</td></tr><tr><td style="text-align:left">update</td><td style="text-align:center">组件更新后</td></tr><tr><td style="text-align:left">beforeDestroy</td><td style="text-align:center">组件销毁前</td></tr><tr><td style="text-align:left">destroy</td><td style="text-align:center">组件销毁后</td></tr></tbody></table><blockquote><p><code>beforecreate</code> : 举个栗子：可以在这加个loading事件,此时$el、data 的值都为undefined<br><code>created</code> ：在这结束loading，还做一些初始化,此时可以拿到data的值，但是$el依旧为undefined<br><code>beforeMounted</code> ： $el的值为“虚拟”的元素节点<br><code>mounted</code> ： 在这发起后端请求，拿回数据，配合路由钩子做一些事情,可以获取到$el为真实的dom元素()<br><code>beforeUpdate , update</code> ： 数据更新触发这两个钩子,可以在在里搞事情,比如echarts的setOption<br><code>beforeDestory</code>： 你确认删除XX吗？$el 还会存在<br><code>destoryed</code> ：当前组件已被删除，清空相关内容,$el 还会存在</p></blockquote><p><strong><em>注意</em></strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">不要在选项属性或回调上使用箭头函数，比如</span><br><span class="line">created: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="keyword">this</span>.a) 或 </span><br><span class="line">vm.$watch(<span class="string">'a'</span>, newValue =&gt; <span class="keyword">this</span>.myMethod())</span><br><span class="line">因为箭头函数是和父级上下文绑定在一起的，<span class="keyword">this</span> 不会是如你所预期的 Vue 实例，经常导致 Uncaught <span class="built_in">TypeError</span>: Cannot read property <span class="keyword">of</span> <span class="literal">undefined</span> 或 Uncaught <span class="built_in">TypeError</span>: <span class="keyword">this</span>.myMethod is not a <span class="function"><span class="keyword">function</span> 之类的错误。</span></span><br></pre></td></tr></table></figure><h2 id="计算属性computed-和侦听属性watch"><a href="#计算属性computed-和侦听属性watch" class="headerlink" title="计算属性computed 和侦听属性watch"></a>计算属性computed 和侦听属性watch</h2><h3 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h3><p>对于复杂的逻辑豆可以使用计算属性,我们用的都很6,这说一下计算属性的一个坑<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">...mapState(&#123;</span><br><span class="line">date: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><em>计算属性是基于它们的依赖进行缓存的,也就是说上面代码的date不是动态更新的,因为new Date() 不是响应式依赖</em></p><h3 id="侦听器"><a href="#侦听器" class="headerlink" title="侦听器"></a>侦听器</h3><p>大部分的情况下计算属性就可以解决大部分问题,但是再执行异步或者开销比较大的操作时候<code>watch</code>更加有用</p><blockquote><p>总结,能用computed不用watch,watch一般用于监听异步操作的值</p></blockquote><h3 id="vm-watch-API"><a href="#vm-watch-API" class="headerlink" title="vm.$watch API"></a>vm.$watch API</h3><p>上栗子</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 键路径</span></span><br><span class="line">vm.$watch(<span class="string">'a.b.c'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">newVal, oldVal</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 做点什么</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数</span></span><br><span class="line">vm.$watch(</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.a + <span class="keyword">this</span>.b</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">newVal, oldVal</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 做点什么</span></span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>vm.$watch 返回一个取消观察函数，用来停止触发回调：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> unwatch = vm.$watch(<span class="string">'a'</span>, cb)</span><br><span class="line"><span class="comment">// 之后取消观察</span></span><br><span class="line">unwatch()</span><br></pre></td></tr></table></figure><ul><li>选项: deep<br>监听对象内部变化的时候使用,<strong>注意检测数组不需要</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vm.$watch(<span class="string">'someObject'</span>, callback, &#123;</span><br><span class="line">  deep: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line">vm.someObject.nestedValue = <span class="number">123</span></span><br></pre></td></tr></table></figure><ul><li>选项:immediate</li></ul><p>在选项参数中指定 <code>immediate: true</code> 将立即以表达式的当前值触发回调：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vm.$watch(<span class="string">'a'</span>, callback, &#123;</span><br><span class="line">  immediate: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 立即以 `a` 的当前值触发回调</span></span><br></pre></td></tr></table></figure><h2 id="Class-与-Style-绑定"><a href="#Class-与-Style-绑定" class="headerlink" title="Class 与 Style 绑定"></a>Class 与 Style 绑定</h2><p>在vue里面动态绑定style和class是非常方便的,有以下几种写法</p><h3 id="对象语法"><a href="#对象语法" class="headerlink" title="对象语法"></a>对象语法</h3><ul><li>传给 :class 一个对象，以动态地切换 class：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"&#123; active: isActive &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  isActive: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>绑定的数据对象不必内联定义在模板里</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"classObject"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  classObject: &#123;</span><br><span class="line">    active: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">'text-danger'</span>: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式还是绑定一个计算属性,由你自己发挥了</p><h3 id="数组语法"><a href="#数组语法" class="headerlink" title="数组语法"></a>数组语法</h3><p>可以把一个数组传给 :class，以应用一个 class 列表</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"[activeClass, errorClass]"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  activeClass: <span class="string">'active'</span>,</span><br><span class="line">  errorClass: <span class="string">'text-danger'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>渲染为</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"active text-danger"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="混用"><a href="#混用" class="headerlink" title="混用"></a>混用</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"[&#123; active: isActive &#125;, errorClass]"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h2><p>最常用的就是<code>on,change</code>事件,官方文档还给出了比较详细的介绍,处理键盘,鼠标,移动端的,具体点这看看[事件][1],这不在列举了</p><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><p>组件 (Component) 是 Vue.js 最强大的功能之一。组件可以扩展 HTML 元素，封装可重用的代码。</p><h3 id="使用组件"><a href="#使用组件" class="headerlink" title="使用组件"></a>使用组件</h3><p>我们一般会注册局部组件,这个有一个规范需要注意</p><blockquote><p>对于自定义标签的命名 Vue.js 不强制遵循 W3C 规则 (小写，并且包含一个短杠)，尽管这被认为是最佳实践</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局注册</span></span><br><span class="line">Vue.component(<span class="string">'my-component'</span>, &#123;</span><br><span class="line">  <span class="comment">// 选项</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//局部注册</span></span><br><span class="line"><span class="keyword">var</span> Child = &#123;</span><br><span class="line">  template: <span class="string">'&lt;div&gt;A custom component!&lt;/div&gt;'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    <span class="comment">// &lt;my-component&gt; 将只在父组件模板中可用</span></span><br><span class="line">    <span class="string">'my-component'</span>: Child</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>is</strong> 主要用于一些特殊的html结构内的一种变通写法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 这样写是会报错的</span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">my-row</span>&gt;</span>...<span class="tag">&lt;/<span class="name">my-row</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 用is</span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span> <span class="attr">is</span>=<span class="string">"my-row"</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Prop"><a href="#Prop" class="headerlink" title="Prop"></a>Prop</h3><p>在 Vue 中，父子组件的关系可以总结为 prop 向下传递，事件向上传递。父组件通过 prop 给子组件下发数据，子组件通过事件给父组件发送消息</p><p><strong>单向数据流</strong></p><p>prop 是单向绑定的：当父组件的属性变化时，将传导给子组件，但是不会反过来。我们有时候需要依赖prop数据,可以这样做</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">//定义一个局部变量，并用 prop 的值初始化它：</span><br><span class="line">props: [&apos;initialCounter&apos;],</span><br><span class="line">data: function () &#123;</span><br><span class="line">return &#123; counter: this.initialCounter &#125;</span><br><span class="line">&#125;</span><br><span class="line">//定义一个计算属性，处理 prop 的值并返回。</span><br><span class="line">props: [&apos;size&apos;],</span><br><span class="line">computed: &#123;</span><br><span class="line">normalizedSize: function () &#123;</span><br><span class="line">return this.size.trim().toLowerCase()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">注意对象和数组是引用类型，指向同一个内存空间，如果 prop 是一个对象或数组，在子组件内部改变它会影响父组件的状态。这时VUE会发出警告.</span><br><span class="line"></span><br><span class="line">**字面量语法 vs 动态语法**</span><br><span class="line"></span><br><span class="line">这里是个坑,常犯的一个错误是使用字面量语法传递数值</span><br><span class="line"></span><br><span class="line">```html</span><br><span class="line">&lt;!-- 传递了一个字符串 &quot;1&quot; --&gt;</span><br><span class="line">&lt;comp some-prop=&quot;1&quot;&gt;&lt;/comp&gt;</span><br></pre></td></tr></table></figure><p>要想传Number 1,要是用v-bind</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 传递真正的数值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">comp</span> <span class="attr">v-bind:some-prop</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">comp</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Prop 验证</strong></p><p>我建议prop都加上验证,这样可以避免一些不必要的错误</p><p><strong>自定义事件</strong></p><ul><li>使用 <code>$on(eventName)</code> 监听事件</li><li>使用 <code>$emit(eventName, optionalPayload)</code> 触发事件</li><li>监听一个原生事件,可以使用 v-on 的修饰符 .native</li></ul><p><strong><code>.sync</code> prop 进行“双向绑定”</strong></p><p>从 2.3.0 起重新引入了 .sync 修饰符，但是这次它只是作为一个编译时的语法糖存在。它会被扩展为一个自动更新父组件属性的 v-on 监听器</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 如下代码</span><br><span class="line"><span class="tag">&lt;<span class="name">comp</span> <span class="attr">:foo.sync</span>=<span class="string">"bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">comp</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//会被扩展为：</span><br><span class="line"><span class="tag">&lt;<span class="name">comp</span> <span class="attr">:foo</span>=<span class="string">"bar"</span> @<span class="attr">update:foo</span>=<span class="string">"val =&gt; bar = val"</span>&gt;</span><span class="tag">&lt;/<span class="name">comp</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//当子组件需要更新 foo 的值时，它需要显式地触发一个更新事件：</span><br><span class="line">this.$emit('update:foo', newValue)</span><br></pre></td></tr></table></figure><h3 id="使用-Slot-分发内容"><a href="#使用-Slot-分发内容" class="headerlink" title="使用 Slot 分发内容"></a>使用 Slot 分发内容</h3><p>slot在写组件的时候很有用,具体表现是父组件不知道具体不值到会收到什么,使组件耦合性更低</p><p>slider组件<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"slider-group"</span> <span class="attr">ref</span>=<span class="string">"sliderGroup"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>引用slider组件<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">slider</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"item in recommends"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">"item.linkUrl"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"needsclick"</span> @<span class="attr">load</span>=<span class="string">"loadImage"</span> <span class="attr">:src</span>=<span class="string">"item.picUrl"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">slider</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>slot有很多的用法,上面说的是最基本的使用方法,更加深入的了解请点<a href="https://cn.vuejs.org/v2/guide/components.html#使用-Slot-分发内容" target="_blank" rel="noopener">这里</a></p><h3 id="子组件索引"><a href="#子组件索引" class="headerlink" title="子组件索引"></a>子组件索引</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"slider-group"</span> <span class="attr">ref</span>=<span class="string">"sliderGroup"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>访问子组件。为此可以使用 ref,可以来简单操作一下dom<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.children = <span class="keyword">this</span>.$refs.sliderGroup.children</span><br><span class="line"><span class="keyword">this</span>.$refs.sliderGroup.style.width = width + <span class="string">'px'</span></span><br></pre></td></tr></table></figure></p><blockquote><p>$refs 只在组件渲染完成后才填充，并且它是非响应式的。它仅仅作为一个直接访问子组件的应急方案——应当避免在模版或计算属性中使用 $refs。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;VUE&quot;&gt;&lt;a href=&quot;#VUE&quot; class=&quot;headerlink&quot; title=&quot;VUE&quot;&gt;&lt;/a&gt;VUE&lt;/h1&gt;&lt;p&gt;Vue 是一套构建用户界面的渐进式框架。与其他重量级框架不同的是，Vue 采用自底向上增量开发的设计。Vue 的核心库只关注视图层，它不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与单文件组件和 Vue 生态系统支持的库结合使用时，Vue 也完全能够为复杂的单页应用程序提供驱动。&lt;/p&gt;
&lt;h2 id=&quot;特点&quot;&gt;&lt;a href=&quot;#特点&quot; class=&quot;headerlink&quot; title=&quot;特点&quot;&gt;&lt;/a&gt;特点&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;易用&lt;/strong&gt;&lt;br&gt;已经会了HTML,CSS,JavaScript即刻阅读指南开始构建应用！&lt;br&gt;&lt;strong&gt;灵活&lt;/strong&gt;&lt;br&gt;简单小巧的核心，渐进式技术栈，足以应付任何规模的应用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;性能&lt;/strong&gt;&lt;br&gt;20kb min+gzip 运行大小&lt;br&gt;超快虚拟 DOM&lt;br&gt;最省心的优化&lt;/p&gt;
    
    </summary>
    
      <category term="Vue" scheme="http://douzhiwei.top/categories/Vue/"/>
    
    
      <category term="vue" scheme="http://douzhiwei.top/tags/vue/"/>
    
  </entry>
  
</feed>
