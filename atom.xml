<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>豆豆豆</title>
  
  <subtitle>学无止境</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://douzhiwei.top/"/>
  <updated>2018-03-13T12:28:15.000Z</updated>
  <id>http://douzhiwei.top/</id>
  
  <author>
    <name>豆</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue项目总结-基础</title>
    <link href="http://douzhiwei.top/2018/03/13/vue%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93-%E5%9F%BA%E7%A1%80/"/>
    <id>http://douzhiwei.top/2018/03/13/vue项目总结-基础/</id>
    <published>2018-03-13T09:02:10.000Z</published>
    <updated>2018-03-13T12:28:15.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="VUE"><a href="#VUE" class="headerlink" title="VUE"></a>VUE</h3><p>Vue 是一套构建用户界面的渐进式框架。与其他重量级框架不同的是，Vue 采用自底向上增量开发的设计。Vue 的核心库只关注视图层，它不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与单文件组件和 Vue 生态系统支持的库结合使用时，Vue 也完全能够为复杂的单页应用程序提供驱动。</p><h5 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h5><p><strong>易用</strong><br>已经会了HTML,CSS,JavaScript即刻阅读指南开始构建应用！<br><strong>灵活</strong><br>简单小巧的核心，渐进式技术栈，足以应付任何规模的应用。</p><p><strong>性能</strong><br>20kb min+gzip 运行大小<br>超快虚拟 DOM<br>最省心的优化</p><a id="more"></a><p><em>对比其他框架<a href="https://cn.vuejs.org/v2/guide/comparison.html" target="_blank" rel="noopener">This link</a></em></p><p><em>关于项目的搭建请参考<a href="https://cn.vuejs.org/v2/guide/installation.html" target="_blank" rel="noopener">This link</a></em></p><h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><p> <strong>生命周期 先上图</strong><br><img src="https://cn.vuejs.org/images/lifecycle.png" alt=""><br>vue的生命周期很重要,总结一下什么时候用</p><table><thead><tr><th style="text-align:left">每个生命周期函数</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:left">beforeCreate</td><td style="text-align:center">组件实例刚被创建,组件属性计算之前,如data</td></tr><tr><td style="text-align:left">created</td><td style="text-align:center">组件实例创建完成,属性已绑定</td></tr><tr><td style="text-align:left">beforeMounted</td><td style="text-align:center">模板编译/挂载之前</td></tr><tr><td style="text-align:left">mounted</td><td style="text-align:center">模板编译/挂载之后</td></tr><tr><td style="text-align:left">beforeUpdate</td><td style="text-align:center">组件更新前</td></tr><tr><td style="text-align:left">update</td><td style="text-align:center">组件更新后</td></tr><tr><td style="text-align:left">beforeDestroy</td><td style="text-align:center">组件销毁前</td></tr><tr><td style="text-align:left">destroy</td><td style="text-align:center">组件销毁后</td></tr></tbody></table><blockquote><p><code>beforecreate</code> : 举个栗子：可以在这加个loading事件,此时$el、data 的值都为undefined<br><code>created</code> ：在这结束loading，还做一些初始化,此时可以拿到data的值，但是$el依旧为undefined<br><code>beforeMounted</code> ： $el的值为“虚拟”的元素节点<br><code>mounted</code> ： 在这发起后端请求，拿回数据，配合路由钩子做一些事情,可以获取到$el为真实的dom元素()<br><code>beforeUpdate , update</code> ： 数据更新触发这两个钩子,可以在在里搞事情,比如echarts的setOption<br><code>beforeDestory</code>： 你确认删除XX吗？$el 还会存在<br><code>destoryed</code> ：当前组件已被删除，清空相关内容,$el 还会存在</p></blockquote><p><strong><em>注意</em></strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">不要在选项属性或回调上使用箭头函数，比如</span><br><span class="line">created: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="keyword">this</span>.a) 或 </span><br><span class="line">vm.$watch(<span class="string">'a'</span>, newValue =&gt; <span class="keyword">this</span>.myMethod())</span><br><span class="line">因为箭头函数是和父级上下文绑定在一起的，<span class="keyword">this</span> 不会是如你所预期的 Vue 实例，经常导致 Uncaught <span class="built_in">TypeError</span>: Cannot read property <span class="keyword">of</span> <span class="literal">undefined</span> 或 Uncaught <span class="built_in">TypeError</span>: <span class="keyword">this</span>.myMethod is not a <span class="function"><span class="keyword">function</span> 之类的错误。</span></span><br></pre></td></tr></table></figure><h4 id="计算属性computed-和侦听属性watch"><a href="#计算属性computed-和侦听属性watch" class="headerlink" title="计算属性computed 和侦听属性watch"></a>计算属性computed 和侦听属性watch</h4><h5 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h5><p>对于复杂的逻辑豆可以使用计算属性,我们用的都很6,这说一下计算属性的一个坑<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">...mapState(&#123;</span><br><span class="line">date: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><em>计算属性是基于它们的依赖进行缓存的,也就是说上面代码的date不是动态更新的,因为new Date() 不是响应式依赖</em></p><h5 id="侦听器"><a href="#侦听器" class="headerlink" title="侦听器"></a>侦听器</h5><p>大部分的情况下计算属性就可以解决大部分问题,但是再执行异步或者开销比较大的操作时候<code>watch</code>更加有用</p><blockquote><p>总结,能用computed不用watch,watch一般用于监听异步操作的值</p></blockquote><h6 id="vm-watch-API"><a href="#vm-watch-API" class="headerlink" title="vm.$watch API"></a>vm.$watch API</h6><p>上栗子<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 键路径</span></span><br><span class="line">vm.$watch(<span class="string">'a.b.c'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">newVal, oldVal</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 做点什么</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数</span></span><br><span class="line">vm.$watch(</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.a + <span class="keyword">this</span>.b</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">newVal, oldVal</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 做点什么</span></span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>vm.$watch 返回一个取消观察函数，用来停止触发回调：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> unwatch = vm.$watch(<span class="string">'a'</span>, cb)</span><br><span class="line"><span class="comment">// 之后取消观察</span></span><br><span class="line">unwatch()</span><br></pre></td></tr></table></figure><ul><li>选项: deep<br>监听对象内部变化的时候使用,<strong>注意检测数组不需要</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vm.$watch(<span class="string">'someObject'</span>, callback, &#123;</span><br><span class="line">  deep: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line">vm.someObject.nestedValue = <span class="number">123</span></span><br></pre></td></tr></table></figure><ul><li>选项:immediate</li></ul><p>在选项参数中指定 <code>immediate: true</code> 将立即以表达式的当前值触发回调：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vm.$watch(<span class="string">'a'</span>, callback, &#123;</span><br><span class="line">  immediate: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 立即以 `a` 的当前值触发回调</span></span><br></pre></td></tr></table></figure><h4 id="Class-与-Style-绑定"><a href="#Class-与-Style-绑定" class="headerlink" title="Class 与 Style 绑定"></a>Class 与 Style 绑定</h4><p>在vue里面动态绑定style和class是非常方便的,有以下几种写法</p><h5 id="对象语法"><a href="#对象语法" class="headerlink" title="对象语法"></a>对象语法</h5><ul><li>传给 :class 一个对象，以动态地切换 class：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"&#123; active: isActive &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  isActive: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>绑定的数据对象不必内联定义在模板里</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"classObject"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  classObject: &#123;</span><br><span class="line">    active: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">'text-danger'</span>: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式还是绑定一个计算属性,由你自己发挥了</p><h5 id="数组语法"><a href="#数组语法" class="headerlink" title="数组语法"></a>数组语法</h5><p>可以把一个数组传给 :class，以应用一个 class 列表</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"[activeClass, errorClass]"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  activeClass: <span class="string">'active'</span>,</span><br><span class="line">  errorClass: <span class="string">'text-danger'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>渲染为</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"active text-danger"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="混用"><a href="#混用" class="headerlink" title="混用"></a>混用</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"[&#123; active: isActive &#125;, errorClass]"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h4><p>最常用的就是<code>on,change</code>事件,官方文档还给出了比较详细的介绍,处理键盘,鼠标,移动端的,具体点这看看<a href="https://cn.vuejs.org/v2/guide/events.html" target="_blank" rel="noopener">事件</a>,这不在列举了</p><h4 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h4><p>组件 (Component) 是 Vue.js 最强大的功能之一。组件可以扩展 HTML 元素，封装可重用的代码。</p><h5 id="使用组件"><a href="#使用组件" class="headerlink" title="使用组件"></a>使用组件</h5><p>我们一般会注册局部组件,这个有一个规范需要注意</p><blockquote><p>对于自定义标签的命名 Vue.js 不强制遵循 W3C 规则 (小写，并且包含一个短杠)，尽管这被认为是最佳实践</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局注册</span></span><br><span class="line">Vue.component(<span class="string">'my-component'</span>, &#123;</span><br><span class="line">  <span class="comment">// 选项</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//局部注册</span></span><br><span class="line"><span class="keyword">var</span> Child = &#123;</span><br><span class="line">  template: <span class="string">'&lt;div&gt;A custom component!&lt;/div&gt;'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    <span class="comment">// &lt;my-component&gt; 将只在父组件模板中可用</span></span><br><span class="line">    <span class="string">'my-component'</span>: Child</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>is</strong> 主要用于一些特殊的html结构内的一种变通写法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 这样写是会报错的</span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">my-row</span>&gt;</span>...<span class="tag">&lt;/<span class="name">my-row</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 用is</span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span> <span class="attr">is</span>=<span class="string">"my-row"</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="Prop"><a href="#Prop" class="headerlink" title="Prop"></a>Prop</h5><p>在 Vue 中，父子组件的关系可以总结为 prop 向下传递，事件向上传递。父组件通过 prop 给子组件下发数据，子组件通过事件给父组件发送消息。看看它们是怎么工作的<br><img src="https://cn.vuejs.org/images/props-events.png" alt="此处输入图片的描述"></p><p><strong>单向数据流</strong></p><p>prop 是单向绑定的：当父组件的属性变化时，将传导给子组件，但是不会反过来。我们有时候需要依赖prop数据,可以这样做</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个局部变量，并用 prop 的值初始化它：</span></span><br><span class="line">props: [<span class="string">'initialCounter'</span>],</span><br><span class="line">data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> &#123; <span class="attr">counter</span>: <span class="keyword">this</span>.initialCounter &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义一个计算属性，处理 prop 的值并返回。</span></span><br><span class="line">props: [<span class="string">'size'</span>],</span><br><span class="line">computed: &#123;</span><br><span class="line">normalizedSize: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.size.trim().toLowerCase()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">``</span><span class="string">`  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">*注意对象和数组是引用类型，指向同一个内存空间，如果 prop 是一个对象或数组，在子组件内部改变它会影响父组件的状态。这时VUE会发出警告*</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">**字面量语法 vs 动态语法**</span></span><br><span class="line"><span class="string">这里是个坑,常犯的一个错误是使用字面量语法传递数值</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>html</span><br><span class="line">&lt;!-- 传递了一个字符串 <span class="string">"1"</span> --&gt;</span><br><span class="line">&lt;comp some-prop=<span class="string">"1"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">comp</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>要想传Number 1,要是用v-bind</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 传递真正的数值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">comp</span> <span class="attr">v-bind:some-prop</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">comp</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Prop 验证</strong></p><p>我建议prop都加上验证,这样可以避免一些不必要的错误</p><p><strong>自定义事件</strong></p><ul><li>使用 <code>$on(eventName)</code> 监听事件</li><li>使用 <code>$emit(eventName, optionalPayload)</code> 触发事件</li><li>监听一个原生事件,可以使用 v-on 的修饰符 .native</li></ul><p><strong><code>.sync</code> prop 进行“双向绑定”</strong></p><p>从 2.3.0 起重新引入了 .sync 修饰符，但是这次它只是作为一个编译时的语法糖存在。它会被扩展为一个自动更新父组件属性的 v-on 监听器</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 如下代码</span><br><span class="line"><span class="tag">&lt;<span class="name">comp</span> <span class="attr">:foo.sync</span>=<span class="string">"bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">comp</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//会被扩展为：</span><br><span class="line"><span class="tag">&lt;<span class="name">comp</span> <span class="attr">:foo</span>=<span class="string">"bar"</span> @<span class="attr">update:foo</span>=<span class="string">"val =&gt; bar = val"</span>&gt;</span><span class="tag">&lt;/<span class="name">comp</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//当子组件需要更新 foo 的值时，它需要显式地触发一个更新事件：</span><br><span class="line">this.$emit('update:foo', newValue)</span><br></pre></td></tr></table></figure><h5 id="使用-Slot-分发内容"><a href="#使用-Slot-分发内容" class="headerlink" title="使用 Slot 分发内容"></a>使用 Slot 分发内容</h5><p>slot在写组件的时候很有用,具体表现是父组件不知道具体不值到会收到什么,使组件耦合性更低</p><p>slider组件<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"slider-group"</span> <span class="attr">ref</span>=<span class="string">"sliderGroup"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>引用slider组件<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">slider</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"item in recommends"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">"item.linkUrl"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"needsclick"</span> @<span class="attr">load</span>=<span class="string">"loadImage"</span> <span class="attr">:src</span>=<span class="string">"item.picUrl"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">slider</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>slot有很多的用法,上面说的是最基本的使用方法,更加深入的了解请点<a href="https://cn.vuejs.org/v2/guide/components.html#使用-Slot-分发内容" target="_blank" rel="noopener">这里</a></p><h5 id="子组件索引"><a href="#子组件索引" class="headerlink" title="子组件索引"></a>子组件索引</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"slider-group"</span> <span class="attr">ref</span>=<span class="string">"sliderGroup"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>访问子组件。为此可以使用 ref,可以来简单操作一下dom<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.children = <span class="keyword">this</span>.$refs.sliderGroup.children</span><br><span class="line"><span class="keyword">this</span>.$refs.sliderGroup.style.width = width + <span class="string">'px'</span></span><br></pre></td></tr></table></figure></p><blockquote><p>$refs 只在组件渲染完成后才填充，并且它是非响应式的。它仅仅作为一个直接访问子组件的应急方案——应当避免在模版或计算属性中使用 $refs。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;VUE&quot;&gt;&lt;a href=&quot;#VUE&quot; class=&quot;headerlink&quot; title=&quot;VUE&quot;&gt;&lt;/a&gt;VUE&lt;/h3&gt;&lt;p&gt;Vue 是一套构建用户界面的渐进式框架。与其他重量级框架不同的是，Vue 采用自底向上增量开发的设计。Vue 的核心库只关注视图层，它不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与单文件组件和 Vue 生态系统支持的库结合使用时，Vue 也完全能够为复杂的单页应用程序提供驱动。&lt;/p&gt;
&lt;h5 id=&quot;特点&quot;&gt;&lt;a href=&quot;#特点&quot; class=&quot;headerlink&quot; title=&quot;特点&quot;&gt;&lt;/a&gt;特点&lt;/h5&gt;&lt;p&gt;&lt;strong&gt;易用&lt;/strong&gt;&lt;br&gt;已经会了HTML,CSS,JavaScript即刻阅读指南开始构建应用！&lt;br&gt;&lt;strong&gt;灵活&lt;/strong&gt;&lt;br&gt;简单小巧的核心，渐进式技术栈，足以应付任何规模的应用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;性能&lt;/strong&gt;&lt;br&gt;20kb min+gzip 运行大小&lt;br&gt;超快虚拟 DOM&lt;br&gt;最省心的优化&lt;/p&gt;
    
    </summary>
    
      <category term="DMP总结" scheme="http://douzhiwei.top/categories/DMP%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="vue" scheme="http://douzhiwei.top/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>ES6常用语法概括-帮助回顾</title>
    <link href="http://douzhiwei.top/2018/03/13/ES6%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95%E6%A6%82%E6%8B%AC-%E5%B8%AE%E5%8A%A9%E5%9B%9E%E9%A1%BE/"/>
    <id>http://douzhiwei.top/2018/03/13/ES6常用语法概括-帮助回顾/</id>
    <published>2018-03-13T08:32:25.000Z</published>
    <updated>2018-03-13T08:40:46.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="ES6常用语法概括"><a href="#ES6常用语法概括" class="headerlink" title="ES6常用语法概括"></a>ES6常用语法概括</h4><ul><li>Babel 将ES6转为ES5</li><li>配置babelrc</li><li>presets字段设置的是转码规则</li><li>把这些规则加入.babelrc</li><li><p>babel默认只是转语法,不转API</p></li><li><p><code>let</code>和<code>const</code></p></li><li>不存在变量提升</li><li>暂时性死区TDZ</li><li>不可以重复声明</li><li>块级作用域 块级作用域防止变量提示发生错误</li><li><p><code>const</code> 声明对象要小心了 因为 保存的是指针 或 地址</p></li><li><p>变量的解构</p></li><li>数组的解构</li><li>对象的解构</li><li>字符串的解构</li></ul><a id="more"></a><p><strong>用途</strong></p><ul><li>交换变量的值</li><li>从函数返回多个值</li><li>定义函数参数</li><li>提取json数据</li><li>函数参数的默认值</li><li>遍历map</li><li>输入模块是的指定方法</li></ul><ul><li>字符串扩展</li><li>新增<code>includes(),startsWith(),endsWith(),repeat()</code></li><li><code>padStart(),padEnd()</code> —es7</li><li><p>模板字符串 <code>枪枪枪枪${}}</code></p></li><li><p>数值的扩展</p></li><li>新增方法 <code>Number.isFinite(),Number.isNaN()</code></li><li>ES6 将全局方法<code>parseInt()</code>和<code>parseFloat()</code>，移植到Number对象上面，行为完全保持不变</li><li><code>Number.isInteger()</code>用来判断一个值是否为整数。需要注意的是，在 JavaScript 内部，整数和浮点数是同样的储存方法，所以3和3.0被视为同一个值</li><li><p>Math 新增17个静态方法</p></li><li><p>函数的扩展</p></li><li>函数的默认值(内容较多)</li><li><code>rest</code>参数,用于获取多余参数。<code>rest</code> 参数搭配的变量是一个数组，该变量将多余的参数放入数组中</li><li>剪头函数=&gt; 剪头函数的几个注意点</li><li>尾调用优化</li><li><p>尾递归</p></li><li><p>数组的扩展</p></li><li>扩展运算符 <code>...</code>它好比 <code>rest</code> 参数的逆运算，将一个数组转为用逗号分隔的参数序列。(比较rest参数)</li><li>应用: 合并数组 与解构赋值结合 函数的返回值 字符串转为数组(实现Iterator接口的对象)</li><li><code>Array.from()</code>方法用于将两类对象转为真正的数组：类似数组的对象（array-like object）和可遍历（iterable）的对象（包括ES6新增的数据结构Set和Map</li><li><code>Array.of()</code>方法用于将一组值，转换为数组</li><li><p>数组实例的<code>find()</code>和<code>findIndex()</code>和<code>entries()</code>,<code>key()</code>,<code>values()</code>,<code>includes()</code></p></li><li><p>对象的扩展</p></li><li>属性的简洁表示法</li><li><code>Object.is()</code>比较两个对象是否相等 <code>Object.assign()</code>对象合并</li><li><p>属性的遍历 5个方法</p></li><li><p>Symbol<br>第七种基本数据类型 解决属性名冲突<br>知道有这个玩意就行了</p></li><li><p><code>Set</code>和<code>Map</code> 数据结构</p></li><li><code>Set</code>类似数组但成员都是唯一 =&gt; […new Set(array)] 数组去重</li><li><p><code>Map</code> 键可以使用任意数据类型</p></li><li><p>Promise对象</p></li><li>ES6原生提供Promise对象</li><li>两个特点</li><li>对象状态不收外界影响,有三种状态<br>Pending 进行中<br>Resolved 已完成<br>Rejected 已失败</li><li>一点状态改变就不会在变,任何时候都可以得到这个结果<br>两种状态改变的可能<br>Pending-&gt;Resolved 或者 Pending -&gt;Rejected</li><li>缺点</li><li>一旦创建无法取消</li><li>如果不设置回掉函数 内部出差不知道</li><li>当处于Pending状态是无法的值进展到那一步了</li><li><strong>基本用法贴个例子</strong> <code>Promise</code>对象实现的 <code>Ajax</code> 操作</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getJSON = <span class="function"><span class="keyword">function</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> client = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">client.open(<span class="string">"GET"</span>, url);</span><br><span class="line">client.onreadystatechange = handler;</span><br><span class="line">client.responseType = <span class="string">"json"</span>;</span><br><span class="line">client.setRequestHeader(<span class="string">"Accept"</span>, <span class="string">"application/json"</span>);</span><br><span class="line">client.send();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handler</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.readyState !== <span class="number">4</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.status === <span class="number">200</span>) &#123;</span><br><span class="line">resolve(<span class="keyword">this</span>.response);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="keyword">this</span>.statusText));</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> promise;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">getJSON(<span class="string">"/posts.json"</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">json</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Contents: '</span> + json);</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.error(<span class="string">'出错了'</span>, error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>还有很多方法不在列出</p><ul><li><code>Iterator</code>和<code>for...of</code></li><li><code>Iterator</code> 的作用有三个：</li><li>为各种数据结构，提供一个统一的、简便的访问接口</li><li>使得数据结构的成员能够按某种次序排列</li><li><code>ES6</code>创造了一种新的遍历命令<code>for...of</code>循环，<code>Iterator</code>接口主要供<code>for...of</code>消费</li><li>原生具备接口的数据结构</li></ul><ul><li>Module语法</li><li><code>CommonJS</code>和<code>AMD</code> 于<code>ES6</code>模块的区别</li><li><code>CommonJS</code>用于服务器,<code>AMD</code>用于浏览器</li><li><code>ES6</code>模块是静态的编译时就能获取依赖关系,<code>Common</code>和<code>AMD</code>都只能在运行时得到<code>CommonJS</code> 模块输出的是一个值的拷贝，<br><code>ES6</code> 模块输出的是值的引用。</li><li><code>CommonJS</code>模块是对象,输入时必须查找对象属性,<code>ES6</code>模块不是对象,是通过<code>export</code>显示输出再通过import导入</li><li><p>尽量不要一起使用require和import</p></li><li><p>编程风格</p></li><li><code>let</code> 取代 <code>var</code></li><li>全局常量和线程安全</li><li>在<code>let</code> 和<code>const</code>之间，建议优先使用<code>const</code>，尤其是在全局环境，不应该设置变量，只应设置常量。</li><li>静态字符串一律使用单引号或反引号，不使用双引号。动态字符串使用反引号。</li><li>优先使用解构赋值</li><li>使用<code>...</code>拷贝数组</li><li>使用<code>import</code>取代<code>require</code>,使用<code>export</code>取代 <code>module.exports</code></li></ul><p><strong>更多请点这</strong> <a href="http://es6.ruanyifeng.com/" target="_blank" rel="noopener">ES6</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;ES6常用语法概括&quot;&gt;&lt;a href=&quot;#ES6常用语法概括&quot; class=&quot;headerlink&quot; title=&quot;ES6常用语法概括&quot;&gt;&lt;/a&gt;ES6常用语法概括&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Babel 将ES6转为ES5&lt;/li&gt;
&lt;li&gt;配置babelrc&lt;/li&gt;
&lt;li&gt;presets字段设置的是转码规则&lt;/li&gt;
&lt;li&gt;把这些规则加入.babelrc&lt;/li&gt;
&lt;li&gt;&lt;p&gt;babel默认只是转语法,不转API&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;let&lt;/code&gt;和&lt;code&gt;const&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;不存在变量提升&lt;/li&gt;
&lt;li&gt;暂时性死区TDZ&lt;/li&gt;
&lt;li&gt;不可以重复声明&lt;/li&gt;
&lt;li&gt;块级作用域 块级作用域防止变量提示发生错误&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;const&lt;/code&gt; 声明对象要小心了 因为 保存的是指针 或 地址&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;变量的解构&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;数组的解构&lt;/li&gt;
&lt;li&gt;对象的解构&lt;/li&gt;
&lt;li&gt;字符串的解构&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="DMP总结" scheme="http://douzhiwei.top/categories/DMP%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="JavaScript" scheme="http://douzhiwei.top/tags/JavaScript/"/>
    
      <category term="ES6" scheme="http://douzhiwei.top/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>js实现随机选取10–100之间的10个数字，存入一个数组，并排序</title>
    <link href="http://douzhiwei.top/2018/03/12/js%E5%AE%9E%E7%8E%B0%E9%9A%8F%E6%9C%BA%E9%80%89%E5%8F%9610%E2%80%93100%E4%B9%8B%E9%97%B4%E7%9A%8410%E4%B8%AA%E6%95%B0%E5%AD%97%EF%BC%8C%E5%AD%98%E5%85%A5%E4%B8%80%E4%B8%AA%E6%95%B0%E7%BB%84%EF%BC%8C%E5%B9%B6%E6%8E%92%E5%BA%8F/"/>
    <id>http://douzhiwei.top/2018/03/12/js实现随机选取10–100之间的10个数字，存入一个数组，并排序/</id>
    <published>2018-03-12T15:43:51.000Z</published>
    <updated>2018-03-13T08:16:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>看过刚才的Math()常用方法,想起来一个题=&gt;js实现随机选取10–100之间的10个数字，存入一个数组，并排序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> randomNum = <span class="function">(<span class="params">array, len, min, max</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (array.length &gt;= len) &#123;</span><br><span class="line">        array.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> a - b</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> array</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> nowNub = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (max - min + <span class="number">1</span>)) + min</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">let</span> i = <span class="number">0</span>; i &lt; array.length; i++ ) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nowNub == array[i]) &#123;</span><br><span class="line">            randomNum(array, len, min, max)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    array.push(nowNub)</span><br><span class="line">    randomNum(array, len, min, max)</span><br><span class="line">    <span class="keyword">return</span> array</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = []</span><br><span class="line"><span class="keyword">let</span> b = randomNum(arr, <span class="number">10</span>, <span class="number">10</span>, <span class="number">100</span>);</span><br><span class="line"><span class="built_in">console</span>.log(b)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;看过刚才的Math()常用方法,想起来一个题=&amp;gt;js实现随机选取10–100之间的10个数字，存入一个数组，并排序&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span cl
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://douzhiwei.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Math对象常用方法-备忘</title>
    <link href="http://douzhiwei.top/2018/03/12/Math%E5%AF%B9%E8%B1%A1%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95-%E5%A4%87%E5%BF%98/"/>
    <id>http://douzhiwei.top/2018/03/12/Math对象常用方法-备忘/</id>
    <published>2018-03-12T15:17:00.000Z</published>
    <updated>2018-03-13T08:15:25.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Math对象有很多属性和方法,记录一下常用的</strong></p><ul><li><code>Math.abs(x)</code> 返回x的绝对值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.abs(<span class="string">'-1'</span>);     <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">Math</span>.abs(<span class="number">-2</span>);       <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">Math</span>.abs(<span class="literal">null</span>);     <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">Math</span>.abs(<span class="string">"string"</span>); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">Math</span>.abs();         <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure><ul><li><code>Math.ceil(x)</code>向上取整: 大于或等于一个给定数字的最小整数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.ceil(<span class="number">.95</span>);    <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">Math</span>.ceil(<span class="number">4</span>);      <span class="comment">// 4</span></span><br><span class="line"><span class="built_in">Math</span>.ceil(<span class="number">7.004</span>);  <span class="comment">// 8</span></span><br><span class="line"><span class="built_in">Math</span>.ceil(<span class="number">-0.95</span>);  <span class="comment">// -0</span></span><br><span class="line"><span class="built_in">Math</span>.ceil(<span class="number">-4</span>);     <span class="comment">// -4</span></span><br><span class="line"><span class="built_in">Math</span>.ceil(<span class="number">-7.004</span>); <span class="comment">// -7</span></span><br></pre></td></tr></table></figure><a id="more"></a><ul><li><code>Math.floor(x)</code>向下取整:小于或等于指定数字的最大整数的数字</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.floor( <span class="number">45.95</span>); </span><br><span class="line"><span class="comment">// 45 </span></span><br><span class="line"><span class="built_in">Math</span>.floor( <span class="number">45.05</span>); </span><br><span class="line"><span class="comment">// 45 </span></span><br><span class="line"><span class="built_in">Math</span>.floor( <span class="number">4</span> ); </span><br><span class="line"><span class="comment">// 4 </span></span><br><span class="line"><span class="built_in">Math</span>.floor(<span class="number">-45.05</span>); </span><br><span class="line"><span class="comment">// -46 </span></span><br><span class="line"><span class="built_in">Math</span>.floor(<span class="number">-45.95</span>); </span><br><span class="line"><span class="comment">// -46</span></span><br></pre></td></tr></table></figure><ul><li><code>Math.max([value1[,value2, ...]])</code> 函数返回一组数中的最大值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.max(<span class="number">10</span>, <span class="number">20</span>);   <span class="comment">//  20</span></span><br><span class="line"><span class="built_in">Math</span>.max(<span class="number">-10</span>, <span class="number">-20</span>); <span class="comment">// -10</span></span><br><span class="line"><span class="built_in">Math</span>.max(<span class="number">-10</span>, <span class="number">20</span>);  <span class="comment">//  20</span></span><br></pre></td></tr></table></figure><ul><li><p><code>Math.min([value1[,value2, ...]])</code>返回零个或更多个数值的最小值</p></li><li><p><code>Math.random()</code>一个浮点型伪随机数字在0（包括0）和1（不包括）之间</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//得到一个大于等于0，小于1之间的随机数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandom</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.random();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//得到一个两数之间的随机数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandomArbitrary</span>(<span class="params">min, max</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.random() * (max - min) + min;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这个例子返回了一个在指定值之间的随机数。这个值比min大（可能与min相等）, 以及比max小(但是不等于max).</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//得到一个两数之间的随机整数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandomInt</span>(<span class="params">min, max</span>) </span>&#123;</span><br><span class="line">  min = <span class="built_in">Math</span>.ceil(min);</span><br><span class="line">  max = <span class="built_in">Math</span>.floor(max);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (max - min)) + min; <span class="comment">//The maximum is exclusive and the minimum is inclusive</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//得到一个两数之间的随机整数，包括两个数在内</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandomIntInclusive</span>(<span class="params">min, max</span>) </span>&#123;</span><br><span class="line">  min = <span class="built_in">Math</span>.ceil(min);</span><br><span class="line">  max = <span class="built_in">Math</span>.floor(max);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (max - min + <span class="number">1</span>)) + min</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>Math.round(X)</code>返回一个数字四舍五入后最接近的整数</li></ul><p><em>以上内容摘自MDN</em></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Math对象有很多属性和方法,记录一下常用的&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Math.abs(x)&lt;/code&gt; 返回x的绝对值&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.abs(&lt;span class=&quot;string&quot;&gt;&#39;-1&#39;&lt;/span&gt;);     &lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.abs(&lt;span class=&quot;number&quot;&gt;-2&lt;/span&gt;);       &lt;span class=&quot;comment&quot;&gt;// 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.abs(&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;);     &lt;span class=&quot;comment&quot;&gt;// 0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.abs(&lt;span class=&quot;string&quot;&gt;&quot;string&quot;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// NaN&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.abs();         &lt;span class=&quot;comment&quot;&gt;// NaN&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Math.ceil(x)&lt;/code&gt;向上取整: 大于或等于一个给定数字的最小整数&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.ceil(&lt;span class=&quot;number&quot;&gt;.95&lt;/span&gt;);    &lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.ceil(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;);      &lt;span class=&quot;comment&quot;&gt;// 4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.ceil(&lt;span class=&quot;number&quot;&gt;7.004&lt;/span&gt;);  &lt;span class=&quot;comment&quot;&gt;// 8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.ceil(&lt;span class=&quot;number&quot;&gt;-0.95&lt;/span&gt;);  &lt;span class=&quot;comment&quot;&gt;// -0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.ceil(&lt;span class=&quot;number&quot;&gt;-4&lt;/span&gt;);     &lt;span class=&quot;comment&quot;&gt;// -4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.ceil(&lt;span class=&quot;number&quot;&gt;-7.004&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// -7&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="js易忘知识点" scheme="http://douzhiwei.top/tags/js%E6%98%93%E5%BF%98%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式常用元字符速查</title>
    <link href="http://douzhiwei.top/2018/03/12/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%B8%B8%E7%94%A8%E5%85%83%E5%AD%97%E7%AC%A6%E9%80%9F%E6%9F%A5/"/>
    <id>http://douzhiwei.top/2018/03/12/正则表达式常用元字符速查/</id>
    <published>2018-03-12T14:05:29.000Z</published>
    <updated>2018-03-13T07:11:26.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>常用元字符</strong></p><table><thead><tr><th style="text-align:left">代码</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">.</td><td style="text-align:left">匹配除换行符以外的任意字符</td></tr><tr><td style="text-align:left">\w</td><td style="text-align:left">匹配字母或数字或下划线或汉字</td></tr><tr><td style="text-align:left">\s</td><td style="text-align:left">匹配任意的空白符</td></tr><tr><td style="text-align:left">\d</td><td style="text-align:left">匹配数字</td></tr><tr><td style="text-align:left">\b</td><td style="text-align:left">匹配单词的开始或结束</td></tr><tr><td style="text-align:left">^</td><td style="text-align:left">匹配字符串的开始</td></tr><tr><td style="text-align:left">$</td><td style="text-align:left">匹配字符串的结束</td></tr></tbody></table><p><strong>常用限定符</strong></p><table><thead><tr><th style="text-align:left">代码</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">*</td><td style="text-align:left">重复零次或更多次</td></tr><tr><td style="text-align:left">+</td><td style="text-align:left">重复一次或更多次</td></tr><tr><td style="text-align:left">?</td><td style="text-align:left">重复零次或一次</td></tr><tr><td style="text-align:left">{n}</td><td style="text-align:left">重复n次</td></tr><tr><td style="text-align:left">{n,}</td><td style="text-align:left">重复n次或更多次</td></tr><tr><td style="text-align:left">{n,m}</td><td style="text-align:left">重复n到m次</td></tr></tbody></table><p><strong>反义</strong></p><table><thead><tr><th style="text-align:left">代码</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">\W</td><td style="text-align:left">匹配任意不是字母，数字，下划线，汉字的字符</td></tr><tr><td style="text-align:left">\S</td><td style="text-align:left">匹配任意不是空白符的字符</td></tr><tr><td style="text-align:left">\D</td><td style="text-align:left">匹配任意非数字的字符</td></tr><tr><td style="text-align:left">\B</td><td style="text-align:left">匹配不是单词开头或结束的位置</td></tr><tr><td style="text-align:left">[^x]</td><td style="text-align:left">配除了x以外的任意字符</td></tr><tr><td style="text-align:left">[^aeiou]</td><td style="text-align:left">匹配除了aeiou这几个字母以外的任</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;常用元字符&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;代码&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;t
      
    
    </summary>
    
    
      <category term="-正则" scheme="http://douzhiwei.top/tags/%E6%AD%A3%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>ui-grid常用api</title>
    <link href="http://douzhiwei.top/2018/03/12/ui-grid%E5%B8%B8%E7%94%A8api/"/>
    <id>http://douzhiwei.top/2018/03/12/ui-grid常用api/</id>
    <published>2018-03-12T03:49:00.000Z</published>
    <updated>2018-03-13T08:14:44.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>行编辑</strong><br>ui-grid-edit ui-grid-row-edit</p><p><strong>多行选择</strong><br>multiSelect:false</p><p><strong>获取选中行的内容</strong><br><a id="more"></a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">gridApi.selection.on.rowSelectionChanged($scope,<span class="function"><span class="keyword">function</span>(<span class="params">row</span>)</span>&#123;</span><br><span class="line">                    <span class="comment">//  console.log(row.entity);</span></span><br><span class="line">                    $scope.entity=row.entity;</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">               <span class="comment">//获取选中的行</span></span><br><span class="line">             <span class="keyword">var</span> rows = $scope.gridApi.selection.getSelectedRows();</span><br><span class="line"></span><br><span class="line">             <span class="comment">//格式化时间</span></span><br><span class="line">             startDate: $filter(<span class="string">"date"</span>)(<span class="keyword">new</span> <span class="built_in">Date</span>(), <span class="string">'yyyy-MM-dd'</span>),</span><br><span class="line">            <span class="comment">// 时间指令</span></span><br><span class="line">             &lt;input rowdatetimepicker style=<span class="string">"margin: 0 auto;border: none"</span> type=<span class="string">"text"</span> ng-model=<span class="string">"item.createTime"</span>/&gt;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//报错提示</span></span><br><span class="line">              Popup.alert(res.errorCode === SystemError ? <span class="string">'获取数据失败，请稍后重试'</span> : res.errorMessage);</span><br><span class="line"></span><br><span class="line">              <span class="comment">//ui-grid作用域问题</span></span><br><span class="line">              ng-change=<span class="string">"grid.appScope.changeStatus()"</span></span><br><span class="line">              headerCellClass: <span class="string">'headCanEdit'</span></span><br><span class="line"></span><br><span class="line">              <span class="comment">//select模板</span></span><br><span class="line">             <span class="keyword">var</span> isQualityCheck = <span class="string">'&lt;select style="width: 95%;height: 28px;" ng-model="row.entity.isQualityCheck" placeholder="请选择" enter-loop="111&#123;&#123;row.rowIndex&#125;&#125;" enterindex="5"&gt;\n    &lt;option value="YES"&gt;是&lt;/option&gt;\n   '</span> +</span><br><span class="line">            <span class="string">' &lt;option  value="NO"&gt;否&lt;/option&gt;\n &lt;/select&gt;\n\n'</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//下拉列表</span></span><br><span class="line"></span><br><span class="line">              &#123;</span><br><span class="line">                    field: <span class="string">'uState'</span>, <span class="attr">name</span>: <span class="string">'状态'</span>, <span class="attr">width</span>: <span class="string">'120'</span>, <span class="attr">headerCellClass</span>: <span class="string">'headCanEdit'</span>,</span><br><span class="line">                    editableCellTemplate: <span class="string">'ui-grid/dropdownEditor'</span>,</span><br><span class="line">                    editDropdownValueLabel: <span class="string">'uState'</span>, <span class="attr">cellFilter</span>: <span class="string">'filterDemandPlanUstate'</span>, <span class="attr">editDropdownOptionsArray</span>: [</span><br><span class="line">                       &#123; <span class="attr">id</span>: <span class="string">'GIVEN'</span>, <span class="attr">uState</span>: <span class="string">'下达'</span> &#125;,</span><br><span class="line">                       &#123; <span class="attr">id</span>: <span class="string">'DELETE'</span>, <span class="attr">uState</span>: <span class="string">'删除'</span> &#125;,</span><br><span class="line">                       &#123; <span class="attr">id</span>: <span class="string">'COLSE'</span>, <span class="attr">uState</span>: <span class="string">'关闭'</span> &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">               <span class="keyword">var</span> demandPlanDate = <span class="string">`&lt;input rowdatetimepicker type="text"  ng-model="row.entity.demandPlanDate"/&gt;`</span>;</span><br><span class="line">            ng-disabled=<span class="string">'!row.entity.$$add'</span></span><br><span class="line"></span><br><span class="line">             <span class="keyword">delete</span> $scope.projectSaveObj.tempProjectName;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">         <span class="keyword">var</span> demandPlanRowNo = <span class="string">'&lt;select style="width: 95%;height: 28px;" ng-model="row.entity.sid" placeholder="请选择" enter-loop="111&#123;&#123;row.rowIndex&#125;&#125;" enterindex="5"&gt;\n    &lt;option ng-repeat="item in row.entity.rowNoList" value="&#123;&#123;item.sid&#125;&#125;"&gt;&#123;&#123;item.demandPlanRowNo&#125;&#125;&lt;/option&gt;\n   &lt;/select&gt;'</span>;</span><br><span class="line"></span><br><span class="line">         type-writing=<span class="string">'&#123;&#123;grid.appScope.options&#125;&#125;'</span></span><br><span class="line">         <span class="string">"&lt;input is-grid='true' style=\"width:98%;height: 28px\" type='text'  enter-loop='&#123;&#123;row.rowIndex&#125;&#125;'  ng-model='row.entity.demandPlanNo' enterindex='1' type-writing='&#123;&#123;grid.appScope.options&#125;&#125;' /&gt;"</span>;</span><br><span class="line"></span><br><span class="line">           $scope.options = &#123;</span><br><span class="line"></span><br><span class="line">                queryUrl: basisUrl+<span class="string">"/rest/demandPlansSelect?pageNum=1&amp;pageSize=20&amp;planNo="</span>,</span><br><span class="line">                leftReceiveName: <span class="string">'drugName'</span>,</span><br><span class="line">                isModal:<span class="literal">true</span></span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">             $scope.$on(<span class="string">"drugName"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">status, data</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> rows = $scope.gridApi.selection.getSelectedRows();</span><br><span class="line">                <span class="keyword">var</span> selectedRow=$scope.entity;</span><br><span class="line">                selectedRow.purchaseRequestNumber=pObj.menge;</span><br><span class="line">                selectedRow.demandPlanNo=data.planNo;</span><br><span class="line">                selectedRow.rowNoList=data.demandPlanRowSelectDtoList||[];</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">          &lt;div ng-include=<span class="string">"'template/project-select-template.html'"</span> id=<span class="string">"drugSelect"</span> click-outside=<span class="string">"closeThis()"</span></span><br><span class="line">         ng-controller=<span class="string">"typeWritingCtrl"</span>&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">         &lt;option ng-repeat=<span class="string">"item in row.entity.rowNoList"</span> value=<span class="string">"&#123;&#123;item.sid&#125;&#125;"</span>&gt;&#123;&#123;item.demandPlanRowNo&#125;&#125;&lt;<span class="regexp">/option&gt;\n</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">cellEditableCondition: function (r) &#123;</span></span><br><span class="line"><span class="regexp">                        var row = $scope.gridOptions.data[r.rowRenderIndex];</span></span><br><span class="line"><span class="regexp">                        return !(row.trackType === 'TRACKTYPE_DEMANDPLAN' &amp;&amp; row.demandPlanRowDto.isTerminationPurchase === 'NO')</span></span><br><span class="line"><span class="regexp">                    &#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;行编辑&lt;/strong&gt;&lt;br&gt;ui-grid-edit ui-grid-row-edit&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;多行选择&lt;/strong&gt;&lt;br&gt;multiSelect:false&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;获取选中行的内容&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="ng" scheme="http://douzhiwei.top/tags/ng/"/>
    
  </entry>
  
  <entry>
    <title>Number、parseInt和parseFloat的比较</title>
    <link href="http://douzhiwei.top/2018/03/11/Number%E3%80%81parseInt%E5%92%8CparseFloat%E7%9A%84%E6%AF%94%E8%BE%83/"/>
    <id>http://douzhiwei.top/2018/03/11/Number、parseInt和parseFloat的比较/</id>
    <published>2018-03-11T14:07:24.000Z</published>
    <updated>2018-03-13T04:09:32.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>三者的作用： Number(): 可以用于任何数据类型转换成数值； parseInt()、parseFloat(): 专门用于把字符串转换成数值；<br>escape、encodeURI和encodeURIComponent</strong></p><ul><li>escape是对字符串(string)进行编码(而另外两种是对URL)<ul><li>ASCII字母、数字、@*/+ ，这几个字符不会被编码，其余的都会</li><li>用于字符串,不用于url</li></ul></li><li>最常用的encodeURI和encodeURIComponent<ul><li>encodeURI方法不会对下列字符编码 ASCII字母、数字、~!@#$&amp;*()=:/,;?+’</li><li>encodeURIComponent方法不会对下列字符编码 ASCII字母、数字、~!*()’</li><li>所以encodeURIComponent比encodeURI编码的范围更大</li></ul></li><li>什么时候用什么<ul><li>如果只是编码字符串，不和URL有半毛钱关系，那么用escape</li><li>如果你需要编码整个URL，然后需要使用这个URL，那么用encodeURI</li><li>当你需要编码URL中的参数的时候，那么encodeURIComponent是最好方法</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;三者的作用： Number(): 可以用于任何数据类型转换成数值； parseInt()、parseFloat(): 专门用于把字符串转换成数值；&lt;br&gt;escape、encodeURI和encodeURIComponent&lt;/strong&gt;&lt;/p&gt;
&lt;ul
      
    
    </summary>
    
    
      <category term="js易忘知识点" scheme="http://douzhiwei.top/tags/js%E6%98%93%E5%BF%98%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>css flex 弹性布局 vs 普通布局</title>
    <link href="http://douzhiwei.top/2018/03/10/css%20flex%20%E5%BC%B9%E6%80%A7%E5%B8%83%E5%B1%80%20vs%20%E6%99%AE%E9%80%9A%E5%B8%83%E5%B1%80/"/>
    <id>http://douzhiwei.top/2018/03/10/css flex 弹性布局 vs 普通布局/</id>
    <published>2018-03-10T04:01:09.000Z</published>
    <updated>2018-03-13T04:08:42.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>盒子模型,依赖display+position+float</li><li>IE 10+,别的浏览器肯定都支持</li><li>设置为flex后,子元素的float,clear,vertical-align 都将失效</li><li>任何元素都可以使用flex</li></ul><p>6个容器属性</p><p>1.flex-direction,决定主轴的方向<br>flex-direction: row | row-reverse | column | column-reverse;</p><ul><li>row（默认值）：主轴为水平方向，起点在左端。</li><li>row-reverse：主轴为水平方向，起点在右端。</li><li>column：主轴为垂直方向，起点在上沿。</li><li>column-reverse：主轴为垂直方向，起点在下沿。</li></ul><p>2.flex-warp 规定如何换行<br>flex-wrap: nowrap | wrap | wrap-reverse;</p><ul><li>nowarp（默认值）：不换行</li><li>wrap：换行,第一行在上面。</li><li>warp-reverse：换行,第一行在下面</li></ul><a id="more"></a><p>3.flex-flow flex-direction和flex-wrap的简写,默认值是row nowarp</p><p>4.justfy-content 在主轴的对齐方式<br>justify-content: flex-start | flex-end | center | space-between | space-around;</p><ul><li>flex-start（默认值）：左对齐</li><li>flex-end：右对齐</li><li>center： 居中</li><li>space-between：两端对齐，项目之间的间隔都相等。</li><li>space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</li></ul><p>5.aligin-items 在交叉轴如何对齐 用这个来实现垂直居中就非常简单了 center就ok了<br>align-items: flex-start | flex-end | center | baseline | stretch</p><ul><li>flex-start：交叉轴的起点对齐。</li><li>flex-end：交叉轴的终点对齐。</li><li>center：交叉轴的中点对齐。</li><li>baseline: 项目的第一行文字的基线对齐。</li><li>stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</li></ul><p>6.aligin-content 规定在多个轴的对齐方式,如果只有一个轴这个属性将不去作用<br>align-content: flex-start | flex-end | center | space-between | space-around | stretch;</p><ul><li>flex-start：与交叉轴的起点对齐。</li><li>flex-end：与交叉轴的终点对齐。</li><li>center：与交叉轴的中点对齐。</li><li>space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。</li><li>space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li><li>stretch（默认值）：轴线占满整个交叉轴。</li></ul><p>6个项目属性</p><p>1.order 定义项目的排列顺序 数字越小越靠前</p><p>2.flex-grow 定义项目的放大比例,默认0</p><p>3.flex-shrink 定义项目的缩放比例,默认是1</p><p>4.flex-basis 设置项目大小</p><p>5.flex 是 flex-grow flex-shrink flex-basic 的简写 默认0 1 auto</p><p>6.align-self 项目可以有单独的对齐方式可以覆盖aligin-item </p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;盒子模型,依赖display+position+float&lt;/li&gt;
&lt;li&gt;IE 10+,别的浏览器肯定都支持&lt;/li&gt;
&lt;li&gt;设置为flex后,子元素的float,clear,vertical-align 都将失效&lt;/li&gt;
&lt;li&gt;任何元素都可以使用flex&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;6个容器属性&lt;/p&gt;
&lt;p&gt;1.flex-direction,决定主轴的方向&lt;br&gt;flex-direction: row | row-reverse | column | column-reverse;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;row（默认值）：主轴为水平方向，起点在左端。&lt;/li&gt;
&lt;li&gt;row-reverse：主轴为水平方向，起点在右端。&lt;/li&gt;
&lt;li&gt;column：主轴为垂直方向，起点在上沿。&lt;/li&gt;
&lt;li&gt;column-reverse：主轴为垂直方向，起点在下沿。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2.flex-warp 规定如何换行&lt;br&gt;flex-wrap: nowrap | wrap | wrap-reverse;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;nowarp（默认值）：不换行&lt;/li&gt;
&lt;li&gt;wrap：换行,第一行在上面。&lt;/li&gt;
&lt;li&gt;warp-reverse：换行,第一行在下面&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="css" scheme="http://douzhiwei.top/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>exec,match,replace,test方法对比</title>
    <link href="http://douzhiwei.top/2018/03/09/exec-match-replace-test%E6%96%B9%E6%B3%95%E5%AF%B9%E6%AF%94/"/>
    <id>http://douzhiwei.top/2018/03/09/exec-match-replace-test方法对比/</id>
    <published>2018-03-09T03:10:00.000Z</published>
    <updated>2018-03-13T03:46:55.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>注：pattern 为RegExp的实例, str 为String的实例</strong></p><table><thead><tr><th>用法</th><th style="text-align:center">说明</th><th style="text-align:center">返回值</th></tr></thead><tbody><tr><td>pattern.test(str)</td><td style="text-align:center">判断str是否包含匹配结果</td><td style="text-align:center">包含返回true，不包含返回false</td></tr><tr><td>pattern.exec(str)</td><td style="text-align:center">根据pattern对str进行正则匹配</td><td style="text-align:center">返回匹配结果数组,如匹配不到返回null</td></tr><tr><td>str.match(pattern)</td><td style="text-align:center">根据pattern对str进行正则匹配</td><td style="text-align:center">返回匹配结果数组,如匹配不到返回null</td></tr><tr><td>str.replace(pattern, replacement)</td><td style="text-align:center">根据pattern进行正则匹配,把匹配结果替换为replacement</td><td style="text-align:center">一个新的字符串</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;注：pattern 为RegExp的实例, str 为String的实例&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;用法&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;说明&lt;/th&gt;
&lt;th styl
      
    
    </summary>
    
    
      <category term="js易忘知识点" scheme="http://douzhiwei.top/tags/js%E6%98%93%E5%BF%98%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>slice,splice和split</title>
    <link href="http://douzhiwei.top/2018/03/08/slice-splice%E5%92%8Csplit/"/>
    <id>http://douzhiwei.top/2018/03/08/slice-splice和split/</id>
    <published>2018-03-08T11:54:48.000Z</published>
    <updated>2018-03-13T03:08:33.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>slice可用于数组和字符串</strong></p><ul><li>用于数组<br>用法:<code>array.slice(start,end)</code><br>返回一个新的数组，包含从 start 到 end （不包括该元素）的 arrayObject 中的元素。(含头不含尾),注意不会修改原数组<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"><span class="keyword">let</span> b=a.slice(<span class="number">0</span>,<span class="number">3</span>);  <span class="comment">//[1,2,3]</span></span><br><span class="line"><span class="comment">//如果不传入参数二，那么将从参数一的索引位置开始截取，一直到数组尾</span></span><br><span class="line"><span class="keyword">let</span> c=a.slice(<span class="number">3</span>);    <span class="comment">//[4,5,6]</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//当只传入一个参数，且是负数时，比如说-1指最后一个元素,-2是倒数第二个,以此类推</span></span><br><span class="line"><span class="keyword">let</span> a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"><span class="keyword">let</span> b=a.slice(<span class="number">-1</span>);  <span class="comment">//[6]</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//当只传入一个参数，是负数时,绝对值大于数组的长度，会截取整个数组</span></span><br><span class="line"><span class="keyword">let</span> a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"><span class="keyword">let</span> b=a.slice(<span class="number">-6</span>);  <span class="comment">//[1,2,3,4,5,6]</span></span><br><span class="line"><span class="keyword">let</span> c=a.slice(<span class="number">-8</span>);  <span class="comment">//[1,2,3,4,5,6]</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//当传入两个参数一正一负时,2表示从'3'开始到'4'</span></span><br><span class="line"><span class="keyword">let</span> a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"><span class="keyword">let</span> b=a.slice(<span class="number">2</span>,<span class="number">-3</span>);  <span class="comment">//[3]</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//当传入一个参数，大于length时，将返回一个空数组</span></span><br><span class="line"><span class="keyword">let</span> a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"><span class="keyword">let</span> b=a.slice(<span class="number">6</span>);　　<span class="comment">//[]</span></span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><ul><li>用于字符串<br>用法：<code>string.slice(start,end)</code><br>slice方法复制string的一部分来构造一个新的字符串，用法与参数匀和数组的slice方法一样;end参数等于你要取的最后一个字符的位置值加上1<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=<span class="string">"i am a boy"</span>;</span><br><span class="line"><span class="keyword">let</span> b=a.slice(<span class="number">0</span>,<span class="number">6</span>);  <span class="comment">//"i am a"</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>splice只能用于数组</strong></p><p>用法：<code>array.splice(start,deleteCount,item...)</code></p><ol><li>start:开始插入和（或）删除的数组元素的下标。</li><li>deleteCount:结束截取的数组下标，如果end是负数</li><li>item…：要插入数组的元素。</li><li>返回：如果从数组中删除了元素，则返回的是被删除的元素的数组</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]; <span class="comment">// [1,2,3,4,5,6,7,8,9]</span></span><br><span class="line"><span class="comment">//如果只有一个参数 就是删除数组了</span></span><br><span class="line">arr1.splice(<span class="number">5</span>) <span class="comment">//[6,7,8,9]</span></span><br><span class="line">arr1 <span class="comment">// [1,2,3,4,5]</span></span><br><span class="line"><span class="comment">//两个参数的情况</span></span><br><span class="line">arr2 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]</span><br><span class="line">arr2.splice(<span class="number">5</span>,<span class="number">2</span>) <span class="comment">//[6,7]</span></span><br><span class="line">arr2 <span class="comment">// [1,2,3,4,5,8,9]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr3 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]; <span class="comment">//[1,2,3,4,5,6,7,8,9]</span></span><br><span class="line"><span class="comment">//从5的位置删除一个并加入新的元素</span></span><br><span class="line">arr3.splice(<span class="number">5</span>,<span class="number">1</span>,<span class="number">99</span>,<span class="number">100</span>)); <span class="comment">// [6]</span></span><br><span class="line">arr3 <span class="comment">// arr=[1,2,3,4,5,99,100,7,8,9]</span></span><br><span class="line"><span class="comment">//负数情况</span></span><br><span class="line"><span class="keyword">let</span> arr5 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]; <span class="comment">//[1,2,3,4,5,6,7,8,9]</span></span><br><span class="line">arr5.splice(<span class="number">-1</span>)); <span class="comment">// [9]</span></span><br><span class="line">arr5 <span class="comment">// arr=[1,2,3,4,5,6,7,8]</span></span><br></pre></td></tr></table></figure><p><strong>split只能用于字符串</strong></p><p>用法：<code>string.split(separator,limit)</code><br>split方法把这个string分割成片段来创建一个字符串数组。可选参数limit可以限制被分割的片段数量。separator参数可以是一个字符串或一个正则表达式。如果 separator是一个空字符，会返回一个单字符的数组。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;slice可用于数组和字符串&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用于数组&lt;br&gt;用法:&lt;code&gt;array.slice(start,end)&lt;/code&gt;&lt;br&gt;返回一个新的数组，包含从 start 到 end （不包括该元素）的 arrayObject 中的元素。(含头不含尾),注意不会修改原数组&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; a=[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; b=a.slice(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;);  &lt;span class=&quot;comment&quot;&gt;//[1,2,3]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//如果不传入参数二，那么将从参数一的索引位置开始截取，一直到数组尾&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; c=a.slice(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;);    &lt;span class=&quot;comment&quot;&gt;//[4,5,6]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//当只传入一个参数，且是负数时，比如说-1指最后一个元素,-2是倒数第二个,以此类推&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; a=[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; b=a.slice(&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;);  &lt;span class=&quot;comment&quot;&gt;//[6]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//当只传入一个参数，是负数时,绝对值大于数组的长度，会截取整个数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; a=[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; b=a.slice(&lt;span class=&quot;number&quot;&gt;-6&lt;/span&gt;);  &lt;span class=&quot;comment&quot;&gt;//[1,2,3,4,5,6]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; c=a.slice(&lt;span class=&quot;number&quot;&gt;-8&lt;/span&gt;);  &lt;span class=&quot;comment&quot;&gt;//[1,2,3,4,5,6]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//当传入两个参数一正一负时,2表示从&#39;3&#39;开始到&#39;4&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; a=[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; b=a.slice(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;-3&lt;/span&gt;);  &lt;span class=&quot;comment&quot;&gt;//[3]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//当传入一个参数，大于length时，将返回一个空数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; a=[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; b=a.slice(&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;);　　&lt;span class=&quot;comment&quot;&gt;//[]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="js易忘知识点" scheme="http://douzhiwei.top/tags/js%E6%98%93%E5%BF%98%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>基于node的上线打包替换api地址的问题</title>
    <link href="http://douzhiwei.top/2018/03/07/%E5%9F%BA%E4%BA%8Enode%E7%9A%84%E4%B8%8A%E7%BA%BF%E6%89%93%E5%8C%85%E6%9B%BF%E6%8D%A2api%E5%9C%B0%E5%9D%80%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://douzhiwei.top/2018/03/07/基于node的上线打包替换api地址的问题/</id>
    <published>2018-03-07T11:27:47.000Z</published>
    <updated>2018-03-07T11:45:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>我们经常遇到项目开发时候api的一个地址比如<code>www.baidu.dev.com</code>,上线之后要改成<code>www.baidu.com</code>的需求,可是webpack没有对应的插件,也可能是我没找到,于是乎,自己搞一个吧</p><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> join = <span class="built_in">require</span>(<span class="string">'path'</span>).join</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> chalk = <span class="built_in">require</span>(<span class="string">'chalk'</span>)</span><br><span class="line"><span class="comment">// 线上地址</span></span><br><span class="line"><span class="keyword">const</span> API_ROOT = <span class="string">'www.baidu.com'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 找目录下的所有文件</span></span><br><span class="line"> findSync = <span class="function">(<span class="params">startPath</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> result = []</span><br><span class="line">   finder = <span class="function">(<span class="params">path</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> files = fs.readdirSync(path)</span><br><span class="line">    files.forEach(<span class="function">(<span class="params">val, index</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> fPath = join(path, val)</span><br><span class="line">      <span class="keyword">let</span> stats = fs.statSync(fPath)</span><br><span class="line">      <span class="keyword">if</span> (stats.isDirectory()) &#123;</span><br><span class="line">        finder(fPath)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (stats.isFile()) &#123;</span><br><span class="line">        result.push(fPath)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  finder(startPath)</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fileNames = findSync(<span class="string">'./dist/static/js'</span>)</span><br><span class="line">fileNames.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">  fs.readFile(item, (err, data) =&gt; &#123;</span><br><span class="line">    data = data + <span class="string">''</span></span><br><span class="line"><span class="comment">// 测试地址</span></span><br><span class="line">    <span class="keyword">if</span> (data.indexOf(<span class="string">'www.dev.baidu.com'</span>) != <span class="number">-1</span>) &#123;</span><br><span class="line">      data = data.replace(<span class="string">'www.dev.baidu.com'</span>, API_ROOT)</span><br><span class="line">      fs.writeFile(item, data, (err) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) <span class="keyword">throw</span> err</span><br><span class="line">        <span class="built_in">console</span>.log(chalk.blue(<span class="string">'文件'</span>, item))</span><br><span class="line">        <span class="built_in">console</span>.log(chalk.red(<span class="string">'路径替换完毕'</span>, API_ROOT))</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p> <strong>搞定</strong><br>还可以加到 package 里面 ,通过npm 来运行,这个看自己的需求了</p><p>————————————–大大的分割线———————————————</p><p>突然脑洞打开,webpack没有类似的插件,但是webpack有dev环境和prod环境,这样一来就好说了,上步骤</p><p>1.找到<code>dev.env.js</code>,初始是这样的<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>)</span><br><span class="line"><span class="keyword">const</span> prodEnv = <span class="built_in">require</span>(<span class="string">'./prod.env'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = merge(prodEnv, &#123;</span><br><span class="line">  NODE_ENV: <span class="string">'"development"'</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>我们在env下面加入<code>API_ROOT: &#39;&quot;baidu.dev.com&quot;&#39;</code><br>现在是这样<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>)</span><br><span class="line"><span class="keyword">const</span> prodEnv = <span class="built_in">require</span>(<span class="string">'./prod.env'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = merge(prodEnv, &#123;</span><br><span class="line">  NODE_ENV: <span class="string">'"development"'</span>,</span><br><span class="line">  API_ROOT: <span class="string">'"baidu.dev.com"'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>2.找到<code>prod.env.js</code>,初始是这样的<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  NODE_ENV: <span class="string">'"production"'</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们在env下面加入 <code>API_ROOT: &#39;&quot;baidu.com&quot;&#39;</code></p><p>现在是这样<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  NODE_ENV: <span class="string">'"production"'</span>,</span><br><span class="line">  API_ROOT: <span class="string">'"baidu.com"'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3.修改定义api的地方,从<code>process.env</code>里面拿API_ROOT,改成如下<br><code>export const API_ROOT = process.env.API_ROOT</code></p><p><strong>总结 npm run dev 的时候因为是开发环境,所以API_ROOT是dev.baidu.com,<br>npm run build 的时候是生产环境,API_ROOT是baidu.com,好了,玩耍吧</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们经常遇到项目开发时候api的一个地址比如&lt;code&gt;www.baidu.dev.com&lt;/code&gt;,上线之后要改成&lt;code&gt;www.baidu.com&lt;/code&gt;的需求,可是webpack没有对应的插件,也可能是我没找到,于是乎,自己搞一个吧&lt;/p&gt;
    
    </summary>
    
    
      <category term="node" scheme="http://douzhiwei.top/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>云服务器安装node环境</title>
    <link href="http://douzhiwei.top/2018/03/07/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85node%E7%8E%AF%E5%A2%83/"/>
    <id>http://douzhiwei.top/2018/03/07/云服务器安装node环境/</id>
    <published>2018-03-07T11:26:01.000Z</published>
    <updated>2018-03-07T11:29:27.000Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>先更新一下系统<br><code>sudo apt-get update</code></p></li><li><p>安装一些常用的工具<br><code>sudo apt-get install vim openssl build-essential libssl-dev wget curl git</code></p></li><li><p>安装nvm<br><code>wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.2/install.sh | bash</code></p></li></ol><p>安装完毕会提示再打开一个控制台</p><ol><li><p>使用nvm安装node,知道版本号,我这安装的是7<br><code>nvm install vv8.9.1</code></p></li><li><p>使用vv8.9.1为默认node版本<br><code>nvm use vv8.9.1</code><br><code>nvm alias default vv8.9.1</code></p></li><li><p>使用淘宝镜像cnpm<br><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></p></li></ol><p><strong>ok,node环境搭建完毕</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;先更新一下系统&lt;br&gt;&lt;code&gt;sudo apt-get update&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装一些常用的工具&lt;br&gt;&lt;code&gt;sudo apt-get install vim openssl build-essential
      
    
    </summary>
    
    
      <category term="node" scheme="http://douzhiwei.top/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>item2配置显示git分支和替换用户名为箭头</title>
    <link href="http://douzhiwei.top/2018/03/07/item2%E9%85%8D%E7%BD%AE%E6%98%BE%E7%A4%BAgit%E5%88%86%E6%94%AF%E5%92%8C%E6%9B%BF%E6%8D%A2%E7%94%A8%E6%88%B7%E5%90%8D%E4%B8%BA%E7%AE%AD%E5%A4%B4/"/>
    <id>http://douzhiwei.top/2018/03/07/item2配置显示git分支和替换用户名为箭头/</id>
    <published>2018-03-07T11:21:41.000Z</published>
    <updated>2018-03-07T11:46:14.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="先上效果图"><a href="#先上效果图" class="headerlink" title="先上效果图"></a>先上效果图</h4><p><img src="http://upload-images.jianshu.io/upload_images/7514255-856fc30735484730.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><a id="more"></a><h3 id="先说一下item2的配色"><a href="#先说一下item2的配色" class="headerlink" title="先说一下item2的配色"></a>先说一下item2的配色</h3><p>终端输入</p><blockquote><p>vim ~/.bash_profile</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#enables colorin the terminal bash shell export</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> CLICOLOR=1</span><br><span class="line"></span><br><span class="line"><span class="comment">#setsup thecolor scheme for list export</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> LSCOLORS=gxfxcxdxbxegedabagacad</span><br><span class="line"></span><br><span class="line"><span class="comment">#sets up theprompt color (currently a green similar to linux terminal) 注意下面的这一行不要,一会去profile文件里编辑这个PS1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#exportPS1='\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;36m\]\w\[\033[00m\]\$ ' ~~</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#enables colorfor iTerm</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> TERM=xterm-256color</span><br></pre></td></tr></table></figure><p>设置完这个就可以自己选主题了,这就不说了</p><h3 id="然后设置显示git分支和替换用户名为箭头"><a href="#然后设置显示git分支和替换用户名为箭头" class="headerlink" title="然后设置显示git分支和替换用户名为箭头"></a>然后设置显示git分支和替换用户名为箭头</h3><p>终端输入</p><blockquote><p>sudo vim /etc/profile</p></blockquote><p>添加以下代码,注意原来这个文件里的内容不要删,把代码复制到下面就好</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">find_git_branch</span></span> () &#123;</span><br><span class="line"><span class="built_in">local</span> dir=. head</span><br><span class="line">until [ <span class="string">"<span class="variable">$dir</span>"</span> -ef / ]; <span class="keyword">do</span></span><br><span class="line"><span class="keyword">if</span> [ -f <span class="string">"<span class="variable">$dir</span>/.git/HEAD"</span> ]; <span class="keyword">then</span></span><br><span class="line">head=$(&lt; <span class="string">"<span class="variable">$dir</span>/.git/HEAD"</span>)</span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$head</span> = ref:\ refs/heads/* ]]; <span class="keyword">then</span></span><br><span class="line">git_branch=<span class="string">" (<span class="variable">$&#123;head#*/*/&#125;</span>)"</span></span><br><span class="line"><span class="keyword">elif</span> [[ <span class="variable">$head</span> != <span class="string">''</span> ]]; <span class="keyword">then</span></span><br><span class="line">git_branch=<span class="string">" → (detached)"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">git_branch=<span class="string">" → (unknow)"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">return</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">dir=<span class="string">"../<span class="variable">$dir</span>"</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">git_branch=<span class="string">''</span></span><br><span class="line">&#125;</span><br><span class="line">PROMPT_COMMAND=<span class="string">"find_git_branch; <span class="variable">$PROMPT_COMMAND</span>"</span></span><br><span class="line">black=$<span class="string">'\[\e[1;30m\]'</span></span><br><span class="line">red=$<span class="string">'\[\e[1;31m\]'</span></span><br><span class="line">green=$<span class="string">'\[\e[1;32m\]'</span></span><br><span class="line">yellow=$<span class="string">'\[\e[1;33m\]'</span></span><br><span class="line">blue=$<span class="string">'\[\e[1;34m\]'</span></span><br><span class="line">magenta=$<span class="string">'\[\e[1;35m\]'</span></span><br><span class="line">cyan=$<span class="string">'\[\e[1;36m\]'</span></span><br><span class="line">white=$<span class="string">'\[\e[1;37m\]'</span></span><br><span class="line">normal=$<span class="string">'\[\e[m\]'</span></span><br><span class="line"><span class="comment"># 这个要注意了下面的PS1就是最终的效果图,颜色可以自己配置,上面的就是颜色变量</span></span><br><span class="line">PS1=<span class="string">"<span class="variable">$green</span> → <span class="variable">$cyan</span>\w<span class="variable">$yellow</span>\$git_branch\$ <span class="variable">$magenta</span>"</span></span><br><span class="line"><span class="comment">#也可以试一下下面的这个配置,注意这两个PS写一个就好</span></span><br><span class="line"><span class="comment">#PS1="$white[$white@$green\h$white:$cyan\W$yellow\$git_branch$white]\$ $normal"</span></span><br></pre></td></tr></table></figure><p>终端输入 使刚才的配置生效</p><blockquote><p>source /etc/profile</p></blockquote><p>这样就大功告成了.</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;先上效果图&quot;&gt;&lt;a href=&quot;#先上效果图&quot; class=&quot;headerlink&quot; title=&quot;先上效果图&quot;&gt;&lt;/a&gt;先上效果图&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/7514255-856fc30735484730.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="iTerm2" scheme="http://douzhiwei.top/tags/iTerm2/"/>
    
  </entry>
  
  <entry>
    <title>一个简单的webhook</title>
    <link href="http://douzhiwei.top/2018/03/07/%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84webhook/"/>
    <id>http://douzhiwei.top/2018/03/07/一个简单的webhook/</id>
    <published>2018-03-07T11:16:21.000Z</published>
    <updated>2018-03-07T11:29:27.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>第一步, 起一个node服务</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="keyword">const</span> &#123;execFile&#125; = <span class="built_in">require</span>(<span class="string">'child_process'</span>)</span><br><span class="line"><span class="keyword">const</span> PORT = <span class="number">6666</span></span><br><span class="line"><span class="keyword">const</span> deployServer = http.createServer(<span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (request.url.search(<span class="regexp">/auto_deploy\/?$/i</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> child = execFile(<span class="string">'git'</span>, [<span class="string">'pull'</span>], (error, stdout, stderr) =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (error) &#123;</span><br><span class="line">                response.writeHead(<span class="number">500</span>)</span><br><span class="line">                response.end(<span class="string">'Server Internal Error.'</span>)</span><br><span class="line">                <span class="keyword">throw</span> error;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(stdout);</span><br><span class="line">                response.writeHead(<span class="number">200</span>)</span><br><span class="line">                response.end(<span class="string">'Deploy Done.'</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        response.writeHead(<span class="number">404</span>)</span><br><span class="line">        response.end(<span class="string">'Not Found.'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">deployServer.listen(PORT);</span><br></pre></td></tr></table></figure><ul><li>第二步,使用nginx反向代理</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location /auto_deploy &#123;</span><br><span class="line">    proxy_pass http://127.0.0.1:6666;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;第一步, 起一个node服务&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
    
      <category term="node" scheme="http://douzhiwei.top/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>渐进增强和优雅降级</title>
    <link href="http://douzhiwei.top/2018/03/07/%E6%B8%90%E8%BF%9B%E5%A2%9E%E5%BC%BA%E5%92%8C%E4%BC%98%E9%9B%85%E9%99%8D%E7%BA%A7/"/>
    <id>http://douzhiwei.top/2018/03/07/渐进增强和优雅降级/</id>
    <published>2018-03-07T08:49:06.000Z</published>
    <updated>2018-03-07T09:54:27.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>渐进增强 progressive enhancement</strong>：针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验</p><p><strong>优雅降级</strong>：一开始就构建完整的功能，然后再针对低版本浏览器进行兼容</p><a id="more"></a><p><strong>区别</strong>：</p><ul><li>优雅降级是从复杂的现状开始，并试图减少用户体验的供给，</li><li><p>渐进增强则是从一个非常基础的，能够起作用的版本开始，并不断扩充，以适应未来环境的需要<br>优雅降级观点</p></li><li><p>优雅降级观点认为应该针对那些最高级、最完善的浏览器来设计网站。而将那些被认为“过时”或有功能缺失的浏览器下的测试工作安排在开发周期的最后阶段，并把测试对象限定为主流浏览器在这种设计范例下，旧版的浏览器被认为仅能提供“简陋却无妨（poor, but passable)“的浏览体验。你可以做一些小的调整来适应某个特定的浏览器。但由于它们并非我们所关注的焦点，因此除了修复较大的错误之外，其它的差异将被直接忽略。</p></li><li><p>渐进增强则认为应关注于内容本身。内容是我们建立网站的诱因。有的网站展示它，有的则收集它，有的寻求，有的操作，还有的网站甚至会包含以上的种种，但相同点是它们全都涉及到内容。这使得“渐进增强”成为一种更为合理的设计范例。这也是它立即被 Yahoo！所采纳并用以构建其“分级式浏览器支持（Graded Browser Support）”策略的原因所在。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;渐进增强 progressive enhancement&lt;/strong&gt;：针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;优雅降级&lt;/strong&gt;：一开始就构建完整的功能，然后再针对低版本浏览器进行兼容&lt;/p&gt;
    
    </summary>
    
    
      <category term="渐进增强和优雅降级" scheme="http://douzhiwei.top/tags/%E6%B8%90%E8%BF%9B%E5%A2%9E%E5%BC%BA%E5%92%8C%E4%BC%98%E9%9B%85%E9%99%8D%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>测试分类和标签</title>
    <link href="http://douzhiwei.top/2018/03/07/%E5%93%88%E5%93%88%E5%93%88/"/>
    <id>http://douzhiwei.top/2018/03/07/哈哈哈/</id>
    <published>2018-03-07T07:04:28.000Z</published>
    <updated>2018-03-07T09:33:24.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h4><h5 id="内容1"><a href="#内容1" class="headerlink" title="内容1"></a>内容1</h5><h5 id="内容2"><a href="#内容2" class="headerlink" title="内容2"></a>内容2</h5>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;内容&quot;&gt;&lt;a href=&quot;#内容&quot; class=&quot;headerlink&quot; title=&quot;内容&quot;&gt;&lt;/a&gt;内容&lt;/h4&gt;&lt;h5 id=&quot;内容1&quot;&gt;&lt;a href=&quot;#内容1&quot; class=&quot;headerlink&quot; title=&quot;内容1&quot;&gt;&lt;/a&gt;内容1&lt;/h5&gt;&lt;h
      
    
    </summary>
    
      <category term="分类" scheme="http://douzhiwei.top/categories/%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="标签1" scheme="http://douzhiwei.top/tags/%E6%A0%87%E7%AD%BE1/"/>
    
      <category term="标签2" scheme="http://douzhiwei.top/tags/%E6%A0%87%E7%AD%BE2/"/>
    
  </entry>
  
</feed>
