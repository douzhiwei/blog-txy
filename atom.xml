<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>豆豆豆</title>
  
  <subtitle>学无止境</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://douzhiwei.top/"/>
  <updated>2018-03-26T07:38:01.000Z</updated>
  <id>http://douzhiwei.top/</id>
  
  <author>
    <name>豆</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Decorator装饰器</title>
    <link href="http://douzhiwei.top/2018/03/24/Decorator%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    <id>http://douzhiwei.top/2018/03/24/Decorator装饰器/</id>
    <published>2018-03-24T13:11:52.000Z</published>
    <updated>2018-03-26T07:38:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Decorator"><a href="#Decorator" class="headerlink" title="Decorator"></a>Decorator</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法的修饰</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> readonly=<span class="function"><span class="keyword">function</span>(<span class="params">target,name,descriptor</span>)</span>&#123;</span><br><span class="line">descriptor.writable=<span class="literal">false</span></span><br><span class="line"><span class="keyword">return</span> descriptor</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">@readonly</span><br><span class="line">time()&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">'2017-03-11'</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> test=<span class="keyword">new</span> Test()</span><br><span class="line"><span class="built_in">console</span>.log(test.time());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// class 的修饰</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 加一个静态属性</span></span><br><span class="line"><span class="keyword">let</span> typename=<span class="function"><span class="keyword">function</span>(<span class="params">target,name,descriptor</span>)</span>&#123;</span><br><span class="line">target.myname=<span class="string">'hello'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@typename</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'类修饰符'</span>,Test.myname);</span><br><span class="line"><span class="comment">// 第三方库修饰器的js库已经为我们写好了跟多的修饰器</span></span><br><span class="line"><span class="comment">// core-decorators; npm install core-decorators</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 来个栗子 实现业务和逻辑的分离</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> log=<span class="function">(<span class="params">type</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target,name,descriptor</span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> src_method=descriptor.value</span><br><span class="line">descriptor.value=<span class="function">(<span class="params">...arg</span>)=&gt;</span>&#123;</span><br><span class="line">src_method.apply(target,arg)</span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">`log <span class="subst">$&#123;type&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AD</span></span>&#123;</span><br><span class="line">@log(<span class="string">'show'</span>)</span><br><span class="line">show()&#123;</span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">'ad is show'</span>)</span><br><span class="line">&#125;</span><br><span class="line">@log(<span class="string">'click'</span>)</span><br><span class="line">click()&#123;</span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">'ad is click'</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ad=<span class="keyword">new</span> AD()</span><br><span class="line">ad.show()</span><br><span class="line">ad.click()</span><br><span class="line">ad is show</span><br><span class="line">log show</span><br><span class="line">ad is click</span><br><span class="line">log click</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Decorator&quot;&gt;&lt;a href=&quot;#Decorator&quot; class=&quot;headerlink&quot; title=&quot;Decorator&quot;&gt;&lt;/a&gt;Decorator&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td c
      
    
    </summary>
    
      <category term="ES6" scheme="http://douzhiwei.top/categories/ES6/"/>
    
    
      <category term="ES6" scheme="http://douzhiwei.top/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>genertaor函数</title>
    <link href="http://douzhiwei.top/2018/03/24/genertaor%E5%87%BD%E6%95%B0/"/>
    <id>http://douzhiwei.top/2018/03/24/genertaor函数/</id>
    <published>2018-03-24T07:10:39.000Z</published>
    <updated>2018-03-26T07:38:28.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="genertaor函数"><a href="#genertaor函数" class="headerlink" title="genertaor函数"></a>genertaor函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="comment">// genertaor基本定义</span></span><br><span class="line"><span class="keyword">let</span> tell=<span class="function"><span class="keyword">function</span>* (<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">yield</span> <span class="string">'a'</span></span><br><span class="line"><span class="keyword">yield</span> <span class="string">'b'</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">'c'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> k=tell()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(k.next()) <span class="comment">// &#123;value: "a", done: false&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(k.next()) <span class="comment">// &#123;value: "b", done: false&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(k.next()) <span class="comment">// &#123;value: "c", done: true&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(k.next()) <span class="comment">// &#123;value: undefined, done: true&#125;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用genertaor来部署iterator接口,在说iterator接口的时候,也自定义过,比较一下</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> obj=&#123;&#125;;</span><br><span class="line">obj[<span class="built_in">Symbol</span>.iterator]=<span class="function"><span class="keyword">function</span>* (<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line"><span class="keyword">yield</span> <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> value <span class="keyword">of</span> obj)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(value)<span class="comment">// 1 2 3</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现无限轮询</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> state=<span class="function"><span class="keyword">function</span>* (<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">yield</span> <span class="string">'A'</span></span><br><span class="line"><span class="keyword">yield</span> <span class="string">'B'</span></span><br><span class="line"><span class="keyword">yield</span> <span class="string">'C'</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> status=state()</span><br><span class="line"><span class="built_in">console</span>.log(status.next()) <span class="comment">// A</span></span><br><span class="line"><span class="built_in">console</span>.log(status.next()) <span class="comment">// B</span></span><br><span class="line"><span class="built_in">console</span>.log(status.next()) <span class="comment">// C</span></span><br><span class="line"><span class="built_in">console</span>.log(status.next()) <span class="comment">// A</span></span><br><span class="line"><span class="built_in">console</span>.log(status.next()) <span class="comment">// B</span></span><br><span class="line"><span class="comment">// 如果一直调用next方法 会无限轮询</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// sync和genertaor 使用方法一样</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">// let state=async function ()&#123;</span></span><br><span class="line"><span class="comment">// while(1)&#123;</span></span><br><span class="line"><span class="comment">// await 'A';</span></span><br><span class="line"><span class="comment">// await 'B';</span></span><br><span class="line"><span class="comment">// await 'C';</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// let status=state();</span></span><br><span class="line"><span class="comment">// console.log(status.next());</span></span><br><span class="line"><span class="comment">// console.log(status.next());</span></span><br><span class="line"><span class="comment">// console.log(status.next());</span></span><br><span class="line"><span class="comment">// console.log(status.next());</span></span><br><span class="line"><span class="comment">// console.log(status.next());</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 整两个栗子</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽奖</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> draw=<span class="function"><span class="keyword">function</span>(<span class="params">count</span>)</span>&#123;</span><br><span class="line"><span class="comment">//具体抽奖逻辑</span></span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">`剩余<span class="subst">$&#123;count&#125;</span>次`</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> residue=<span class="function"><span class="keyword">function</span>* (<span class="params">count</span>)</span>&#123;</span><br><span class="line"><span class="keyword">while</span> (count&gt;<span class="number">0</span>) &#123;</span><br><span class="line">count--;</span><br><span class="line"><span class="keyword">yield</span> draw(count);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> star=residue(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">let</span> btn=<span class="built_in">document</span>.createElement(<span class="string">'button'</span>)</span><br><span class="line">btn.id=<span class="string">'start'</span></span><br><span class="line">btn.textContent=<span class="string">'抽奖'</span></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(btn)</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'start'</span>).addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">star.next();</span><br><span class="line">&#125;,<span class="literal">false</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 长轮询</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> ajax=<span class="function"><span class="keyword">function</span>* (<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">yield</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">resolve(&#123;<span class="attr">code</span>:<span class="number">0</span>&#125;)</span><br><span class="line">&#125;, <span class="number">200</span>);</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pull=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> genertaor=ajax()</span><br><span class="line"><span class="keyword">let</span> step=genertaor.next()</span><br><span class="line">step.value.then(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(d.code!=<span class="number">0</span>)&#123;</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">'wait'</span>)</span><br><span class="line">pull()</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.info(d)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pull();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;genertaor函数&quot;&gt;&lt;a href=&quot;#genertaor函数&quot; class=&quot;headerlink&quot; title=&quot;genertaor函数&quot;&gt;&lt;/a&gt;genertaor函数&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;
      
    
    </summary>
    
      <category term="ES6" scheme="http://douzhiwei.top/categories/ES6/"/>
    
    
      <category term="ES6" scheme="http://douzhiwei.top/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>Promise-es6</title>
    <link href="http://douzhiwei.top/2018/03/24/Promise-es6/"/>
    <id>http://douzhiwei.top/2018/03/24/Promise-es6/</id>
    <published>2018-03-24T06:08:43.000Z</published>
    <updated>2018-03-26T07:39:29.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="comment">// es5和es6异步操作对比</span></span><br><span class="line"><span class="comment">//es5 通过回掉方式</span></span><br><span class="line"><span class="keyword">let</span> ajax=<span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'执行'</span>)</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">callback&amp;&amp;callback.call()</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;;</span><br><span class="line">ajax(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'timeout1'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 执行 timeout1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// es6通过promise</span></span><br><span class="line"><span class="keyword">let</span> ajax=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'执行2'</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">resolve()</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ajax().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'promise'</span>,<span class="string">'timeout2'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 执行 timeout2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 链式调用</span></span><br><span class="line"><span class="keyword">let</span> ajax=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'执行3'</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">resolve()</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ajax()</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">resolve()</span><br><span class="line">&#125;, <span class="number">2000</span>)</span><br><span class="line">&#125;);</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'timeout3'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 错误处理</span></span><br><span class="line"><span class="keyword">let</span> ajax=<span class="function"><span class="keyword">function</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'执行4'</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(num&gt;<span class="number">5</span>)&#123;</span><br><span class="line">resolve()</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'出错了'</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ajax(<span class="number">6</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'log'</span>,<span class="number">6</span>)</span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'catch'</span>,err)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">ajax(<span class="number">3</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'log'</span>,<span class="number">3</span>)</span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'catch'</span>,err)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 执行4 执行4 log 6 报错</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// all 和 race</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 所有图片加载完再添加到页面</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadImg</span>(<span class="params">src</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">let</span> img=<span class="built_in">document</span>.createElement(<span class="string">'img'</span>)</span><br><span class="line">img.src=src</span><br><span class="line">img.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">resolve(img)</span><br><span class="line">&#125;</span><br><span class="line">img.onerror=<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">reject(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showImgs</span>(<span class="params">imgs</span>)</span>&#123;</span><br><span class="line">imgs.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">img</span>)</span>&#123;</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(img)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all([</span><br><span class="line">loadImg(<span class="string">'df1ef0720bea6832.png'</span>),</span><br><span class="line">loadImg(<span class="string">'http://i4.buimg.com/5677501/2b07ee25b08930ba.png'</span>),</span><br><span class="line">loadImg(<span class="string">'http://baidu.com/567751/5eb8190d6b2a1c9c.png'</span>)</span><br><span class="line">]).then(showImgs)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 有一个图片加载完就添加到页面</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadImg</span>(<span class="params">src</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">let</span> img=<span class="built_in">document</span>.createElement(<span class="string">'img'</span>)</span><br><span class="line">img.src=src</span><br><span class="line">img.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">resolve(img)</span><br><span class="line">&#125;</span><br><span class="line">img.onerror=<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">reject(err);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showImgs</span>(<span class="params">img</span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> p=<span class="built_in">document</span>.createElement(<span class="string">'p'</span>)</span><br><span class="line">p.appendChild(img);</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(p)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.race([</span><br><span class="line">loadImg(<span class="string">'http://i4.buimg.com/567571/df1ef0720bea6832.png'</span>),</span><br><span class="line">loadImg(<span class="string">'http://i4.buimg.com/567751/2b07ee25b08930ba.png'</span>),</span><br><span class="line">loadImg(<span class="string">'http://i2.muimg.com/567751/5eb8190d6b2a1c9c.png'</span>)</span><br><span class="line">]).then(showImgs)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Promise&quot;&gt;&lt;a href=&quot;#Promise&quot; class=&quot;headerlink&quot; title=&quot;Promise&quot;&gt;&lt;/a&gt;Promise&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gu
      
    
    </summary>
    
      <category term="ES6" scheme="http://douzhiwei.top/categories/ES6/"/>
    
    
      <category term="ES6" scheme="http://douzhiwei.top/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>Iterator-es6</title>
    <link href="http://douzhiwei.top/2018/03/24/Iterator-es6/"/>
    <id>http://douzhiwei.top/2018/03/24/Iterator-es6/</id>
    <published>2018-03-24T03:09:47.000Z</published>
    <updated>2018-03-26T07:38:43.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Iterator接口"><a href="#Iterator接口" class="headerlink" title="Iterator接口"></a>Iterator接口</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> arr=[<span class="string">'hello'</span>,<span class="string">'world'</span>]</span><br><span class="line"><span class="comment">// 数组的Iterator,自带的</span></span><br><span class="line"><span class="keyword">let</span> map=arr[<span class="built_in">Symbol</span>.iterator]()</span><br><span class="line"><span class="built_in">console</span>.log(map.next())</span><br><span class="line"><span class="built_in">console</span>.log(map.next())</span><br><span class="line"><span class="built_in">console</span>.log(map.next())</span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">&#123; <span class="attr">value</span>: <span class="string">'hello'</span>, <span class="attr">done</span>: <span class="literal">false</span> &#125;</span><br><span class="line">&#123; <span class="attr">value</span>: <span class="string">'world'</span>, <span class="attr">done</span>: <span class="literal">false</span> &#125;</span><br><span class="line">&#123; <span class="attr">value</span>: <span class="literal">undefined</span>, <span class="attr">done</span>: <span class="literal">true</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义Iterator接口</span></span><br><span class="line"><span class="comment">// 之所以对象没有部署Iterator接口,是因为不知道我们在对象你存什么,这时候我们自己定义就可以</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> obj=&#123;</span><br><span class="line">start:[<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>],</span><br><span class="line">end:[<span class="number">7</span>,<span class="number">9</span>,<span class="number">8</span>],</span><br><span class="line"><span class="comment">// 这里好好看一下</span></span><br><span class="line">[<span class="built_in">Symbol</span>.iterator]()&#123;</span><br><span class="line"><span class="keyword">let</span> self=<span class="keyword">this</span></span><br><span class="line"><span class="keyword">let</span> index=<span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> arr=self.start.concat(self.end)</span><br><span class="line"><span class="keyword">let</span> len=arr.length</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">next()&#123;</span><br><span class="line"><span class="keyword">if</span>(index&lt;len)&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="comment">// 返回是 value 和 done</span></span><br><span class="line">value:arr[index++],</span><br><span class="line">done:<span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">value:arr[index++],</span><br><span class="line">done:<span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">of</span> obj)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(key) <span class="comment">// 123798</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Iterator接口&quot;&gt;&lt;a href=&quot;#Iterator接口&quot; class=&quot;headerlink&quot; title=&quot;Iterator接口&quot;&gt;&lt;/a&gt;Iterator接口&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;
      
    
    </summary>
    
      <category term="ES6" scheme="http://douzhiwei.top/categories/ES6/"/>
    
    
      <category term="ES6" scheme="http://douzhiwei.top/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>Class</title>
    <link href="http://douzhiwei.top/2018/03/23/Class/"/>
    <id>http://douzhiwei.top/2018/03/23/Class/</id>
    <published>2018-03-23T12:07:27.000Z</published>
    <updated>2018-03-26T07:37:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="comment">// 基本定义和生成实例</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(name='dou')&#123;</span><br><span class="line"><span class="keyword">this</span>.name=name</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> v_parent=<span class="keyword">new</span> Parent(<span class="string">'v'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'构造函数和实例'</span>,v_parent); <span class="comment">// &#123;name:v&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(name='zhi')&#123;</span><br><span class="line"><span class="keyword">this</span>.name=name</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'继承'</span>,<span class="keyword">new</span> Child()) <span class="comment">// zhi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 继承传递参数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(name='wei')&#123;</span><br><span class="line"><span class="keyword">this</span>.name=name</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(name='child')&#123;</span><br><span class="line"><span class="comment">// 这里要注意了 这个super必须要写在第一行,如果子类有自己的属性,不写在第一行就报错</span></span><br><span class="line"><span class="keyword">super</span>(name)</span><br><span class="line"><span class="keyword">this</span>.type=<span class="string">'child'</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'继承传递参数'</span>,<span class="keyword">new</span> Child(<span class="string">'hello'</span>)) <span class="comment">// &#123; name: 'hello', type: 'child' &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// getter,setter</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(name='wei')&#123;</span><br><span class="line"><span class="keyword">this</span>.name=name</span><br><span class="line">&#125;</span><br><span class="line">get longName()&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">'mk'</span>+<span class="keyword">this</span>.name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">set longName(value)&#123;</span><br><span class="line"><span class="keyword">this</span>.name=value</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> v=<span class="keyword">new</span> Parent();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'getter'</span>,v.longName) <span class="comment">// mkwei</span></span><br><span class="line">v.longName=<span class="string">'hello'</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'setter'</span>,v.longName) <span class="comment">// mkhello</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 静态方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(name='dou')&#123;</span><br><span class="line"><span class="keyword">this</span>.name=name</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> tell()&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'tell'</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Parent.tell() <span class="comment">// tell</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 静态属性</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(name='zhi')&#123;</span><br><span class="line"><span class="keyword">this</span>.name=name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> tell()&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'tell'</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Parent.type=<span class="string">'test'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'静态属性'</span>,Parent.type) <span class="comment">// test</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Class&quot;&gt;&lt;a href=&quot;#Class&quot; class=&quot;headerlink&quot; title=&quot;Class&quot;&gt;&lt;/a&gt;Class&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;p
      
    
    </summary>
    
      <category term="ES6" scheme="http://douzhiwei.top/categories/ES6/"/>
    
    
      <category term="ES6" scheme="http://douzhiwei.top/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>Proxy和Reflect</title>
    <link href="http://douzhiwei.top/2018/03/23/Proxy%E5%92%8CReflect/"/>
    <id>http://douzhiwei.top/2018/03/23/Proxy和Reflect/</id>
    <published>2018-03-23T08:15:59.000Z</published>
    <updated>2018-03-26T07:39:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Proxy和Reflect-这两或的方法都是一样的-放一起说了"><a href="#Proxy和Reflect-这两或的方法都是一样的-放一起说了" class="headerlink" title="Proxy和Reflect 这两或的方法都是一样的,放一起说了"></a>Proxy和Reflect 这两或的方法都是一样的,放一起说了</h2><h3 id="Proxy可以理解成一个拦截器-直接看栗子"><a href="#Proxy可以理解成一个拦截器-直接看栗子" class="headerlink" title="Proxy可以理解成一个拦截器,直接看栗子"></a>Proxy可以理解成一个拦截器,直接看栗子</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Proxy</span></span><br><span class="line"><span class="comment">// 先定义一个对象</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> obj=&#123;</span><br><span class="line">time:<span class="string">'2017-09-11'</span>,</span><br><span class="line">name:<span class="string">'dou'</span>,</span><br><span class="line">_r:<span class="number">123</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 声明一个Proxy</span></span><br><span class="line"><span class="keyword">let</span> monitor=<span class="keyword">new</span> <span class="built_in">Proxy</span>(obj,&#123;</span><br><span class="line"><span class="comment">// 拦截对象属性的读取</span></span><br><span class="line">get(target,key)&#123;</span><br><span class="line"><span class="keyword">return</span> target[key].replace(<span class="string">'2017'</span>,<span class="string">'2018'</span>)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 拦截对象设置属性</span></span><br><span class="line">set(target,key,value)&#123;</span><br><span class="line"><span class="keyword">if</span>(key===<span class="string">'name'</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> target[key]=value</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> target[key]</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 拦截key in object操作</span></span><br><span class="line">has(target,key)&#123;</span><br><span class="line"><span class="keyword">if</span>(key===<span class="string">'name'</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> target[key]</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 拦截delete</span></span><br><span class="line">deleteProperty(target,key)&#123;</span><br><span class="line"><span class="keyword">if</span>(key.indexOf(<span class="string">'_'</span>)&gt;<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="keyword">delete</span> target[key]</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> target[key]</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 拦截Object.keys,Object.getOwnPropertySymbols,Object.getOwnPropertyNames</span></span><br><span class="line">ownKeys(target)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Object</span>.keys(target).filter(<span class="function"><span class="params">item</span>=&gt;</span>item!=<span class="string">'time'</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// api</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'get'</span>,monitor.time) <span class="comment">// 2018-09-11</span></span><br><span class="line"></span><br><span class="line">monitor.time=<span class="string">'2018'</span>;</span><br><span class="line">monitor.name=<span class="string">'zhi'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'set'</span>,monitor.time,monitor);</span><br><span class="line"><span class="comment">// 2018-09-11 time: "2017-09-11", name: "zhi", _r: 123</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'has'</span>,<span class="string">'name'</span> <span class="keyword">in</span> monitor,<span class="string">'time'</span> <span class="keyword">in</span> monitor); <span class="comment">// true false</span></span><br><span class="line"><span class="comment">// time 是删不掉的,因为我们上面设置了只可以删除_开始的</span></span><br><span class="line"><span class="keyword">delete</span> monitor.time</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'delete'</span>,monitor)</span><br><span class="line"><span class="comment">// time: "2017-09-11", name: "zhi", _r: 123</span></span><br><span class="line"><span class="keyword">delete</span> monitor._r</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'delete'</span>,monitor)</span><br><span class="line"><span class="comment">// time: "2017-09-11", name: "zhi"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'ownKeys'</span>,<span class="built_in">Object</span>.keys(monitor)) <span class="comment">// ["name"]</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Reflect"><a href="#Reflect" class="headerlink" title="Reflect"></a>Reflect</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> obj=&#123;</span><br><span class="line">time:<span class="string">'2017-03-11'</span>,</span><br><span class="line">name:<span class="string">'net'</span>,</span><br><span class="line">_r:<span class="number">123</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Reflect get'</span>,<span class="built_in">Reflect</span>.get(obj,<span class="string">'time'</span>)) <span class="comment">// 2017-03-11</span></span><br><span class="line"><span class="built_in">Reflect</span>.set(obj,<span class="string">'name'</span>,<span class="string">'zhi'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// time: "2017-03-11", name: "zhi", _r: 123</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'has'</span>,<span class="built_in">Reflect</span>.has(obj,<span class="string">'name'</span>)) <span class="comment">//true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 撸一个例子</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">validator</span>(<span class="params">target,validator</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Proxy</span>(target,&#123;</span><br><span class="line">_validator:validator,</span><br><span class="line">set(target,key,value,proxy)&#123;</span><br><span class="line"><span class="keyword">if</span>(target.hasOwnProperty(key))&#123;</span><br><span class="line"><span class="keyword">let</span> va=<span class="keyword">this</span>._validator[key];</span><br><span class="line"><span class="keyword">if</span>(!!va(value))&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Reflect</span>.set(target,key,value,proxy)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">`不能设置<span class="subst">$&#123;key&#125;</span>到<span class="subst">$&#123;value&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">`<span class="subst">$&#123;key&#125;</span> 不存在`</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> personValidators=&#123;</span><br><span class="line">name(val)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">typeof</span> val===<span class="string">'string'</span></span><br><span class="line">&#125;,</span><br><span class="line">age(val)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">typeof</span> val === <span class="string">'number'</span> &amp;&amp; val&gt;<span class="number">18</span></span><br><span class="line">&#125;,</span><br><span class="line">mobile(val)&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(name,age)&#123;</span><br><span class="line"><span class="keyword">this</span>.name=name</span><br><span class="line"><span class="keyword">this</span>.age=age</span><br><span class="line"><span class="keyword">this</span>.mobile=<span class="string">'1111'</span></span><br><span class="line"><span class="keyword">return</span> validator(<span class="keyword">this</span>,personValidators)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person=<span class="keyword">new</span> Person(<span class="string">'lilei'</span>,<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.info(person) <span class="comment">// name: "lilei", age: 30, mobile: "1111"</span></span><br><span class="line"></span><br><span class="line">person.name=<span class="string">'Han mei mei'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.info(person) <span class="comment">// name: "Han mei mei", age: 30, mobile: "1111"</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Proxy和Reflect-这两或的方法都是一样的-放一起说了&quot;&gt;&lt;a href=&quot;#Proxy和Reflect-这两或的方法都是一样的-放一起说了&quot; class=&quot;headerlink&quot; title=&quot;Proxy和Reflect 这两或的方法都是一样的,放一起说
      
    
    </summary>
    
      <category term="ES6" scheme="http://douzhiwei.top/categories/ES6/"/>
    
    
      <category term="ES6" scheme="http://douzhiwei.top/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>set和map以及和数组对象的对比</title>
    <link href="http://douzhiwei.top/2018/03/23/set%E5%92%8Cmap%E4%BB%A5%E5%8F%8A%E5%92%8C%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AF%B9%E6%AF%94/"/>
    <id>http://douzhiwei.top/2018/03/23/set和map以及和数组对象的对比/</id>
    <published>2018-03-23T05:01:07.000Z</published>
    <updated>2018-03-26T07:39:54.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="新增数据结构Set-和-Map"><a href="#新增数据结构Set-和-Map" class="headerlink" title="新增数据结构Set 和 Map"></a>新增数据结构Set 和 Map</h2><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><p>Set和数组类似,但是成员唯一</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明方式1</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> list = <span class="keyword">new</span> <span class="built_in">Set</span>()</span><br><span class="line">list.add(<span class="number">5</span>)</span><br><span class="line">list.add(<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(list.size) <span class="comment">// 2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明方式2</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">let</span> list = <span class="keyword">new</span> <span class="built_in">Set</span>(arr)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(list.size) <span class="comment">// 5</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不可以有重复的成员</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> list = <span class="keyword">new</span> <span class="built_in">Set</span>()</span><br><span class="line">list.add(<span class="number">1</span>)</span><br><span class="line">list.add(<span class="number">2</span>)</span><br><span class="line">list.add(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(list); <span class="comment">// 只有 1,2</span></span><br><span class="line"><span class="comment">// 用途 数组去重</span></span><br><span class="line"><span class="keyword">let</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"><span class="keyword">let</span> list2=<span class="keyword">new</span> <span class="built_in">Set</span>(arr)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(list2) <span class="comment">// 1,2,3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// api crud 不再多说 看栗子</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> arr=[<span class="string">'add'</span>,<span class="string">'delete'</span>,<span class="string">'clear'</span>,<span class="string">'has'</span>]</span><br><span class="line"><span class="keyword">let</span> list=<span class="keyword">new</span> <span class="built_in">Set</span>(arr)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'has'</span>,list.has(<span class="string">'add'</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'delete'</span>,list.delete(<span class="string">'add'</span>),list) <span class="comment">// 'delete','clear','has'</span></span><br><span class="line">list.clear() <span class="comment">// 没了都删了</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'list'</span>,list)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历 都是我们常用的</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> arr=[<span class="string">'add'</span>,<span class="string">'delete'</span>,<span class="string">'clear'</span>,<span class="string">'has'</span>]</span><br><span class="line"><span class="keyword">let</span> list=<span class="keyword">new</span> <span class="built_in">Set</span>(arr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">of</span> list.keys())&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'keys'</span>,key)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> value <span class="keyword">of</span> list.values())&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'value'</span>,value)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> [key,value] <span class="keyword">of</span> list.entries())&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'entries'</span>,key,value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">list.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;<span class="built_in">console</span>.log(item)&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// weakSet 这玩意成员只能是对象,Set有的方法他都有</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> weakList=<span class="keyword">new</span> <span class="built_in">WeakSet</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arg=&#123;&#125;</span><br><span class="line"></span><br><span class="line">weakList.add(arg)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(weakList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明方式</span></span><br><span class="line"><span class="comment">// map的key可以是任意数据类型</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line"><span class="keyword">let</span> arr=[<span class="string">'123'</span>]</span><br><span class="line"></span><br><span class="line">map.set(arr,<span class="number">456</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'map'</span>,map,map.get(arr)) <span class="comment">// 456</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 常用api,和set很类似,放控制台打印就明白</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">'a'</span>,<span class="number">123</span>],[<span class="string">'b'</span>,<span class="number">456</span>]])</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'map'</span>,map)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'size'</span>,map.size)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'delete'</span>,map.delete(<span class="string">'a'</span>),map)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'clear'</span>,map.clear(),map)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// weakmap 和weakSet一样 成员必须是对象</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> weakmap=<span class="keyword">new</span> <span class="built_in">WeakMap</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> o=&#123;&#125;</span><br><span class="line">weakmap.set(o,<span class="number">123</span>)</span><br><span class="line"><span class="built_in">console</span>.log(weakmap.get(o))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Set-Map和数组-对象的横向对比"><a href="#Set-Map和数组-对象的横向对比" class="headerlink" title="Set,Map和数组,对象的横向对比"></a>Set,Map和数组,对象的横向对比</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="comment">// map和array的对比</span></span><br><span class="line"><span class="comment">// 数据结构横向对比，增，查，改，删</span></span><br><span class="line"><span class="keyword">let</span> map=<span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line"><span class="keyword">let</span> array=[]</span><br><span class="line"><span class="comment">// 增</span></span><br><span class="line">map.set(<span class="string">'t'</span>,<span class="number">1</span>)</span><br><span class="line">array.push(&#123;<span class="attr">t</span>:<span class="number">1</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">'map-array'</span>,map,array)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查</span></span><br><span class="line"><span class="keyword">let</span> map_exist=map.has(<span class="string">'t'</span>);</span><br><span class="line"><span class="keyword">let</span> array_exist=array.find(<span class="function"><span class="params">item</span>=&gt;</span>item.t)</span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">'map-array'</span>,map_exist,array_exist)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改</span></span><br><span class="line">map.set(<span class="string">'t'</span>,<span class="number">2</span>)</span><br><span class="line">array.forEach(<span class="function"><span class="params">item</span>=&gt;</span>item.t?item.t=<span class="number">2</span>:<span class="string">''</span>)</span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">'map-array-modify'</span>,map,array)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删</span></span><br><span class="line">map.delete(<span class="string">'t'</span>)</span><br><span class="line"><span class="keyword">let</span> index=array.findIndex(<span class="function"><span class="params">item</span>=&gt;</span>item.t)</span><br><span class="line">array.splice(index,<span class="number">1</span>)</span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">'map-array-empty'</span>,map,array)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// set和array的对比</span></span><br><span class="line"><span class="keyword">let</span> set=<span class="keyword">new</span> <span class="built_in">Set</span>()</span><br><span class="line"><span class="keyword">let</span> array=[]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 增</span></span><br><span class="line">set.add(&#123;<span class="attr">t</span>:<span class="number">1</span>&#125;)</span><br><span class="line">array.push(&#123;<span class="attr">t</span>:<span class="number">1</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">'set-array'</span>,set,array)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查</span></span><br><span class="line"><span class="keyword">let</span> set_exist=set.has(&#123;<span class="attr">t</span>:<span class="number">1</span>&#125;)</span><br><span class="line"><span class="keyword">let</span> array_exist=array.find(<span class="function"><span class="params">item</span>=&gt;</span>item.t)</span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">'set-array'</span>,set_exist,array_exist)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改</span></span><br><span class="line">set.forEach(<span class="function"><span class="params">item</span>=&gt;</span>item.t?item.t=<span class="number">2</span>:<span class="string">''</span>)</span><br><span class="line">array.forEach(<span class="function"><span class="params">item</span>=&gt;</span>item.t?item.t=<span class="number">2</span>:<span class="string">''</span>)</span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">'set-array-modify'</span>,set,array)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删</span></span><br><span class="line">set.forEach(<span class="function"><span class="params">item</span>=&gt;</span>item.t?set.delete(item):<span class="string">''</span>)</span><br><span class="line"><span class="keyword">let</span> index=array.findIndex(<span class="function"><span class="params">item</span>=&gt;</span>item.t)</span><br><span class="line">array.splice(index,<span class="number">1</span>)</span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">'set-array-empty'</span>,set,array)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// map,set,object对比</span></span><br><span class="line"><span class="keyword">let</span> item=&#123;<span class="attr">t</span>:<span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">let</span> map=<span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line"><span class="keyword">let</span> set=<span class="keyword">new</span> <span class="built_in">Set</span>()</span><br><span class="line"><span class="keyword">let</span> obj=&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 增</span></span><br><span class="line">map.set(<span class="string">'t'</span>,<span class="number">1</span>)</span><br><span class="line">set.add(item)</span><br><span class="line">obj[<span class="string">'t'</span>]=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">'map-set-obj'</span>,obj,map,set)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查</span></span><br><span class="line"><span class="built_in">console</span>.info(&#123;</span><br><span class="line">map_exist:map.has(<span class="string">'t'</span>),</span><br><span class="line">set_exist:set.has(item),</span><br><span class="line">obj_exist:<span class="string">'t'</span> <span class="keyword">in</span> obj</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改</span></span><br><span class="line">map.set(<span class="string">'t'</span>,<span class="number">2</span>)</span><br><span class="line">item.t=<span class="number">2</span></span><br><span class="line">obj[<span class="string">'t'</span>]=<span class="number">2</span></span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">'map-set-obj-modify'</span>,obj,map,set)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除</span></span><br><span class="line">map.delete(<span class="string">'t'</span>)</span><br><span class="line">set.delete(item)</span><br><span class="line"><span class="keyword">delete</span> obj[<span class="string">'t'</span>]</span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">'map-set-obj-empty'</span>,obj,map,set)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>简单总结</em></strong><br>对比看来,map占有优势,所以我们应该优先使用map,使用建议 map=&gt;set=&gt;array</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;新增数据结构Set-和-Map&quot;&gt;&lt;a href=&quot;#新增数据结构Set-和-Map&quot; class=&quot;headerlink&quot; title=&quot;新增数据结构Set 和 Map&quot;&gt;&lt;/a&gt;新增数据结构Set 和 Map&lt;/h2&gt;&lt;h3 id=&quot;Set&quot;&gt;&lt;a href=
      
    
    </summary>
    
      <category term="ES6" scheme="http://douzhiwei.top/categories/ES6/"/>
    
    
      <category term="ES6" scheme="http://douzhiwei.top/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>Symbol</title>
    <link href="http://douzhiwei.top/2018/03/23/Symbol/"/>
    <id>http://douzhiwei.top/2018/03/23/Symbol/</id>
    <published>2018-03-23T03:03:03.000Z</published>
    <updated>2018-03-26T07:40:09.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ES6-引入了一种新的原始数据类型Symbol，表示独一无二的值"><a href="#ES6-引入了一种新的原始数据类型Symbol，表示独一无二的值" class="headerlink" title="ES6 引入了一种新的原始数据类型Symbol，表示独一无二的值"></a>ES6 引入了一种新的原始数据类型Symbol，表示独一无二的值</h2><p>这个玩意我觉得没啥用处阿,简单看一下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 声明方式</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 第一种声明方式</span></span><br><span class="line"><span class="keyword">let</span> a1=<span class="built_in">Symbol</span>();</span><br><span class="line"><span class="keyword">let</span> a2=<span class="built_in">Symbol</span>();</span><br><span class="line"><span class="built_in">console</span>.log(a1===a2);</span><br><span class="line"><span class="comment">// false Symbol声明的是独一无二的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种声明方式</span></span><br><span class="line"><span class="keyword">let</span> a3=<span class="built_in">Symbol</span>.for(<span class="string">'a3'</span>);</span><br><span class="line"><span class="keyword">let</span> a4=<span class="built_in">Symbol</span>.for(<span class="string">'a3'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a3===a4);</span><br><span class="line"><span class="comment">// true 都引用的a3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 作为对象的key和symbol的遍历</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> a1=<span class="built_in">Symbol</span>.for(<span class="string">'abc'</span>);</span><br><span class="line"><span class="keyword">let</span> obj=&#123;</span><br><span class="line">[a1]:<span class="string">'123'</span>,</span><br><span class="line"><span class="string">'abc'</span>:<span class="number">345</span>,</span><br><span class="line"><span class="string">'c'</span>:<span class="number">456</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// 三个值,放控制台打印一下.这里就不写了</span></span><br><span class="line"><span class="comment">// 注意 for of 遍历找不到symbol的值</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> [key,value] <span class="keyword">of</span> <span class="built_in">Object</span>.entries(obj))&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'let of'</span>,key,value);</span><br><span class="line"><span class="comment">// abc:345 c:456</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Object.getOwnPropertySymbols只可以找到symbol</span></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertySymbols(obj).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(obj[item]);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// Reflect这个玩意 啥都可以找到</span></span><br><span class="line"><span class="built_in">Reflect</span>.ownKeys(obj).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'ownkeys'</span>,item,obj[item]);</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;ES6-引入了一种新的原始数据类型Symbol，表示独一无二的值&quot;&gt;&lt;a href=&quot;#ES6-引入了一种新的原始数据类型Symbol，表示独一无二的值&quot; class=&quot;headerlink&quot; title=&quot;ES6 引入了一种新的原始数据类型Symbol，表示独一
      
    
    </summary>
    
      <category term="ES6" scheme="http://douzhiwei.top/categories/ES6/"/>
    
    
      <category term="ES6" scheme="http://douzhiwei.top/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>对象的扩展</title>
    <link href="http://douzhiwei.top/2018/03/22/%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%89%A9%E5%B1%95/"/>
    <id>http://douzhiwei.top/2018/03/22/对象的扩展/</id>
    <published>2018-03-22T15:12:01.000Z</published>
    <updated>2018-03-26T07:36:11.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h2><ul><li>简洁表示法</li><li>属性表达式</li><li>新增API</li><li>扩展运算符</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="comment">// 简洁表示法</span></span><br><span class="line"><span class="keyword">let</span> o=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> k=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">let</span> es5=&#123;</span><br><span class="line">o:o,</span><br><span class="line">k:k</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> es6=&#123;</span><br><span class="line">o,</span><br><span class="line">k</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(es5,es6); <span class="comment">// 是一样的结果</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> es5_method=&#123;</span><br><span class="line">hello:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'hello'</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> es6_method=&#123;</span><br><span class="line">hello()&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'hello'</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(es5_method.hello(),es6_method.hello()); <span class="comment">// 也是一样的,在vue中我们就是用的简洁表示</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 属性表达式</span></span><br><span class="line"><span class="keyword">let</span> a=<span class="string">'b'</span>;</span><br><span class="line"><span class="keyword">let</span> es5_obj=&#123;</span><br><span class="line">a:<span class="string">'c'</span>,</span><br><span class="line">b:<span class="string">'c'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> es6_obj=&#123;</span><br><span class="line">[a]:<span class="string">'c'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(es5_obj,es6_obj) <span class="comment">// es5的就不说了 es6输出 &#123;b:c&#125;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// is</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(<span class="string">'abc'</span>,<span class="string">'abc'</span>),<span class="string">'abc'</span>===<span class="string">'abc'</span>) <span class="comment">// true true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is([],[]),[]===[]); <span class="comment">// false false</span></span><br><span class="line"><span class="comment">// 注意</span></span><br><span class="line">+<span class="number">0</span> === <span class="number">-0</span> <span class="comment">//true</span></span><br><span class="line"><span class="literal">NaN</span> === <span class="literal">NaN</span> <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Object</span>.is(+<span class="number">0</span>, <span class="number">-0</span>) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Object</span>.is(<span class="literal">NaN</span>, <span class="literal">NaN</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//assign</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'拷贝'</span>,<span class="built_in">Object</span>.assign(&#123;<span class="attr">a</span>:<span class="string">'a'</span>&#125;,&#123;<span class="attr">b</span>:<span class="string">'b'</span>&#125;)) <span class="comment">// &#123;a:a,b:b&#125; 注意这是浅拷贝</span></span><br><span class="line"><span class="comment">// entries</span></span><br><span class="line"><span class="keyword">let</span> test=&#123;<span class="attr">k</span>:<span class="number">123</span>,<span class="attr">o</span>:<span class="number">456</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> [key,value] <span class="keyword">of</span> <span class="built_in">Object</span>.entries(test))&#123;</span><br><span class="line"><span class="built_in">console</span>.log([key,value])</span><br><span class="line"><span class="comment">// [k,123] [o,456]</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 扩展运算符</span></span><br><span class="line"><span class="keyword">let</span> &#123;a,b,...c&#125;=&#123;<span class="attr">a</span>:<span class="string">'test'</span>,<span class="attr">b</span>:<span class="string">'kill'</span>,<span class="attr">c</span>:<span class="string">'ddd'</span>,<span class="attr">d</span>:<span class="string">'ccc'</span>&#125;;</span><br><span class="line"><span class="comment">// babel对这个支持还不是很友好</span></span><br><span class="line">c=&#123;</span><br><span class="line">c:<span class="string">'ddd'</span>,</span><br><span class="line">d:<span class="string">'ccc'</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;新增&quot;&gt;&lt;a href=&quot;#新增&quot; class=&quot;headerlink&quot; title=&quot;新增&quot;&gt;&lt;/a&gt;新增&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;简洁表示法&lt;/li&gt;
&lt;li&gt;属性表达式&lt;/li&gt;
&lt;li&gt;新增API&lt;/li&gt;
&lt;li&gt;扩展运算符&lt;/li&gt;
&lt;/ul&gt;
&lt;f
      
    
    </summary>
    
      <category term="ES6" scheme="http://douzhiwei.top/categories/ES6/"/>
    
    
      <category term="ES6" scheme="http://douzhiwei.top/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>函数的扩展</title>
    <link href="http://douzhiwei.top/2018/03/22/%E5%87%BD%E6%95%B0%E7%9A%84%E6%89%A9%E5%B1%95/"/>
    <id>http://douzhiwei.top/2018/03/22/函数的扩展/</id>
    <published>2018-03-22T14:00:54.000Z</published>
    <updated>2018-03-26T07:36:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>##新增</p><ul><li>函数参数的默认值</li><li>rest参数</li><li>箭头函数</li><li>尾调用</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数参数的默认值</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">x, y = <span class="string">'world'</span></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'默认值'</span>,x,y);</span><br><span class="line">&#125;</span><br><span class="line">test(<span class="string">'hello'</span>); <span class="comment">// hello world</span></span><br><span class="line"><span class="comment">// 如果传的参数默认值会被替换</span></span><br><span class="line">test(<span class="string">'hello'</span>,<span class="string">'dou'</span>); <span class="comment">//hello dou</span></span><br><span class="line"><span class="comment">// 注意这会带来一个作用域的问题</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x, y = x</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(y);</span><br><span class="line">&#125;</span><br><span class="line">f(<span class="number">2</span>) <span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 设置默认值，会形成一个单独的作用域等到初始化结束，这个作用域就会消失 </span></span><br><span class="line"><span class="keyword">let</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">y = x</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> x = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(y);</span><br><span class="line">&#125;</span><br><span class="line">f() <span class="comment">// 1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// rest参数</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test3</span>(<span class="params">...arg</span>)</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> arg)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'rest'</span>,v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">test3(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="string">'a'</span>) <span class="comment">//1,2,3,4,a</span></span><br><span class="line"><span class="comment">// rest参数会将传入的字符串转化为数组</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//扩展运算符 相当于rest的逆运算=&gt;把数组展开</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">console</span>.log(...[<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>]); <span class="comment">// 1,2,4</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'a'</span>,...[<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>]); <span class="comment">// a,1,2,4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数 不在说了</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> arrow = <span class="function"><span class="params">v</span> =&gt;</span> v*<span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(arrow(<span class="number">1</span>)) <span class="comment">// 2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 尾调用,优化用,不再展开,基本形式如下</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tail</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'tail'</span>,x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fx</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> tail(x)</span><br><span class="line">&#125;</span><br><span class="line">fx(<span class="number">123</span>) <span class="comment">// tail 123</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##新增&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;函数参数的默认值&lt;/li&gt;
&lt;li&gt;rest参数&lt;/li&gt;
&lt;li&gt;箭头函数&lt;/li&gt;
&lt;li&gt;尾调用&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutte
      
    
    </summary>
    
      <category term="ES6" scheme="http://douzhiwei.top/categories/ES6/"/>
    
    
      <category term="ES6" scheme="http://douzhiwei.top/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>数组的扩展</title>
    <link href="http://douzhiwei.top/2018/03/22/%E6%95%B0%E7%BB%84%E7%9A%84%E6%89%A9%E5%B1%95/"/>
    <id>http://douzhiwei.top/2018/03/22/数组的扩展/</id>
    <published>2018-03-22T13:18:54.000Z</published>
    <updated>2018-03-26T07:37:03.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="新特性"><a href="#新特性" class="headerlink" title="新特性"></a>新特性</h2><h3 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from"></a>Array.from</h3><h3 id="Array-of"><a href="#Array-of" class="headerlink" title="Array.of"></a>Array.of</h3><h3 id="copyeWithin"><a href="#copyeWithin" class="headerlink" title="copyeWithin"></a>copyeWithin</h3><h3 id="find-findIndex"><a href="#find-findIndex" class="headerlink" title="find/findIndex"></a>find/findIndex</h3><h3 id="fill"><a href="#fill" class="headerlink" title="fill"></a>fill</h3><h3 id="entries-keys-values"><a href="#entries-keys-values" class="headerlink" title="entries\keys\values"></a>entries\keys\values</h3><h3 id="includes"><a href="#includes" class="headerlink" title="includes"></a>includes</h3><p><strong>直接看代码</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// Array.of 将一组值，转换为数组</span></span><br><span class="line"><span class="keyword">let</span> arr = <span class="built_in">Array</span>.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr) [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="keyword">let</span> emptyArr = <span class="built_in">Array</span>.of()</span><br><span class="line"><span class="built_in">console</span>.log(emptyArr) <span class="comment">// []</span></span><br><span class="line"><span class="comment">//Array.from 把类数组转为数组</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.from([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> item*<span class="number">2</span> <span class="comment">// 2,4,6</span></span><br><span class="line">&#125;))</span><br><span class="line"><span class="comment">//fill填充 第二个和第三个参数，用于指定填充的起始位置和结束位置</span></span><br><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span>,<span class="string">'a'</span>,<span class="literal">undefined</span>].fill(<span class="number">1</span>)) <span class="comment">//[1,1,1]</span></span><br><span class="line"><span class="built_in">console</span>.log([a,b,c],fill(<span class="number">7</span>,<span class="number">1</span>,<span class="number">3</span>)) <span class="comment">// [a,7,7]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// key values entries</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">of</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].key())&#123;</span><br><span class="line"><span class="built_in">console</span>.log(i) <span class="comment">//0,1,2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//兼容</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].values())&#123;</span><br><span class="line"><span class="built_in">console</span>.log(v) <span class="comment">//1,2,3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> [i,v] <span class="keyword">of</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].entries())&#123;</span><br><span class="line"><span class="built_in">console</span>.log(i,v) <span class="comment">// 0 1 1 2 2 3</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//copyWithin将指定位置的成员复制到其他位置,并返回新数组</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>].copyWithin(<span class="number">0</span>,<span class="number">3</span>,<span class="number">4</span>)) <span class="comment">//[4,2,3,4,5]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//find findIndex 找出第一个符合条件的数组成员</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>].find(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> item&gt;<span class="number">3</span></span><br><span class="line">&#125;)) <span class="comment">// 4 只找一次</span></span><br><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>].findIndex(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> item&gt;<span class="number">3</span></span><br><span class="line">&#125;)) <span class="comment">// 3 只找一次</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// includes 找数组里的值,可以找NaN</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span>,<span class="number">2</span>,<span class="literal">NaN</span>].includes(<span class="number">1</span>)) <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span>,<span class="number">2</span>,<span class="literal">NaN</span>].includes(<span class="literal">NaN</span>)) <span class="comment">//true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;新特性&quot;&gt;&lt;a href=&quot;#新特性&quot; class=&quot;headerlink&quot; title=&quot;新特性&quot;&gt;&lt;/a&gt;新特性&lt;/h2&gt;&lt;h3 id=&quot;Array-from&quot;&gt;&lt;a href=&quot;#Array-from&quot; class=&quot;headerlink&quot; title=&quot;A
      
    
    </summary>
    
      <category term="ES6" scheme="http://douzhiwei.top/categories/ES6/"/>
    
    
      <category term="ES6" scheme="http://douzhiwei.top/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>数值的扩展</title>
    <link href="http://douzhiwei.top/2018/03/22/%E6%95%B0%E5%80%BC%E7%9A%84%E6%89%A9%E5%B1%95/"/>
    <id>http://douzhiwei.top/2018/03/22/数值的扩展/</id>
    <published>2018-03-22T02:55:10.000Z</published>
    <updated>2018-03-26T07:36:56.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="新特性"><a href="#新特性" class="headerlink" title="新特性"></a>新特性</h2><ul><li>二进制和八进制表示法</li><li>新增方法</li></ul><h3 id="二进制和八进制表示法"><a href="#二进制和八进制表示法" class="headerlink" title="二进制和八进制表示法"></a>二进制和八进制表示法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="comment">//二进制</span></span><br><span class="line"><span class="built_in">console</span>.log（<span class="number">0b111110111</span>） <span class="comment">//503</span></span><br><span class="line"><span class="comment">//八进制</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0o767</span>) <span class="comment">//503</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="新增方法-常用的"><a href="#新增方法-常用的" class="headerlink" title="新增方法,常用的"></a>新增方法,常用的</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="comment">// 检查是不是有限的 (-2^53,2^53)</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isFinite(<span class="number">1</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isFinite(<span class="literal">NaN</span>)) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isFinite(<span class="number">1</span>/<span class="number">0</span>)) <span class="comment">// false</span></span><br><span class="line"><span class="comment">// 检查是不是NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isNaN(<span class="literal">NaN</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isNaN(<span class="number">0</span>)) <span class="comment">// false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 检查是不是整数</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isInteger(<span class="number">1</span>)) <span class="comment">//true</span></span><br><span class="line"><span class="comment">// 这要注意</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isInteger(<span class="number">1.0</span>)) <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isInteger(<span class="number">1.1</span>)) <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isInteger(<span class="string">'1'</span>)) <span class="comment">//false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 最大和最小安全数值</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.MAX_SAFE_INTEGER)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.MIN_SAFE_INTEGER)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isSafeIntger(<span class="number">1</span>)) <span class="comment">//true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 取整</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.trunc(<span class="number">1.1</span>)) <span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.trunc(<span class="number">1.9</span>)) <span class="comment">//1</span></span><br><span class="line"><span class="comment">//判断一个数到底是正数、负数、还是零</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.sign(<span class="number">-2</span>)) <span class="comment">//-1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.sign(<span class="number">0</span>)) <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.sign(<span class="number">2</span>)) <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.sign(<span class="string">'2'</span>)) <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.sign(<span class="string">'aa'</span>)) <span class="comment">// NaN</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;新特性&quot;&gt;&lt;a href=&quot;#新特性&quot; class=&quot;headerlink&quot; title=&quot;新特性&quot;&gt;&lt;/a&gt;新特性&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;二进制和八进制表示法&lt;/li&gt;
&lt;li&gt;新增方法&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;二进制和八进制表示法&quot;&gt;&lt;a h
      
    
    </summary>
    
      <category term="ES6" scheme="http://douzhiwei.top/categories/ES6/"/>
    
    
      <category term="ES6" scheme="http://douzhiwei.top/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>字符串的扩展</title>
    <link href="http://douzhiwei.top/2018/03/21/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%89%A9%E5%B1%95/"/>
    <id>http://douzhiwei.top/2018/03/21/字符串的扩展/</id>
    <published>2018-03-21T12:12:43.000Z</published>
    <updated>2018-03-26T07:37:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>##新增</p><ul><li>Unicode表示法</li><li>遍历接口</li><li>新增方法</li><li>模板,便签字符串</li></ul><h3 id="Unicode表示法"><a href="#Unicode表示法" class="headerlink" title="Unicode表示法"></a>Unicode表示法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="comment">// es5的写法</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`\u0061`</span>) <span class="comment">// a</span></span><br><span class="line">consoel.log(<span class="string">`\u20BB7`</span>) <span class="comment">// 不正常显示 因为这个大于了 0xFFFF,超出这个必须用双字节形式表示</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`\uD842\uDFB7`</span>) <span class="comment">// 𠮷</span></span><br><span class="line"><span class="comment">// es6的写法 用\u&#123;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`\u&#123;20BB7&#125;`</span>) <span class="comment">// 𠮷</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//js内部，字符以UTF-16的格式储存，每个字符固定为2个字节。对于那些需要4个字节储存的字符（Unicode码大于0xFFFF的字符），js会认为它们是两个字符</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> s = <span class="string">'𠮷'</span></span><br><span class="line"><span class="comment">// es5</span></span><br><span class="line"><span class="built_in">console</span>.log(s.length) <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(s.charAt(<span class="number">0</span>)) <span class="comment">// 乱码</span></span><br><span class="line"><span class="built_in">console</span>.log(s.charAt(<span class="number">1</span>)) <span class="comment">//乱码</span></span><br><span class="line"><span class="built_in">console</span>.log(s.charCodeAt(<span class="number">0</span>)) <span class="comment">// 55362</span></span><br><span class="line"><span class="built_in">console</span>.log(s.charCodeAt(<span class="number">1</span>)) <span class="comment">// 57271</span></span><br><span class="line"><span class="comment">// es6</span></span><br><span class="line"><span class="keyword">let</span> s1 = <span class="string">'𠮷a'</span></span><br><span class="line"><span class="built_in">console</span>.log(s1.length) <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(s1.codePointAt(<span class="number">0</span>)) <span class="comment">// 134071</span></span><br><span class="line"><span class="built_in">console</span>.log(s1.codePointAt(<span class="number">0</span>).toString(<span class="number">16</span>)) <span class="comment">// 20bb7</span></span><br><span class="line"><span class="built_in">console</span>.log(s1.codePointAt(<span class="number">1</span>)) <span class="comment">// 57271</span></span><br><span class="line"><span class="built_in">console</span>.log(s1.codePointAt(<span class="number">2</span>)) <span class="comment">// 97</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ES5提供String.fromCharCode方法，用于从码点返回对应字符，但是这个方法不能识别32位的UTF-16字符（Unicode编号大于0xFFFF）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6提供了String.fromCodePoint方法，可以识别大于0xFFFF的字符,在作用上，与codePointAt方法相反</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//es5</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>.fromCharCode(<span class="string">'0x20bb7'</span>)) <span class="comment">// 乱码</span></span><br><span class="line"><span class="comment">//es6</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>.formCodePoint(<span class="string">'0x20bb7'</span>)) <span class="comment">// 𠮷</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="遍历接口"><a href="#遍历接口" class="headerlink" title="遍历接口"></a>遍历接口</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="comment">// es5</span></span><br><span class="line"><span class="keyword">let</span> str=<span class="string">'\u&#123;20bb7&#125;abc'</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i =<span class="number">0</span>;i&lt;str.length;i++)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(str[i]) <span class="comment">// 乱码 乱码 a b c</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// es6</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> code <span class="keyword">of</span> str)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(code) <span class="comment">// 𠮷 a b c for of 可以正确识别</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="新的常用方法"><a href="#新的常用方法" class="headerlink" title="新的常用方法"></a>新的常用方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// includes startsWith endsWith</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> str = <span class="string">'string'</span></span><br><span class="line"><span class="built_in">console</span>.log(str.includes(<span class="string">'r'</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(str.startsWith(<span class="string">'s'</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(str.endsWith(<span class="string">'g'</span>)) <span class="comment">// true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// repeat</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> str = <span class="string">'abc'</span></span><br><span class="line"><span class="built_in">console</span>.log(str.repeat(<span class="number">2</span>)) <span class="comment">// abcabc</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//忽略换行</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>.raw<span class="string">`Hi\n<span class="subst">$&#123;<span class="number">1</span>+<span class="number">2</span>&#125;</span>`</span>) Hi\n3</span><br><span class="line"><span class="built_in">console</span>.log(S<span class="string">`Hi\n<span class="subst">$&#123;<span class="number">1</span>+<span class="number">2</span>&#125;</span>`</span>) <span class="comment">// 换行</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// padStart padEnd 这两个还处于草案阶段,要使用babel-polyfill进行编译</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'1'</span>,padStart(<span class="number">2.</span><span class="string">'0'</span>)) <span class="comment">//01 第一个参数是长度，长度不够补0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'1'</span>,padEnd(<span class="number">2.</span><span class="string">'0'</span>)) <span class="comment">//10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="便签-模板字符串-很好用"><a href="#便签-模板字符串-很好用" class="headerlink" title="便签,模板字符串,很好用"></a>便签,模板字符串,很好用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> name=<span class="string">"dou"</span>;</span><br><span class="line"><span class="keyword">let</span> info=<span class="string">"hello"</span>;</span><br><span class="line"><span class="keyword">let</span> m=<span class="string">`i am <span class="subst">$&#123;name&#125;</span>,<span class="subst">$&#123;info&#125;</span>`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(m); <span class="comment">//i am dou, hello</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> user=&#123;</span><br><span class="line">name:<span class="string">'name'</span>,</span><br><span class="line">info:<span class="string">'hello'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(abc<span class="string">`i am <span class="subst">$&#123;user.name&#125;</span>,<span class="subst">$&#123;user.info&#125;</span>`</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">abc</span>(<span class="params">s,v1,v2</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(s,v1,v2);</span><br><span class="line"><span class="keyword">return</span> s+v1+v2</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// i am ,,,dou hello</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##新增&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Unicode表示法&lt;/li&gt;
&lt;li&gt;遍历接口&lt;/li&gt;
&lt;li&gt;新增方法&lt;/li&gt;
&lt;li&gt;模板,便签字符串&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Unicode表示法&quot;&gt;&lt;a href=&quot;#Unicode表示法&quot; class=&quot;he
      
    
    </summary>
    
      <category term="ES6" scheme="http://douzhiwei.top/categories/ES6/"/>
    
    
      <category term="ES6" scheme="http://douzhiwei.top/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>正则的扩展</title>
    <link href="http://douzhiwei.top/2018/03/21/%E6%AD%A3%E5%88%99%E7%9A%84%E6%89%A9%E5%B1%95/"/>
    <id>http://douzhiwei.top/2018/03/21/正则的扩展/</id>
    <published>2018-03-21T04:51:30.000Z</published>
    <updated>2018-03-26T07:37:34.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="新特性"><a href="#新特性" class="headerlink" title="新特性"></a>新特性</h2><ul><li>构造函数的变化</li><li>方法的扩展</li><li>u y 修饰符</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数的变化</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// es5 RegExp的两种情况</span></span><br><span class="line"><span class="comment">//第一种情况，参数是字符串，这时第二个参数表示正则表达式的修饰符</span></span><br><span class="line"><span class="keyword">let</span> regex=<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'xyz'</span>,<span class="string">'i'</span>)</span><br><span class="line"><span class="comment">// 第二种情况，参数是一个正则表示式</span></span><br><span class="line"><span class="keyword">let</span> regex2= <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/xyz/i</span>)</span><br><span class="line"><span class="built_in">console</span>.log(regex.test(<span class="string">'xyz123'</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(regex2.test(<span class="string">'xyz123'</span>)) <span class="comment">//true</span></span><br><span class="line"><span class="comment">// es6 构造函数第一个参数是一个正则对象，可以使用第二个参数指定修饰符</span></span><br><span class="line"><span class="keyword">let</span> regex3 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/xyz/ig</span>,<span class="string">'i'</span>)</span><br><span class="line"><span class="comment">// ig会被覆盖</span></span><br><span class="line"><span class="built_in">console</span>.log(regex3.flags) <span class="comment">// i</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// y修饰符</span></span><br><span class="line"><span class="comment">// y修饰符于g类似都是全局搜索,g修饰符只要剩余位置中存在匹配就可，而y修饰符确保匹配必须从剩余的第一个位置开始</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> s=<span class="string">'aaa_a_a'</span></span><br><span class="line"><span class="keyword">let</span> a1=<span class="regexp">/b+/g</span></span><br><span class="line"><span class="keyword">let</span> a2=<span class="regexp">/b+/y</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'one'</span>,a1.exec(s)) <span class="comment">//[aaa,inex:0,input:'aaa_a_a']</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'one'</span>,a2.exec(s)) <span class="comment">//[aaa,inex:0,input:'aaa_a_a']</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'two'</span>,a1.exec(s)) <span class="comment">//[a,inex:4,input:'aaa_a_a']</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'two'</span>,a2.exec(s)) <span class="comment">// null</span></span><br><span class="line"><span class="comment">// sticky</span></span><br><span class="line"><span class="built_in">console</span>.log(a1.sticky) <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(a2.sticky) <span class="comment">//true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// u修饰符</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 新增了使用大括号表示 Unicode，这种表示法在正则表达式中必须加上u修饰符，才能识别当中的大括号，否则会被解读为量词。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// u 修饰符 用于处理utf-16编码</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/^\uD83D/</span>.test(<span class="string">'\uD83D\uDC2A'</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/^\uD83D/u</span>.test(<span class="string">'\uD83D\uDC2A'</span>)) <span class="comment">// false</span></span><br><span class="line"><span class="comment">// \uD83D\uDC2A是一个四个字节的 UTF-16 编码，代表一个字符。但是，ES5 不支持四个字节的 UTF-16 编码，</span></span><br><span class="line"><span class="comment">// 会将其识别为两个字符，导致第一行行代码结果为true。加了u修饰符以后，ES6 就会识别其为一个字符，所以第二行代码结果为false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/\u&#123;61&#125;/</span>.test(<span class="string">'a'</span>)) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/\u&#123;61&#125;/u</span>.test(<span class="string">'a'</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="comment">// Unicode 字符表示法,可以正确识别超过两个字符的unicode代码</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`\u&#123;20BB7&#125;`</span>) <span class="comment">// 吉</span></span><br><span class="line"><span class="keyword">let</span> s= <span class="string">'吉'</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/^.$/</span>.test(s)) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/^.$/u</span>.test(s)) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log（<span class="string">'test'</span>,/吉&#123;<span class="number">2</span>&#125;/.test（<span class="string">'吉吉'</span>）） <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log（<span class="string">'test-2'</span>,/吉&#123;<span class="number">2</span>&#125;/u.test（<span class="string">'吉吉'</span>）） <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;新特性&quot;&gt;&lt;a href=&quot;#新特性&quot; class=&quot;headerlink&quot; title=&quot;新特性&quot;&gt;&lt;/a&gt;新特性&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;构造函数的变化&lt;/li&gt;
&lt;li&gt;方法的扩展&lt;/li&gt;
&lt;li&gt;u y 修饰符&lt;/li&gt;
&lt;/ul&gt;
&lt;figure c
      
    
    </summary>
    
      <category term="ES6" scheme="http://douzhiwei.top/categories/ES6/"/>
    
    
      <category term="ES6" scheme="http://douzhiwei.top/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>解构赋值</title>
    <link href="http://douzhiwei.top/2018/03/20/%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC/"/>
    <id>http://douzhiwei.top/2018/03/20/解构赋值/</id>
    <published>2018-03-20T04:49:38.000Z</published>
    <updated>2018-03-26T07:36:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>数组 对象 字符串 布尔值 函数参数 数值 的解构赋值，这主要说数值和对象的，其他的都差不多</p><h3 id="数组的解构赋值"><a href="#数组的解构赋值" class="headerlink" title="数组的解构赋值"></a>数组的解构赋值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//最基本的写法</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> a,b</span><br><span class="line">[a,b] = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"><span class="built_in">console</span>.log(a,b) <span class="comment">// 1,2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加默认值</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> a,b</span><br><span class="line">[a,b,c=<span class="number">3</span>] = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"><span class="built_in">console</span>.log(a,b,c) <span class="comment">// 1,2,3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用场景</span></span><br><span class="line"><span class="comment">// 1. 变量的值交换</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">2</span></span><br><span class="line">[a,b] = [b,a]</span><br><span class="line"><span class="built_in">console</span>.log(a,b) <span class="comment">//2, 1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 从函数的返回值取值</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> a,b</span><br><span class="line">[a,b] = f()</span><br><span class="line"><span class="built_in">console</span>.log(a,b) <span class="comment">// 1, 2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 从函数的返回值中取值，并且弄成我们想要的格式</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> a,b,c</span><br><span class="line">[a,,,b]=f()</span><br><span class="line"><span class="built_in">console</span>.log(a,b) <span class="comment">//1,4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 同样，取我们想要的</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> a,b,c</span><br><span class="line">[a,...b]=f()</span><br><span class="line"><span class="built_in">console</span>.log(a,b) <span class="comment">//1, [2,3,4,5]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 取我们想要的，意思就是乐意要啥就拿啥</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> a,b,rest</span><br><span class="line">[a,b,..rest] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="built_in">console</span>.log(a,b,rest) <span class="comment">// 1, 2, [3,4,5]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对象的解构赋值"><a href="#对象的解构赋值" class="headerlink" title="对象的解构赋值"></a>对象的解构赋值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基本写法</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> a,b</span><br><span class="line">&#123;&#123;a,b&#125; = &#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>&#125;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a,b) <span class="comment">// 1, 2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> o = &#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">q</span>:<span class="literal">true</span>&#125;</span><br><span class="line"><span class="keyword">let</span> &#123;a,p&#125; = o</span><br><span class="line"><span class="built_in">console</span>.log(a,q) <span class="comment">//1,true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加默认值</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> &#123;a=<span class="number">10</span>,b=<span class="number">1</span>&#125; = &#123;a=<span class="number">1</span>&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a,b) <span class="comment">//1,1 ,默认值会被后面的值替换</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用场景</span></span><br><span class="line"><span class="comment">// 模拟后端接口，取我们想要的值</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> data = &#123;</span><br><span class="line">title: <span class="string">'a'</span>,</span><br><span class="line">test:[&#123;</span><br><span class="line">title: <span class="string">'b'</span></span><br><span class="line">desc: <span class="string">'desc'</span></span><br><span class="line">&#125;]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">title</span>:esTitle,<span class="attr">test</span>:[&#123;<span class="attr">title</span>:cTitle&#125;]&#125; = data</span><br><span class="line"><span class="built_in">console</span>.log(esTitle,cTitle) <span class="comment">// a ,b</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>最后 为啥都加了一个大括号呢，这样的目的是利用块作用域把变量隔离开，要不就报重复定义的错了</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;分类&quot;&gt;&lt;a href=&quot;#分类&quot; class=&quot;headerlink&quot; title=&quot;分类&quot;&gt;&lt;/a&gt;分类&lt;/h2&gt;&lt;p&gt;数组 对象 字符串 布尔值 函数参数 数值 的解构赋值，这主要说数值和对象的，其他的都差不多&lt;/p&gt;
&lt;h3 id=&quot;数组的解构赋值&quot;&gt;&lt;a
      
    
    </summary>
    
      <category term="ES6" scheme="http://douzhiwei.top/categories/ES6/"/>
    
    
      <category term="ES6" scheme="http://douzhiwei.top/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>const</title>
    <link href="http://douzhiwei.top/2018/03/20/let%20%E5%92%8C%20const/"/>
    <id>http://douzhiwei.top/2018/03/20/let 和 const/</id>
    <published>2018-03-20T02:45:51.000Z</published>
    <updated>2018-03-26T07:39:02.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="作用域的概念"><a href="#作用域的概念" class="headerlink" title="作用域的概念"></a>作用域的概念</h2><ul><li>在es5中只有全局作用域和函数作用域</li><li>在es6中新增块作用域</li></ul><h2 id="如何使用let和const"><a href="#如何使用let和const" class="headerlink" title="如何使用let和const"></a>如何使用let和const</h2><p>直接看代码</p><ul><li>let</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 块作用域</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>; i&lt;<span class="number">3</span>; i++)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(i) <span class="comment">//1 2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i) <span class="comment">// ReferenceError 这里为啥会报这个错误呢</span></span><br><span class="line"><span class="number">1.</span><span class="keyword">let</span>声明的是块作用域</span><br><span class="line"><span class="number">2.</span>这里找不到i应该报<span class="literal">undefined</span>的啊，因为在es6中强制使用严格模式，变量未定义直接引用就会报引用异常。也就是说自动使用了</span><br><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不能重复定义</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">2</span> <span class="comment">// 会报Duplicate declaration这个错误，因为let声明的变量不能重复定义</span></span><br></pre></td></tr></table></figure><ul><li>const</li><li>也是块作用域和let一样</li><li>和let有一个区别，let可以声明的时候不赋值，但是const必须声明时赋值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// const定义常量，赋值以后不能改变</span></span><br><span class="line"><span class="keyword">const</span> PI = <span class="number">3.14</span></span><br><span class="line">PI = <span class="number">1</span> <span class="comment">//会报PI is read-only这个错误，因为const定义的不能修改</span></span><br><span class="line"><span class="comment">// 声明必须赋值</span></span><br><span class="line"><span class="keyword">const</span> a</span><br><span class="line">a = <span class="number">1</span> <span class="comment">// 会报Unexpected token这个错，因为 const 定义的时候必须赋值</span></span><br><span class="line"><span class="comment">// 特殊的</span></span><br><span class="line"><span class="keyword">const</span> k = &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;</span><br><span class="line">k.b=<span class="number">2</span> <span class="comment">//k=&#123;a:1,b:2&#125; k是引用类型 返回值是指针，k的指针并没有变，所以不会报错</span></span><br></pre></td></tr></table></figure><blockquote><p>不存在变量提升,变量未声明使用会报错ReferenceError</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;作用域的概念&quot;&gt;&lt;a href=&quot;#作用域的概念&quot; class=&quot;headerlink&quot; title=&quot;作用域的概念&quot;&gt;&lt;/a&gt;作用域的概念&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在es5中只有全局作用域和函数作用域&lt;/li&gt;
&lt;li&gt;在es6中新增块作用域&lt;/li&gt;
&lt;/u
      
    
    </summary>
    
      <category term="ES6" scheme="http://douzhiwei.top/categories/ES6/"/>
    
    
      <category term="ES6" scheme="http://douzhiwei.top/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>自己写一个Promise</title>
    <link href="http://douzhiwei.top/2018/03/19/Promise/"/>
    <id>http://douzhiwei.top/2018/03/19/Promise/</id>
    <published>2018-03-19T09:08:07.000Z</published>
    <updated>2018-03-26T07:39:39.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h1><p>Promise对象代表一个异步操作，有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Promise</span>(<span class="params">excutor</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> self = <span class="keyword">this</span></span><br><span class="line">  self.status = <span class="string">'pending'</span></span><br><span class="line">  self.value = <span class="literal">null</span></span><br><span class="line">  self.reason = <span class="literal">null</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (self.status === <span class="string">'pending'</span>) &#123;</span><br><span class="line">      self.value = value</span><br><span class="line">      self.status = <span class="string">'fulfilled'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">reject</span>(<span class="params">reason</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (self.status === <span class="string">'pending'</span>) &#123;</span><br><span class="line">      self.reason = reason</span><br><span class="line">      self.status = <span class="string">'rejected'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    excutor(resolve, reject)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    reject(err)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Promise接收一个函数作为参数，该函数有两个参数，一个是resolve，表示成功时执行的函数，一个是reject，表示失败失败时执行的函数。resolve执行时传入的参数会作为then方法中第一个函数的参数，reject执行传入的参数会作为then方法中第二函数的参数。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.prototype.then = <span class="function"><span class="keyword">function</span> (<span class="params">onFulfilled, onRejected</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> self = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">if</span> (self.status === <span class="string">'fulfilled'</span>) &#123;</span><br><span class="line">    onFulfilled(self.value)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (self.status === <span class="string">'rejected'</span>) &#123;</span><br><span class="line">    onRejected(self.reason)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Promise中常常会写一些异步代码，等到异步操作执行完成才会触发resolve或者reject函数，当执行then方法的时候此时的状态还是初始的pending状态，所以为了能取到值，我们可以通过发布订阅模式来写。</p><a id="more"></a><h2 id="基本调用"><a href="#基本调用" class="headerlink" title="基本调用"></a>基本调用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Promise</span>(<span class="params">excutor</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> self = <span class="keyword">this</span></span><br><span class="line">  self.status = <span class="string">'pending'</span></span><br><span class="line">  self.value = <span class="literal">null</span></span><br><span class="line">  self.reason = <span class="literal">null</span></span><br><span class="line">  self.onFulfilledCallbacks = []</span><br><span class="line">  self.onRejectedCallbacks = []</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (self.status === <span class="string">'pending'</span>) &#123;</span><br><span class="line">      self.value = value</span><br><span class="line">      self.status = <span class="string">'fulfilled'</span></span><br><span class="line">      self.onFulfilledCallbacks.forEach(<span class="function"><span class="params">item</span> =&gt;</span> item(self.value))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">reject</span>(<span class="params">reason</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (self.status === <span class="string">'pending'</span>) &#123;</span><br><span class="line">      self.reason = reason</span><br><span class="line">      self.status = <span class="string">'rejected'</span></span><br><span class="line">      self.onRejectedCallbacks.forEach(<span class="function"><span class="params">item</span> =&gt;</span> item(self.reason))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    excutor(resolve, reject)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    reject(err)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.prototype.then = <span class="function"><span class="keyword">function</span> (<span class="params">onFulfilled, onRejected</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> self = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">if</span> (self.status === <span class="string">'fulfilled'</span>) &#123;</span><br><span class="line">    onFulfilled(self.value)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (self.status === <span class="string">'rejected'</span>) &#123;</span><br><span class="line">    onRejected(self.reason)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (self.status === <span class="string">'pending'</span>) &#123;</span><br><span class="line">    self.onFulfilledCallbacks.push(onFulfilled)</span><br><span class="line">    self.onRejectedCallbacks.push(onRejected)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们都知道Promise有一个特点，就是链式调用，当执行then完成后可以继续执行then方法，其实他的原理就是通过返回一个新的Promise实现的，那么then方法中的代码就可以写成下面这样<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.prototype.then = <span class="function"><span class="keyword">function</span> (<span class="params">onFulfilled, onRejected</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> self = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">if</span> (self.status === <span class="string">'fulfilled'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      onFulfilled(self.value)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (self.status === <span class="string">'rejected'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      onRejected(self.reason)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (self.status === <span class="string">'pending'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      self.onFulfilledCallbacks.push(onFulfilled)</span><br><span class="line">      self.onRejectedCallbacks.push(onRejected)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>then方法接收的两个函数中，可以通过return把值传给下一个步，也可以返回一个新的Promise把值传给下一步，then方法执行的时候有个特点，就是为了保证链式调用，上一次then中不管你是成功态还是失败态都会把参数作为下一个then中成功时回调的参数，举个例子<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  reject(<span class="string">'1'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> promise2 = promise1.then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;, (err) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">&#125;)</span><br><span class="line">promise2.then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res)<span class="comment">//不管上一次then执行的那个回调函数，在这里都可以接收到参数</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h2 id="实现链式调用"><a href="#实现链式调用" class="headerlink" title="实现链式调用"></a>实现链式调用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.prototype.then = <span class="function"><span class="keyword">function</span> (<span class="params">onFulfilled, onRejected</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> self = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">if</span> (self.status === <span class="string">'fulfilled'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> x = onFulfilled(self.value)</span><br><span class="line">        <span class="keyword">if</span> (x <span class="keyword">instanceof</span> <span class="built_in">Promise</span>) &#123;</span><br><span class="line">          x.then(resolve, reject)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          resolve(x)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        reject(err)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (self.status === <span class="string">'rejected'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> x = onRejected(self.reason)</span><br><span class="line">        <span class="keyword">if</span> (x <span class="keyword">instanceof</span> <span class="built_in">Promise</span>) &#123;</span><br><span class="line">          x.then(resolve, reject)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          resolve(x)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        reject(err)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (self.status === <span class="string">'pending'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      self.onFulfilledCallbacks.push(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> x = onFulfilled(self.value)</span><br><span class="line">        <span class="keyword">if</span> (x <span class="keyword">instanceof</span> <span class="built_in">Promise</span>) &#123;</span><br><span class="line">          x.then(resolve, reject)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          resolve(x)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      self.onRejectedCallbacks.push(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> x = onRejected(self.reason)</span><br><span class="line">        <span class="keyword">if</span> (x <span class="keyword">instanceof</span> <span class="built_in">Promise</span>) &#123;</span><br><span class="line">          x.then(resolve, reject)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          resolve(x)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码还要再次处理，就是当某个then中没有传成功时的回调函数或失败时的回调函数，代码就是报错，所以要指定默认值<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.prototype.then = <span class="function"><span class="keyword">function</span> (<span class="params">onFulfilled, onRejected</span>) </span>&#123;</span><br><span class="line">  onFulfilled = <span class="keyword">typeof</span> onFulfilled === <span class="string">'function'</span> ? onFulfilled :  <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;<span class="keyword">return</span> data&#125;</span><br><span class="line">  onRejected = <span class="keyword">typeof</span> onRejected === <span class="string">'function'</span> ? onRejected : <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;<span class="keyword">throw</span> err&#125;</span><br><span class="line">  <span class="keyword">let</span> self = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">if</span> (self.status === <span class="string">'fulfilled'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> x = onFulfilled(self.value)</span><br><span class="line">        <span class="keyword">if</span> (x <span class="keyword">instanceof</span> <span class="built_in">Promise</span>) &#123;</span><br><span class="line">          x.then(resolve, reject)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          resolve(x)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        reject(err)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (self.status === <span class="string">'rejected'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> x = onRejected(self.reason)</span><br><span class="line">        <span class="keyword">if</span> (x <span class="keyword">instanceof</span> <span class="built_in">Promise</span>) &#123;</span><br><span class="line">          x.then(resolve, reject)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          resolve(x)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        reject(err)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (self.status === <span class="string">'pending'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      self.onFulfilledCallbacks.push(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> x = onFulfilled(self.value)</span><br><span class="line">        <span class="keyword">if</span> (x <span class="keyword">instanceof</span> <span class="built_in">Promise</span>) &#123;</span><br><span class="line">          x.then(resolve, reject)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          resolve(x)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      self.onRejectedCallbacks.push(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> x = onRejected(self.reason)</span><br><span class="line">        <span class="keyword">if</span> (x <span class="keyword">instanceof</span> <span class="built_in">Promise</span>) &#123;</span><br><span class="line">          x.then(resolve, reject)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          resolve(x)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>指定默认值得时候注意失败时要继续抛出错误，因为只有代码报错才会走reject函数</p><h2 id="catch方法"><a href="#catch方法" class="headerlink" title="catch方法"></a>catch方法</h2><p>其实catch方法就是then方法的简写<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.prototype.catch = <span class="function"><span class="keyword">function</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.then(<span class="literal">null</span>, fn)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Promise</span>(<span class="params">excutor</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> self = <span class="keyword">this</span></span><br><span class="line">  self.status = <span class="string">'pending'</span></span><br><span class="line">  self.value = <span class="literal">null</span></span><br><span class="line">  self.reason = <span class="literal">null</span></span><br><span class="line">  self.onFulfilledCallbacks = []</span><br><span class="line">  self.onRejectedCallbacks = []</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (self.status === <span class="string">'pending'</span>) &#123;</span><br><span class="line">      self.value = value</span><br><span class="line">      self.status = <span class="string">'fulfilled'</span></span><br><span class="line">      self.onFulfilledCallbacks.forEach(<span class="function"><span class="params">item</span> =&gt;</span> item())</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">reject</span>(<span class="params">reason</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (self.status === <span class="string">'pending'</span>) &#123;</span><br><span class="line">      self.reason = reason</span><br><span class="line">      self.status = <span class="string">'rejected'</span></span><br><span class="line">      self.onRejectedCallbacks.forEach(<span class="function"><span class="params">item</span> =&gt;</span> item())</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    excutor(resolve, reject)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    reject(err)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.prototype.then = <span class="function"><span class="keyword">function</span> (<span class="params">onFulfilled, onRejected</span>) </span>&#123;</span><br><span class="line">  onFulfilled = <span class="keyword">typeof</span> onFulfilled === <span class="string">'function'</span> ? onFulfilled :  <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;resolve(data)&#125;</span><br><span class="line">  onRejected = <span class="keyword">typeof</span> onRejected === <span class="string">'function'</span> ? onRejected : <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;<span class="keyword">throw</span> err&#125;</span><br><span class="line">  <span class="keyword">let</span> self = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">if</span> (self.status === <span class="string">'fulfilled'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> x = onFulfilled(self.value)</span><br><span class="line">        <span class="keyword">if</span> (x <span class="keyword">instanceof</span> <span class="built_in">Promise</span>) &#123;</span><br><span class="line">          x.then(resolve, reject)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          resolve(x)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        reject(err)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (self.status === <span class="string">'rejected'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> x = onRejected(self.reason)</span><br><span class="line">        <span class="keyword">if</span> (x <span class="keyword">instanceof</span> <span class="built_in">Promise</span>) &#123;</span><br><span class="line">          x.then(resolve, reject)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          resolve(x)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        reject(err)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (self.status === <span class="string">'pending'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      self.onFulfilledCallbacks.push(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> x = onFulfilled(self.value)</span><br><span class="line">        <span class="keyword">if</span> (x <span class="keyword">instanceof</span> <span class="built_in">Promise</span>) &#123;</span><br><span class="line">          x.then(resolve, reject)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          resolve(x)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      self.onRejectedCallbacks.push(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> x = onRejected(self.reason)</span><br><span class="line">        <span class="keyword">if</span> (x <span class="keyword">instanceof</span> <span class="built_in">Promise</span>) &#123;</span><br><span class="line">          x.then(resolve, reject)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          resolve(x)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.prototype.catch = <span class="function"><span class="keyword">function</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.then(<span class="literal">null</span>, fn)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;promise&quot;&gt;&lt;a href=&quot;#promise&quot; class=&quot;headerlink&quot; title=&quot;promise&quot;&gt;&lt;/a&gt;promise&lt;/h1&gt;&lt;p&gt;Promise对象代表一个异步操作，有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）。&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;excutor&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; self = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  self.status = &lt;span class=&quot;string&quot;&gt;&#39;pending&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  self.value = &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  self.reason = &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;resolve&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;value&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (self.status === &lt;span class=&quot;string&quot;&gt;&#39;pending&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      self.value = value&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      self.status = &lt;span class=&quot;string&quot;&gt;&#39;fulfilled&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;reject&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;reason&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (self.status === &lt;span class=&quot;string&quot;&gt;&#39;pending&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      self.reason = reason&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      self.status = &lt;span class=&quot;string&quot;&gt;&#39;rejected&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    excutor(resolve, reject)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (err) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    reject(err)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Promise接收一个函数作为参数，该函数有两个参数，一个是resolve，表示成功时执行的函数，一个是reject，表示失败失败时执行的函数。resolve执行时传入的参数会作为then方法中第一个函数的参数，reject执行传入的参数会作为then方法中第二函数的参数。&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;.prototype.then = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;onFulfilled, onRejected&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; self = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (self.status === &lt;span class=&quot;string&quot;&gt;&#39;fulfilled&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    onFulfilled(self.value)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (self.status === &lt;span class=&quot;string&quot;&gt;&#39;rejected&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    onRejected(self.reason)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Promise中常常会写一些异步代码，等到异步操作执行完成才会触发resolve或者reject函数，当执行then方法的时候此时的状态还是初始的pending状态，所以为了能取到值，我们可以通过发布订阅模式来写。&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://douzhiwei.top/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="ES6" scheme="http://douzhiwei.top/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>编写vue插件以及发布到npm</title>
    <link href="http://douzhiwei.top/2018/03/16/%E7%BC%96%E5%86%99vue%E6%8F%92%E4%BB%B6%E4%BB%A5%E5%8F%8A%E5%8F%91%E5%B8%83%E5%88%B0npm/"/>
    <id>http://douzhiwei.top/2018/03/16/编写vue插件以及发布到npm/</id>
    <published>2018-03-16T02:37:12.000Z</published>
    <updated>2018-03-26T07:36:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="开发插件"><a href="#开发插件" class="headerlink" title="开发插件"></a>开发插件</h2><p>插件通常会为 Vue 添加全局功能。插件的范围没有限制——一般有下面几种：</p><ol><li><p>添加全局方法或者属性，如: <a href="https://github.com/karol-f/vue-custom-element" target="_blank" rel="noopener">vue-custom-element</a></p></li><li><p>添加全局资源：指令/过滤器/过渡等，如 <a href="https://github.com/vuejs/vue-touch" target="_blank" rel="noopener">vue-touch</a></p></li><li><p>通过全局 mixin 方法添加一些组件选项，如: <a href="https://github.com/vuejs/vue-router" target="_blank" rel="noopener">vue-router</a></p></li><li><p>添加 Vue 实例方法，通过把它们添加到 Vue.prototype 上实现。</p></li></ol><a id="more"></a><ol><li>一个库，提供自己的 API，同时提供上面提到的一个或多个功能，如 <a href="https://github.com/vuejs/vue-router" target="_blank" rel="noopener">vue-router</a></li></ol><p>Vue.js 的插件应当有一个公开方法 <code>install</code> 。这个方法的第一个参数是 <code>Vue</code> 构造器，第二个参数是一个可选的选项对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">MyPlugin.install = <span class="function"><span class="keyword">function</span> (<span class="params">Vue, options</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 1. 添加全局方法或属性</span></span><br><span class="line">  Vue.myGlobalMethod = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 逻辑...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. 添加全局资源</span></span><br><span class="line">  Vue.directive(<span class="string">'my-directive'</span>, &#123;</span><br><span class="line">    bind (el, binding, vnode, oldVnode) &#123;</span><br><span class="line">      <span class="comment">// 逻辑...</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3. 注入组件</span></span><br><span class="line">  Vue.mixin(&#123;</span><br><span class="line">    created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 逻辑...</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 4. 添加实例方法</span></span><br><span class="line">  Vue.prototype.$myMethod = <span class="function"><span class="keyword">function</span> (<span class="params">methodOptions</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 逻辑...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用插件"><a href="#使用插件" class="headerlink" title="使用插件"></a>使用插件</h2><p>通过全局方法 Vue.use() 使用插件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用 `MyPlugin.install(Vue)`</span></span><br><span class="line">Vue.use(MyPlugin)</span><br></pre></td></tr></table></figure><p>也可以传入一个选项对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.use(MyPlugin, &#123; <span class="attr">someOption</span>: <span class="literal">true</span> &#125;)</span><br></pre></td></tr></table></figure><p><code>Vue.use</code> 会自动阻止多次注册相同插件，届时只会注册一次该插件。</p><p>Vue.js 官方提供的一些插件 (例如 <code>vue-router</code>) 在检测到 <code>Vue</code> 是可访问的全局变量时会自动调用 <code>Vue.use()</code>。然而在例如 CommonJS 的模块环境中，你应该始终显式地调用 <code>Vue.use()</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用 Browserify 或 webpack 提供的 CommonJS 模块环境时</span></span><br><span class="line"><span class="keyword">var</span> Vue = <span class="built_in">require</span>(<span class="string">'vue'</span>)</span><br><span class="line"><span class="keyword">var</span> VueRouter = <span class="built_in">require</span>(<span class="string">'vue-router'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不要忘了调用此方法</span></span><br><span class="line">Vue.use(VueRouter)</span><br></pre></td></tr></table></figure><p><a href="https://github.com/vuejs/awesome-vue#components--libraries" target="_blank" rel="noopener">awesome-vue</a> 集合了来自社区贡献的数以千计的插件和库。</p><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><h3 id="省市区级联选择"><a href="#省市区级联选择" class="headerlink" title="省市区级联选择"></a>省市区级联选择</h3><ol><li>定义一个<code>install</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> areaSelecter <span class="keyword">from</span> <span class="string">'./area-selecter-map'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> areaSelect = &#123;</span><br><span class="line">    install: <span class="function"><span class="keyword">function</span> (<span class="params">Vue</span>) </span>&#123;</span><br><span class="line">        Vue.component(areaSelecter.name, areaSelecter)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> areaSelect</span><br></pre></td></tr></table></figure><ol><li>通过use方式使用</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> areaSelect <span class="keyword">from</span> <span class="string">'./lib/index.js'</span></span><br><span class="line"></span><br><span class="line">Vue.use(areaSelect)</span><br></pre></td></tr></table></figure><ol><li>在html里面使用</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">area-select</span>&gt;</span><span class="tag">&lt;/<span class="name">area-select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="发布到npm"><a href="#发布到npm" class="headerlink" title="发布到npm"></a>发布到npm</h2><p><strong>最先设置package.json,有几个重点</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&quot;name&quot;: &quot;项目名-必填&quot;,</span><br><span class="line"> &quot;version&quot;: &quot;版本号-必填&quot;,</span><br><span class="line"> &quot;description&quot;: &quot;描述-必填&quot;,</span><br><span class="line"> &quot;author&quot;: &quot;作者-乐意填就填&quot;,</span><br><span class="line"> &quot;private&quot;: false, // 必须是false,要不别人用不了</span><br><span class="line"> &quot;license&quot;: &quot;MIT&quot;, // 协议</span><br><span class="line"> &quot;repository&quot;: &quot;https://github.com/XXX&quot;, //必填</span><br><span class="line"> &quot;main&quot;: &quot;src/lib/index.js&quot;, // 入口文件,重要 必填</span><br></pre></td></tr></table></figure><p> <strong>注册npm用户</strong></p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm adduser </span><br><span class="line">Username: your name</span><br><span class="line">Password: your password</span><br><span class="line">Email: yourmail</span><br></pre></td></tr></table></figure><p><strong>看一下是不是自己</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm whoami</span><br></pre></td></tr></table></figure><p><strong>发布</strong></p><p>cd到项目目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm login // 登陆 </span><br><span class="line">npm publish // 发布</span><br></pre></td></tr></table></figure><p><strong>这个插件最开始是从ng移植过来的,但是经过一段时间的使用发现有性能问题,于是在重新编写了一次,源码里新旧代码都有,有兴趣的可以去比较一下</strong></p><p><a href="https://github.com/douzhiwei/area-selecter" target="_blank" rel="noopener">github</a></p><p><a href="https://www.npmjs.com/package/area-selecter" target="_blank" rel="noopener">npm</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;开发插件&quot;&gt;&lt;a href=&quot;#开发插件&quot; class=&quot;headerlink&quot; title=&quot;开发插件&quot;&gt;&lt;/a&gt;开发插件&lt;/h2&gt;&lt;p&gt;插件通常会为 Vue 添加全局功能。插件的范围没有限制——一般有下面几种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;添加全局方法或者属性，如: &lt;a href=&quot;https://github.com/karol-f/vue-custom-element&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;vue-custom-element&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;添加全局资源：指令/过滤器/过渡等，如 &lt;a href=&quot;https://github.com/vuejs/vue-touch&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;vue-touch&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;通过全局 mixin 方法添加一些组件选项，如: &lt;a href=&quot;https://github.com/vuejs/vue-router&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;vue-router&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;添加 Vue 实例方法，通过把它们添加到 Vue.prototype 上实现。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Vue" scheme="http://douzhiwei.top/categories/Vue/"/>
    
    
      <category term="vue" scheme="http://douzhiwei.top/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue-router</title>
    <link href="http://douzhiwei.top/2018/03/15/vue-router/"/>
    <id>http://douzhiwei.top/2018/03/15/vue-router/</id>
    <published>2018-03-15T02:44:54.000Z</published>
    <updated>2018-03-26T07:40:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用vue-router，我们只需要做的是将组件(components)映射到路由(routes).vue-router的概念也是比较多,建议先看<a href="https://router.vuejs.org/zh-cn/essentials/getting-started.html" target="_blank" rel="noopener">官方文档</a>,这主要是总结,基础的知识点略过</p><h2 id="几个易混概念"><a href="#几个易混概念" class="headerlink" title="几个易混概念"></a>几个易混概念</h2><h3 id="route-和-router"><a href="#route-和-router" class="headerlink" title="$route 和 $router"></a><code>$route</code> 和 <code>$router</code></h3><ul><li><p><code>$route</code>为当前router跳转对象,里面可以获取<code>name、path、query、params</code></p></li><li><p><code>$router</code>为router的实例,可以使用使用很多实例方法,比如<code>$router.push</code>等</p></li></ul><a id="more"></a><h3 id="动态路由和query参数"><a href="#动态路由和query参数" class="headerlink" title="动态路由和query参数"></a>动态路由和query参数</h3><ul><li>动态路由是以<code>/user/:id</code>的形式,这注意一点例如从 /user/foo 导航到 /user/bar，原来的组件实例会被复用。因为两个路由都渲染同个组件，比起销毁再创建，复用则显得更加高效。不过，这也意味着组件的生命周期钩子不会再被调用。想要检测参数变化可以使用<code>watch</code>和<code>beforeRouteUpdate</code></li><li>query参数的形式是<code>/user?123</code>,嵌套路由不推荐使用这种,会导致路由乱,不好维护</li></ul><h3 id="router-push-name-还是-path"><a href="#router-push-name-还是-path" class="headerlink" title="$router.push name 还是 path"></a>$router.push <code>name</code> 还是 <code>path</code></h3><p><code>name</code>和<code>path</code>用那个都可以,我的建议是不要混用,这里有几点需要注意<br><strong>如果提供了 path，params 会被忽略，上述例子中的 query 并不属于这种情况。取而代之的是下面例子的做法，你需要提供路由的 name 或手写完整的带有参数的 path</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> userId = <span class="number">123</span></span><br><span class="line">router.push(&#123; <span class="attr">name</span>: <span class="string">'user'</span>, <span class="attr">params</span>: &#123; userId &#125;&#125;) <span class="comment">// -&gt; /user/123</span></span><br><span class="line">router.push(&#123; <span class="attr">path</span>: <span class="string">`/user/<span class="subst">$&#123;userId&#125;</span>`</span> &#125;) <span class="comment">// -&gt; /user/123</span></span><br><span class="line"><span class="comment">// 这里的 params 不生效</span></span><br><span class="line">router.push(&#123; <span class="attr">path</span>: <span class="string">'/user'</span>, <span class="attr">params</span>: &#123; userId &#125;&#125;) <span class="comment">// -&gt; /user</span></span><br></pre></td></tr></table></figure><h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><p>有的时候刚进页面地址是<code>/</code>,这是页面是空白的,我们需要导航到<code>/user</code>,这是可以使用重定向</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">routes: [</span><br><span class="line">   &#123; <span class="attr">path</span>: <span class="string">'/'</span>, <span class="attr">redirect</span>: &#123; <span class="attr">path</span>: <span class="string">'/user'</span> &#125;&#125;</span><br><span class="line"> ]</span><br></pre></td></tr></table></figure><h3 id="路由传参"><a href="#路由传参" class="headerlink" title="路由传参"></a>路由传参</h3><p>为了使路由和组件尽可能的解耦,可以使用prop</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> User = &#123;</span><br><span class="line">  props: [<span class="string">'id'</span>],</span><br><span class="line">  template: <span class="string">'&lt;div&gt;User &#123;&#123; id &#125;&#125;&lt;/div&gt;'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'/user/:id'</span>, <span class="attr">component</span>: User, <span class="attr">props</span>: <span class="literal">true</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="守卫"><a href="#守卫" class="headerlink" title="守卫"></a>守卫</h3><p>这列举一下守卫导航,具体信息<a href="https://router.vuejs.org/zh-cn/advanced/navigation-guards.html" target="_blank" rel="noopener">看这</a></p><ol><li>全局守卫<code>router.beforeEach</code></li><li>全局后置钩子<code>router.afterEach</code></li><li>路由独享的守卫<code>beforeEnter</code></li><li>组件内的守卫<code>beforeRouteEnter,beforeRouteUpdate (2.2新增),beforeRouteLeave</code></li></ol><p>####完整的导航解析流程</p><ol><li>导航被触发。</li><li>在失活的组件里调用离开守卫。</li><li>调用全局的 beforeEach 守卫。</li><li>在重用的组件里调用 beforeRouteUpdate 守卫 (2.2+)。</li><li>在路由配置里调用 beforeEnter。</li><li>解析异步路由组件。</li><li>在被激活的组件里调用 beforeRouteEnter。</li><li>调用全局的 beforeResolve 守卫 (2.5+)。</li><li>导航被确认。</li><li>调用全局的 afterEach 钩子。</li><li>触发 DOM 更新。</li><li>用创建好的实例调用 beforeRouteEnter 守卫中传给 next 的回调函数。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用vue-router，我们只需要做的是将组件(components)映射到路由(routes).vue-router的概念也是比较多,建议先看&lt;a href=&quot;https://router.vuejs.org/zh-cn/essentials/getting-started.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方文档&lt;/a&gt;,这主要是总结,基础的知识点略过&lt;/p&gt;
&lt;h2 id=&quot;几个易混概念&quot;&gt;&lt;a href=&quot;#几个易混概念&quot; class=&quot;headerlink&quot; title=&quot;几个易混概念&quot;&gt;&lt;/a&gt;几个易混概念&lt;/h2&gt;&lt;h3 id=&quot;route-和-router&quot;&gt;&lt;a href=&quot;#route-和-router&quot; class=&quot;headerlink&quot; title=&quot;$route 和 $router&quot;&gt;&lt;/a&gt;&lt;code&gt;$route&lt;/code&gt; 和 &lt;code&gt;$router&lt;/code&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;$route&lt;/code&gt;为当前router跳转对象,里面可以获取&lt;code&gt;name、path、query、params&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;$router&lt;/code&gt;为router的实例,可以使用使用很多实例方法,比如&lt;code&gt;$router.push&lt;/code&gt;等&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Vue" scheme="http://douzhiwei.top/categories/Vue/"/>
    
    
      <category term="vue" scheme="http://douzhiwei.top/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vuex</title>
    <link href="http://douzhiwei.top/2018/03/14/vuex/"/>
    <id>http://douzhiwei.top/2018/03/14/vuex/</id>
    <published>2018-03-14T07:10:23.000Z</published>
    <updated>2018-03-26T07:41:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化</p><p>vuex的概念有很多,例如<code>state</code>,<code>getter</code>,<code>mutation</code>,<code>action</code>等等,还有很多用法,这里直接上我们的实践,中间穿插概念的简单说明,如果没接触过vuex,需要先看<a href="https://cn.vuejs.org/v2/guide/installation.html" target="_blank" rel="noopener">官方文档</a></p><a id="more"></a><h2 id="项目目录"><a href="#项目目录" class="headerlink" title="项目目录"></a>项目目录</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">├── index.html</span><br><span class="line">├── main.js</span><br><span class="line">├── src</span><br><span class="line">│   ├── App.vue</span><br><span class="line">│   └── ...</span><br><span class="line">└── store</span><br><span class="line">    ├── index.js     </span><br><span class="line">    ├── state.js         </span><br><span class="line">    ├── actions.js       </span><br><span class="line">    ├── mutations.js </span><br><span class="line">    ├── mutation-types.js </span><br><span class="line">    └── getters.js</span><br></pre></td></tr></table></figure><h3 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a><code>index.js</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> actions <span class="keyword">from</span> <span class="string">'./actions'</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> getters <span class="keyword">from</span> <span class="string">'./getters'</span></span><br><span class="line"><span class="keyword">import</span> state <span class="keyword">from</span> <span class="string">'./state'</span></span><br><span class="line"><span class="keyword">import</span> mutations <span class="keyword">from</span> <span class="string">'./mutations'</span></span><br><span class="line"><span class="keyword">import</span> createLogger <span class="keyword">from</span> <span class="string">'vuex/dist/logger'</span></span><br><span class="line"><span class="comment">// 使用vuex插件,会在控制台看到详细的数据变化</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> debug = process.env.NODE_ENV !== <span class="string">'production'</span></span><br><span class="line"><span class="comment">// 在开发环境使用严格模式，无论何时发生了状态变更且不是由 mutation 函数引起的，将会抛出错误</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  actions,</span><br><span class="line">  getters,</span><br><span class="line">  state,</span><br><span class="line">  mutations,</span><br><span class="line">  strict: debug,</span><br><span class="line">  plugins: debug ? [createLogger()] : []</span><br><span class="line">  <span class="comment">// 只有在开发环境才使用插件</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="state-js"><a href="#state-js" class="headerlink" title="state.js"></a><code>state.js</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  userInfo: &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">'占山'</span>&#125;</span><br><span class="line">  <span class="comment">// 预定义所有要用到的变量</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> state</span><br></pre></td></tr></table></figure><h3 id="getters-js"><a href="#getters-js" class="headerlink" title="getters.js"></a><code>getters.js</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> userInfo = <span class="function"><span class="params">state</span> =&gt;</span> state.userInfo</span><br><span class="line"><span class="comment">// 可以在这里进行过滤等操作</span></span><br></pre></td></tr></table></figure><h3 id="mutation-types-js"><a href="#mutation-types-js" class="headerlink" title="mutation-types.js"></a><code>mutation-types.js</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> USER_LOGIN = <span class="string">'USER_LOGIN'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> USER_LOGOUT = <span class="string">'USER_LOGOUT'</span></span><br><span class="line"><span class="comment">// 定义常量,在mutations.js和actions.js</span></span><br><span class="line"><span class="comment">// 使用常量替代 Mutation 事件类型 官方推荐写法</span></span><br></pre></td></tr></table></figure><h3 id="mutations-js"><a href="#mutations-js" class="headerlink" title="mutations.js"></a><code>mutations.js</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> types <span class="keyword">from</span> <span class="string">'./mutation-types'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  [types.USER_LOGIN] (state, params) &#123;</span><br><span class="line">    state.userInfo = params</span><br><span class="line">  &#125;,</span><br><span class="line">  [types.USER_LOGOUT] (state, params) &#123;</span><br><span class="line">    storage.remove(<span class="string">'user-info'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> mutations</span><br></pre></td></tr></table></figure><h3 id="actions-js"><a href="#actions-js" class="headerlink" title="actions.js"></a><code>actions.js</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> types <span class="keyword">from</span> <span class="string">'./mutation-types'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> userLogin = <span class="function"><span class="keyword">function</span> (<span class="params">&#123;commit&#125;, userInfo</span>) </span>&#123;</span><br><span class="line">  commit(types.USER_LOGIN, userInfo)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> userLogOut = <span class="function"><span class="keyword">function</span> (<span class="params">&#123;commit&#125;</span>) </span>&#123;</span><br><span class="line">  commit(types.USER_LOGOUT)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="几个易混的辅助函数"><a href="#几个易混的辅助函数" class="headerlink" title="几个易混的辅助函数"></a>几个易混的辅助函数</h2><table><thead><tr><th style="text-align:left">名称</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">mapState</td><td style="text-align:left">mapState 工具函数会将 store 中的 state 映射到局部计算属性中</td></tr><tr><td style="text-align:left">mapGetters</td><td style="text-align:left">mapGetters 工具函数会将 store 中的 getter 映射到局部计算中</td></tr><tr><td style="text-align:left">mapActions</td><td style="text-align:left">mapActions 工具函数会将 store 中的 dispatch 方法映射到组件的 methods 中</td></tr></tbody></table><p>这个三个函数都是vuex的语法糖,通过上面代码的组织方式,我们常用的是<code>mapGetters</code>和<br><code>mapActions</code></p><h2 id="使用流程"><a href="#使用流程" class="headerlink" title="使用流程"></a>使用流程</h2><p>最开始在<code>main.js</code>中注入store</p><h3 id="这里我们用一个登录保存用户信息在其他组件内使用用户信息和登出清空用户信息的这样的一个例子跑一遍vuex的流程"><a href="#这里我们用一个登录保存用户信息在其他组件内使用用户信息和登出清空用户信息的这样的一个例子跑一遍vuex的流程" class="headerlink" title="这里我们用一个登录保存用户信息在其他组件内使用用户信息和登出清空用户信息的这样的一个例子跑一遍vuex的流程"></a>这里我们用一个登录保存用户信息在其他组件内使用用户信息和登出清空用户信息的这样的一个例子跑一遍vuex的流程</h3><p>1- 登录</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">     ...mapActions([<span class="string">'userLogin'</span>]),</span><br><span class="line">     <span class="comment">//使用 mapActions 辅助函数将组件的 methods 映射为 store.dispatch 调用</span></span><br><span class="line">     login () &#123;       </span><br><span class="line">       api.user.login.save(<span class="keyword">this</span>.form).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">         <span class="keyword">if</span> (res.data.status === <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="keyword">this</span>.userLogin(<span class="keyword">this</span>.form)</span><br><span class="line">   <span class="comment">// 过程</span></span><br><span class="line">   <span class="number">1.</span>调用action里的userLogin()</span><br><span class="line">   <span class="number">2.</span> userLogin()会commit一个叫[USER_LOGIN]的mutation</span><br><span class="line">   <span class="number">3.</span> 名为[USER_LOGIN]的mutation会操作state,把userInfo保存在state中  </span><br><span class="line"></span><br><span class="line">     </span><br><span class="line">         &#125; </span><br><span class="line">       &#125;)...  </span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>2- 再组件内获取用户信息</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> computed: &#123;</span><br><span class="line">          ...mapGetters([</span><br><span class="line">              <span class="string">'userInfo'</span></span><br><span class="line">          ])</span><br><span class="line">      &#125;</span><br><span class="line"><span class="comment">// 通过mapGetters把userInfo映射到局部计算属性,</span></span><br><span class="line">   这时就可以通过<span class="keyword">this</span>.userInfo获取到用户信息</span><br></pre></td></tr></table></figure><p>3- 操作userInfo信息</p><p>当我们点击登出的时候,需要操作把state里面的userInfo信息清楚</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">     ...mapActions([<span class="string">'userLogOut'</span>]),</span><br><span class="line">     <span class="comment">// 这里我们之前已经用过了,不说了</span></span><br><span class="line">    </span><br><span class="line">     logOut() &#123;</span><br><span class="line">         <span class="keyword">this</span>.userLogOut()</span><br><span class="line">    <span class="comment">// 过程</span></span><br><span class="line">     <span class="number">1.</span> 调用action里的userLogOut()</span><br><span class="line"> <span class="number">2.</span> userLogOut()会commit一个叫[USER_LOGOUT]的mutation</span><br><span class="line"> <span class="number">3.</span> 名为[USER_LOGOUT]的mutation会操作state,删除userInfo               </span><br><span class="line">     &#125;</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure><p><strong>ok这一圈跑完了</strong></p><p>vuex可能会有一点难理解,首先的多看几遍官方文档</p><p>至于文档里提到过的Module写法,再dmp项目里已经用过了,感觉不如现在的代码整洁,现在这种方式在ssp项目有应用,效果还不错</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化&lt;/p&gt;
&lt;p&gt;vuex的概念有很多,例如&lt;code&gt;state&lt;/code&gt;,&lt;code&gt;getter&lt;/code&gt;,&lt;code&gt;mutation&lt;/code&gt;,&lt;code&gt;action&lt;/code&gt;等等,还有很多用法,这里直接上我们的实践,中间穿插概念的简单说明,如果没接触过vuex,需要先看&lt;a href=&quot;https://cn.vuejs.org/v2/guide/installation.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方文档&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Vue" scheme="http://douzhiwei.top/categories/Vue/"/>
    
    
      <category term="vue" scheme="http://douzhiwei.top/tags/vue/"/>
    
      <category term="vuex" scheme="http://douzhiwei.top/tags/vuex/"/>
    
  </entry>
  
</feed>
