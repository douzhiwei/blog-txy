<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>豆豆豆</title>
  
  <subtitle>学无止境</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://douzhiwei.top/"/>
  <updated>2018-03-07T11:29:27.000Z</updated>
  <id>http://douzhiwei.top/</id>
  
  <author>
    <name>豆</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>基于node的上线打包替换api地址的问题</title>
    <link href="http://douzhiwei.top/2018/03/07/%E5%9F%BA%E4%BA%8Enode%E7%9A%84%E4%B8%8A%E7%BA%BF%E6%89%93%E5%8C%85%E6%9B%BF%E6%8D%A2api%E5%9C%B0%E5%9D%80%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://douzhiwei.top/2018/03/07/基于node的上线打包替换api地址的问题/</id>
    <published>2018-03-07T11:27:47.000Z</published>
    <updated>2018-03-07T11:29:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>我们经常遇到项目开发时候api的一个地址比如<code>www.baidu.dev.com</code>,上线之后要改成<code>www.baidu.com</code>的需求,可是webpack没有对应的插件,也可能是我没找到,于是乎,自己搞一个吧</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> join = <span class="built_in">require</span>(<span class="string">'path'</span>).join</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> chalk = <span class="built_in">require</span>(<span class="string">'chalk'</span>)</span><br><span class="line"><span class="comment">// 线上地址</span></span><br><span class="line"><span class="keyword">const</span> API_ROOT = <span class="string">'www.baidu.com'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 找目录下的所有文件</span></span><br><span class="line"> findSync = <span class="function">(<span class="params">startPath</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> result = []</span><br><span class="line">   finder = <span class="function">(<span class="params">path</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> files = fs.readdirSync(path)</span><br><span class="line">    files.forEach(<span class="function">(<span class="params">val, index</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> fPath = join(path, val)</span><br><span class="line">      <span class="keyword">let</span> stats = fs.statSync(fPath)</span><br><span class="line">      <span class="keyword">if</span> (stats.isDirectory()) &#123;</span><br><span class="line">        finder(fPath)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (stats.isFile()) &#123;</span><br><span class="line">        result.push(fPath)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  finder(startPath)</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fileNames = findSync(<span class="string">'./dist/static/js'</span>)</span><br><span class="line">fileNames.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">  fs.readFile(item, (err, data) =&gt; &#123;</span><br><span class="line">    data = data + <span class="string">''</span></span><br><span class="line"><span class="comment">// 测试地址</span></span><br><span class="line">    <span class="keyword">if</span> (data.indexOf(<span class="string">'www.dev.baidu.com'</span>) != <span class="number">-1</span>) &#123;</span><br><span class="line">      data = data.replace(<span class="string">'www.dev.baidu.com'</span>, API_ROOT)</span><br><span class="line">      fs.writeFile(item, data, (err) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) <span class="keyword">throw</span> err</span><br><span class="line">        <span class="built_in">console</span>.log(chalk.blue(<span class="string">'文件'</span>, item))</span><br><span class="line">        <span class="built_in">console</span>.log(chalk.red(<span class="string">'路径替换完毕'</span>, API_ROOT))</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p> <strong>搞定</strong><br>还可以加到 package 里面 ,通过npm 来运行,这个看自己的需求了</p><p>————————————–大大的分割线———————————————</p><p>突然脑洞打开,webpack没有类似的插件,但是webpack有dev环境和prod环境,这样一来就好说了,上步骤</p><p>1.找到<code>dev.env.js</code>,初始是这样的<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>)</span><br><span class="line"><span class="keyword">const</span> prodEnv = <span class="built_in">require</span>(<span class="string">'./prod.env'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = merge(prodEnv, &#123;</span><br><span class="line">  NODE_ENV: <span class="string">'"development"'</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>我们在env下面加入<code>API_ROOT: &#39;&quot;baidu.dev.com&quot;&#39;</code><br>现在是这样<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>)</span><br><span class="line"><span class="keyword">const</span> prodEnv = <span class="built_in">require</span>(<span class="string">'./prod.env'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = merge(prodEnv, &#123;</span><br><span class="line">  NODE_ENV: <span class="string">'"development"'</span>,</span><br><span class="line">  API_ROOT: <span class="string">'"baidu.dev.com"'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>2.找到<code>prod.env.js</code>,初始是这样的<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  NODE_ENV: <span class="string">'"production"'</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们在env下面加入 <code>API_ROOT: &#39;&quot;baidu.com&quot;&#39;</code></p><p>现在是这样<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  NODE_ENV: <span class="string">'"production"'</span>,</span><br><span class="line">  API_ROOT: <span class="string">'"baidu.com"'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3.修改定义api的地方,从<code>process.env</code>里面拿API_ROOT,改成如下<br><code>export const API_ROOT = process.env.API_ROOT</code></p><p><strong>总结 npm run dev 的时候因为是开发环境,所以API_ROOT是dev.baidu.com,<br>npm run build 的时候是生产环境,API_ROOT是baidu.com,好了,玩耍吧</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我们经常遇到项目开发时候api的一个地址比如&lt;code&gt;www.baidu.dev.com&lt;/code&gt;,上线之后要改成&lt;code&gt;www.baidu.com&lt;/code&gt;的需求,可是webpack没有对应的插件,也可能是我没找到,于是乎,自己搞一个吧&lt;/p&gt;
&lt;figur
      
    
    </summary>
    
    
      <category term="node" scheme="http://douzhiwei.top/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>云服务器安装node环境</title>
    <link href="http://douzhiwei.top/2018/03/07/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85node%E7%8E%AF%E5%A2%83/"/>
    <id>http://douzhiwei.top/2018/03/07/云服务器安装node环境/</id>
    <published>2018-03-07T11:26:01.000Z</published>
    <updated>2018-03-07T11:29:27.000Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>先更新一下系统<br><code>sudo apt-get update</code></p></li><li><p>安装一些常用的工具<br><code>sudo apt-get install vim openssl build-essential libssl-dev wget curl git</code></p></li><li><p>安装nvm<br><code>wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.2/install.sh | bash</code></p></li></ol><p>安装完毕会提示再打开一个控制台</p><ol><li><p>使用nvm安装node,知道版本号,我这安装的是7<br><code>nvm install vv8.9.1</code></p></li><li><p>使用vv8.9.1为默认node版本<br><code>nvm use vv8.9.1</code><br><code>nvm alias default vv8.9.1</code></p></li><li><p>使用淘宝镜像cnpm<br><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></p></li></ol><p><strong>ok,node环境搭建完毕</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;先更新一下系统&lt;br&gt;&lt;code&gt;sudo apt-get update&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装一些常用的工具&lt;br&gt;&lt;code&gt;sudo apt-get install vim openssl build-essential
      
    
    </summary>
    
    
      <category term="node" scheme="http://douzhiwei.top/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>item2配置显示git分支和替换用户名为箭头</title>
    <link href="http://douzhiwei.top/2018/03/07/item2%E9%85%8D%E7%BD%AE%E6%98%BE%E7%A4%BAgit%E5%88%86%E6%94%AF%E5%92%8C%E6%9B%BF%E6%8D%A2%E7%94%A8%E6%88%B7%E5%90%8D%E4%B8%BA%E7%AE%AD%E5%A4%B4/"/>
    <id>http://douzhiwei.top/2018/03/07/item2配置显示git分支和替换用户名为箭头/</id>
    <published>2018-03-07T11:21:41.000Z</published>
    <updated>2018-03-07T11:29:27.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="先上效果图"><a href="#先上效果图" class="headerlink" title="先上效果图"></a>先上效果图</h4><p><img src="http://upload-images.jianshu.io/upload_images/7514255-856fc30735484730.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="先说一下item2的配色"><a href="#先说一下item2的配色" class="headerlink" title="先说一下item2的配色"></a>先说一下item2的配色</h3><p>终端输入</p><blockquote><p>vim ~/.bash_profile</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#enables colorin the terminal bash shell export</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> CLICOLOR=1</span><br><span class="line"></span><br><span class="line"><span class="comment">#setsup thecolor scheme for list export</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> LSCOLORS=gxfxcxdxbxegedabagacad</span><br><span class="line"></span><br><span class="line"><span class="comment">#sets up theprompt color (currently a green similar to linux terminal) 注意下面的这一行不要,一会去profile文件里编辑这个PS1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#exportPS1='\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;36m\]\w\[\033[00m\]\$ ' ~~</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#enables colorfor iTerm</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> TERM=xterm-256color</span><br></pre></td></tr></table></figure><p>设置完这个就可以自己选主题了,这就不说了</p><h3 id="然后设置显示git分支和替换用户名为箭头"><a href="#然后设置显示git分支和替换用户名为箭头" class="headerlink" title="然后设置显示git分支和替换用户名为箭头"></a>然后设置显示git分支和替换用户名为箭头</h3><p>终端输入</p><blockquote><p>sudo vim /etc/profile</p></blockquote><p>添加以下代码,注意原来这个文件里的内容不要删,把代码复制到下面就好</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">find_git_branch</span></span> () &#123;</span><br><span class="line"><span class="built_in">local</span> dir=. head</span><br><span class="line">until [ <span class="string">"<span class="variable">$dir</span>"</span> -ef / ]; <span class="keyword">do</span></span><br><span class="line"><span class="keyword">if</span> [ -f <span class="string">"<span class="variable">$dir</span>/.git/HEAD"</span> ]; <span class="keyword">then</span></span><br><span class="line">head=$(&lt; <span class="string">"<span class="variable">$dir</span>/.git/HEAD"</span>)</span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$head</span> = ref:\ refs/heads/* ]]; <span class="keyword">then</span></span><br><span class="line">git_branch=<span class="string">" (<span class="variable">$&#123;head#*/*/&#125;</span>)"</span></span><br><span class="line"><span class="keyword">elif</span> [[ <span class="variable">$head</span> != <span class="string">''</span> ]]; <span class="keyword">then</span></span><br><span class="line">git_branch=<span class="string">" → (detached)"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">git_branch=<span class="string">" → (unknow)"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">return</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">dir=<span class="string">"../<span class="variable">$dir</span>"</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">git_branch=<span class="string">''</span></span><br><span class="line">&#125;</span><br><span class="line">PROMPT_COMMAND=<span class="string">"find_git_branch; <span class="variable">$PROMPT_COMMAND</span>"</span></span><br><span class="line">black=$<span class="string">'\[\e[1;30m\]'</span></span><br><span class="line">red=$<span class="string">'\[\e[1;31m\]'</span></span><br><span class="line">green=$<span class="string">'\[\e[1;32m\]'</span></span><br><span class="line">yellow=$<span class="string">'\[\e[1;33m\]'</span></span><br><span class="line">blue=$<span class="string">'\[\e[1;34m\]'</span></span><br><span class="line">magenta=$<span class="string">'\[\e[1;35m\]'</span></span><br><span class="line">cyan=$<span class="string">'\[\e[1;36m\]'</span></span><br><span class="line">white=$<span class="string">'\[\e[1;37m\]'</span></span><br><span class="line">normal=$<span class="string">'\[\e[m\]'</span></span><br><span class="line"><span class="comment"># 这个要注意了下面的PS1就是最终的效果图,颜色可以自己配置,上面的就是颜色变量</span></span><br><span class="line">PS1=<span class="string">"<span class="variable">$green</span> → <span class="variable">$cyan</span>\w<span class="variable">$yellow</span>\$git_branch\$ <span class="variable">$magenta</span>"</span></span><br><span class="line"><span class="comment">#也可以试一下下面的这个配置,注意这两个PS写一个就好</span></span><br><span class="line"><span class="comment">#PS1="$white[$white@$green\h$white:$cyan\W$yellow\$git_branch$white]\$ $normal"</span></span><br></pre></td></tr></table></figure><p>终端输入 使刚才的配置生效</p><blockquote><p>source /etc/profile</p></blockquote><p>这样就大功告成了.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;先上效果图&quot;&gt;&lt;a href=&quot;#先上效果图&quot; class=&quot;headerlink&quot; title=&quot;先上效果图&quot;&gt;&lt;/a&gt;先上效果图&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/75
      
    
    </summary>
    
    
      <category term="iTerm2" scheme="http://douzhiwei.top/tags/iTerm2/"/>
    
  </entry>
  
  <entry>
    <title>一个简单的webhook</title>
    <link href="http://douzhiwei.top/2018/03/07/%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84webhook/"/>
    <id>http://douzhiwei.top/2018/03/07/一个简单的webhook/</id>
    <published>2018-03-07T11:16:21.000Z</published>
    <updated>2018-03-07T11:29:27.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>第一步, 起一个node服务</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="keyword">const</span> &#123;execFile&#125; = <span class="built_in">require</span>(<span class="string">'child_process'</span>)</span><br><span class="line"><span class="keyword">const</span> PORT = <span class="number">6666</span></span><br><span class="line"><span class="keyword">const</span> deployServer = http.createServer(<span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (request.url.search(<span class="regexp">/auto_deploy\/?$/i</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> child = execFile(<span class="string">'git'</span>, [<span class="string">'pull'</span>], (error, stdout, stderr) =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (error) &#123;</span><br><span class="line">                response.writeHead(<span class="number">500</span>)</span><br><span class="line">                response.end(<span class="string">'Server Internal Error.'</span>)</span><br><span class="line">                <span class="keyword">throw</span> error;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(stdout);</span><br><span class="line">                response.writeHead(<span class="number">200</span>)</span><br><span class="line">                response.end(<span class="string">'Deploy Done.'</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        response.writeHead(<span class="number">404</span>)</span><br><span class="line">        response.end(<span class="string">'Not Found.'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">deployServer.listen(PORT);</span><br></pre></td></tr></table></figure><ul><li>第二步,使用nginx反向代理</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location /auto_deploy &#123;</span><br><span class="line">    proxy_pass http://127.0.0.1:6666;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;第一步, 起一个node服务&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
    
      <category term="node" scheme="http://douzhiwei.top/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>渐进增强和优雅降级</title>
    <link href="http://douzhiwei.top/2018/03/07/%E6%B8%90%E8%BF%9B%E5%A2%9E%E5%BC%BA%E5%92%8C%E4%BC%98%E9%9B%85%E9%99%8D%E7%BA%A7/"/>
    <id>http://douzhiwei.top/2018/03/07/渐进增强和优雅降级/</id>
    <published>2018-03-07T08:49:06.000Z</published>
    <updated>2018-03-07T09:54:27.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>渐进增强 progressive enhancement</strong>：针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验</p><p><strong>优雅降级</strong>：一开始就构建完整的功能，然后再针对低版本浏览器进行兼容</p><a id="more"></a><p><strong>区别</strong>：</p><ul><li>优雅降级是从复杂的现状开始，并试图减少用户体验的供给，</li><li><p>渐进增强则是从一个非常基础的，能够起作用的版本开始，并不断扩充，以适应未来环境的需要<br>优雅降级观点</p></li><li><p>优雅降级观点认为应该针对那些最高级、最完善的浏览器来设计网站。而将那些被认为“过时”或有功能缺失的浏览器下的测试工作安排在开发周期的最后阶段，并把测试对象限定为主流浏览器在这种设计范例下，旧版的浏览器被认为仅能提供“简陋却无妨（poor, but passable)“的浏览体验。你可以做一些小的调整来适应某个特定的浏览器。但由于它们并非我们所关注的焦点，因此除了修复较大的错误之外，其它的差异将被直接忽略。</p></li><li><p>渐进增强则认为应关注于内容本身。内容是我们建立网站的诱因。有的网站展示它，有的则收集它，有的寻求，有的操作，还有的网站甚至会包含以上的种种，但相同点是它们全都涉及到内容。这使得“渐进增强”成为一种更为合理的设计范例。这也是它立即被 Yahoo！所采纳并用以构建其“分级式浏览器支持（Graded Browser Support）”策略的原因所在。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;渐进增强 progressive enhancement&lt;/strong&gt;：针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;优雅降级&lt;/strong&gt;：一开始就构建完整的功能，然后再针对低版本浏览器进行兼容&lt;/p&gt;
    
    </summary>
    
    
      <category term="渐进增强和优雅降级" scheme="http://douzhiwei.top/tags/%E6%B8%90%E8%BF%9B%E5%A2%9E%E5%BC%BA%E5%92%8C%E4%BC%98%E9%9B%85%E9%99%8D%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>测试分类和标签</title>
    <link href="http://douzhiwei.top/2018/03/07/%E5%93%88%E5%93%88%E5%93%88/"/>
    <id>http://douzhiwei.top/2018/03/07/哈哈哈/</id>
    <published>2018-03-07T07:04:28.000Z</published>
    <updated>2018-03-07T09:33:24.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h4><h5 id="内容1"><a href="#内容1" class="headerlink" title="内容1"></a>内容1</h5><h5 id="内容2"><a href="#内容2" class="headerlink" title="内容2"></a>内容2</h5>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;内容&quot;&gt;&lt;a href=&quot;#内容&quot; class=&quot;headerlink&quot; title=&quot;内容&quot;&gt;&lt;/a&gt;内容&lt;/h4&gt;&lt;h5 id=&quot;内容1&quot;&gt;&lt;a href=&quot;#内容1&quot; class=&quot;headerlink&quot; title=&quot;内容1&quot;&gt;&lt;/a&gt;内容1&lt;/h5&gt;&lt;h
      
    
    </summary>
    
      <category term="分类" scheme="http://douzhiwei.top/categories/%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="标签1" scheme="http://douzhiwei.top/tags/%E6%A0%87%E7%AD%BE1/"/>
    
      <category term="标签2" scheme="http://douzhiwei.top/tags/%E6%A0%87%E7%AD%BE2/"/>
    
  </entry>
  
</feed>
